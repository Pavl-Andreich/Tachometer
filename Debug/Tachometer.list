
Tachometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003144  08003144  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003144  08003144  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003144  08003144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800314c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  08003158  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003158  000050b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049bd  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c5  00000000  00000000  000099f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  0000abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000403  00000000  00000000  0000b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e477  00000000  00000000  0000b51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006dda  00000000  00000000  00019992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c51  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000763bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001388  00000000  00000000  00076400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00077788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030b0 	.word	0x080030b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080030b0 	.word	0x080030b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fc1d 	bl	8000a70 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb61 	bl	8000908 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fc0f 	bl	8000a70 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fc05 	bl	8000a70 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb8b 	bl	8000990 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb81 	bl	8000990 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 f855 	bl	8001360 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f000 fc44 	bl	8000b4c <__aeabi_dsub>
 80002c4:	f001 f84c 	bl	8001360 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_ddiv>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	46de      	mov	lr, fp
 80002dc:	4645      	mov	r5, r8
 80002de:	4657      	mov	r7, sl
 80002e0:	464e      	mov	r6, r9
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	b087      	sub	sp, #28
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	030b      	lsls	r3, r1, #12
 80002ec:	0b1b      	lsrs	r3, r3, #12
 80002ee:	469b      	mov	fp, r3
 80002f0:	0fca      	lsrs	r2, r1, #31
 80002f2:	004b      	lsls	r3, r1, #1
 80002f4:	0004      	movs	r4, r0
 80002f6:	4680      	mov	r8, r0
 80002f8:	0d5b      	lsrs	r3, r3, #21
 80002fa:	9202      	str	r2, [sp, #8]
 80002fc:	d100      	bne.n	8000300 <__aeabi_ddiv+0x28>
 80002fe:	e098      	b.n	8000432 <__aeabi_ddiv+0x15a>
 8000300:	4a7c      	ldr	r2, [pc, #496]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d037      	beq.n	8000376 <__aeabi_ddiv+0x9e>
 8000306:	4659      	mov	r1, fp
 8000308:	0f42      	lsrs	r2, r0, #29
 800030a:	00c9      	lsls	r1, r1, #3
 800030c:	430a      	orrs	r2, r1
 800030e:	2180      	movs	r1, #128	@ 0x80
 8000310:	0409      	lsls	r1, r1, #16
 8000312:	4311      	orrs	r1, r2
 8000314:	00c2      	lsls	r2, r0, #3
 8000316:	4690      	mov	r8, r2
 8000318:	4a77      	ldr	r2, [pc, #476]	@ (80004f8 <__aeabi_ddiv+0x220>)
 800031a:	4689      	mov	r9, r1
 800031c:	4692      	mov	sl, r2
 800031e:	449a      	add	sl, r3
 8000320:	2300      	movs	r3, #0
 8000322:	2400      	movs	r4, #0
 8000324:	9303      	str	r3, [sp, #12]
 8000326:	9e00      	ldr	r6, [sp, #0]
 8000328:	9f01      	ldr	r7, [sp, #4]
 800032a:	033b      	lsls	r3, r7, #12
 800032c:	0b1b      	lsrs	r3, r3, #12
 800032e:	469b      	mov	fp, r3
 8000330:	007b      	lsls	r3, r7, #1
 8000332:	0030      	movs	r0, r6
 8000334:	0d5b      	lsrs	r3, r3, #21
 8000336:	0ffd      	lsrs	r5, r7, #31
 8000338:	2b00      	cmp	r3, #0
 800033a:	d059      	beq.n	80003f0 <__aeabi_ddiv+0x118>
 800033c:	4a6d      	ldr	r2, [pc, #436]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d048      	beq.n	80003d4 <__aeabi_ddiv+0xfc>
 8000342:	4659      	mov	r1, fp
 8000344:	0f72      	lsrs	r2, r6, #29
 8000346:	00c9      	lsls	r1, r1, #3
 8000348:	430a      	orrs	r2, r1
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	0409      	lsls	r1, r1, #16
 800034e:	4311      	orrs	r1, r2
 8000350:	468b      	mov	fp, r1
 8000352:	4969      	ldr	r1, [pc, #420]	@ (80004f8 <__aeabi_ddiv+0x220>)
 8000354:	00f2      	lsls	r2, r6, #3
 8000356:	468c      	mov	ip, r1
 8000358:	4651      	mov	r1, sl
 800035a:	4463      	add	r3, ip
 800035c:	1acb      	subs	r3, r1, r3
 800035e:	469a      	mov	sl, r3
 8000360:	2100      	movs	r1, #0
 8000362:	9e02      	ldr	r6, [sp, #8]
 8000364:	406e      	eors	r6, r5
 8000366:	b2f6      	uxtb	r6, r6
 8000368:	2c0f      	cmp	r4, #15
 800036a:	d900      	bls.n	800036e <__aeabi_ddiv+0x96>
 800036c:	e0ce      	b.n	800050c <__aeabi_ddiv+0x234>
 800036e:	4b63      	ldr	r3, [pc, #396]	@ (80004fc <__aeabi_ddiv+0x224>)
 8000370:	00a4      	lsls	r4, r4, #2
 8000372:	591b      	ldr	r3, [r3, r4]
 8000374:	469f      	mov	pc, r3
 8000376:	465a      	mov	r2, fp
 8000378:	4302      	orrs	r2, r0
 800037a:	4691      	mov	r9, r2
 800037c:	d000      	beq.n	8000380 <__aeabi_ddiv+0xa8>
 800037e:	e090      	b.n	80004a2 <__aeabi_ddiv+0x1ca>
 8000380:	469a      	mov	sl, r3
 8000382:	2302      	movs	r3, #2
 8000384:	4690      	mov	r8, r2
 8000386:	2408      	movs	r4, #8
 8000388:	9303      	str	r3, [sp, #12]
 800038a:	e7cc      	b.n	8000326 <__aeabi_ddiv+0x4e>
 800038c:	46cb      	mov	fp, r9
 800038e:	4642      	mov	r2, r8
 8000390:	9d02      	ldr	r5, [sp, #8]
 8000392:	9903      	ldr	r1, [sp, #12]
 8000394:	2902      	cmp	r1, #2
 8000396:	d100      	bne.n	800039a <__aeabi_ddiv+0xc2>
 8000398:	e1de      	b.n	8000758 <__aeabi_ddiv+0x480>
 800039a:	2903      	cmp	r1, #3
 800039c:	d100      	bne.n	80003a0 <__aeabi_ddiv+0xc8>
 800039e:	e08d      	b.n	80004bc <__aeabi_ddiv+0x1e4>
 80003a0:	2901      	cmp	r1, #1
 80003a2:	d000      	beq.n	80003a6 <__aeabi_ddiv+0xce>
 80003a4:	e179      	b.n	800069a <__aeabi_ddiv+0x3c2>
 80003a6:	002e      	movs	r6, r5
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	2400      	movs	r4, #0
 80003ae:	4690      	mov	r8, r2
 80003b0:	051b      	lsls	r3, r3, #20
 80003b2:	4323      	orrs	r3, r4
 80003b4:	07f6      	lsls	r6, r6, #31
 80003b6:	4333      	orrs	r3, r6
 80003b8:	4640      	mov	r0, r8
 80003ba:	0019      	movs	r1, r3
 80003bc:	b007      	add	sp, #28
 80003be:	bcf0      	pop	{r4, r5, r6, r7}
 80003c0:	46bb      	mov	fp, r7
 80003c2:	46b2      	mov	sl, r6
 80003c4:	46a9      	mov	r9, r5
 80003c6:	46a0      	mov	r8, r4
 80003c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ca:	2200      	movs	r2, #0
 80003cc:	2400      	movs	r4, #0
 80003ce:	4690      	mov	r8, r2
 80003d0:	4b48      	ldr	r3, [pc, #288]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 80003d2:	e7ed      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80003d4:	465a      	mov	r2, fp
 80003d6:	9b00      	ldr	r3, [sp, #0]
 80003d8:	431a      	orrs	r2, r3
 80003da:	4b49      	ldr	r3, [pc, #292]	@ (8000500 <__aeabi_ddiv+0x228>)
 80003dc:	469c      	mov	ip, r3
 80003de:	44e2      	add	sl, ip
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	d159      	bne.n	8000498 <__aeabi_ddiv+0x1c0>
 80003e4:	2302      	movs	r3, #2
 80003e6:	431c      	orrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	2102      	movs	r1, #2
 80003ec:	469b      	mov	fp, r3
 80003ee:	e7b8      	b.n	8000362 <__aeabi_ddiv+0x8a>
 80003f0:	465a      	mov	r2, fp
 80003f2:	9b00      	ldr	r3, [sp, #0]
 80003f4:	431a      	orrs	r2, r3
 80003f6:	d049      	beq.n	800048c <__aeabi_ddiv+0x1b4>
 80003f8:	465b      	mov	r3, fp
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d100      	bne.n	8000400 <__aeabi_ddiv+0x128>
 80003fe:	e19c      	b.n	800073a <__aeabi_ddiv+0x462>
 8000400:	4658      	mov	r0, fp
 8000402:	f001 f80d 	bl	8001420 <__clzsi2>
 8000406:	0002      	movs	r2, r0
 8000408:	0003      	movs	r3, r0
 800040a:	3a0b      	subs	r2, #11
 800040c:	271d      	movs	r7, #29
 800040e:	9e00      	ldr	r6, [sp, #0]
 8000410:	1aba      	subs	r2, r7, r2
 8000412:	0019      	movs	r1, r3
 8000414:	4658      	mov	r0, fp
 8000416:	40d6      	lsrs	r6, r2
 8000418:	3908      	subs	r1, #8
 800041a:	4088      	lsls	r0, r1
 800041c:	0032      	movs	r2, r6
 800041e:	4302      	orrs	r2, r0
 8000420:	4693      	mov	fp, r2
 8000422:	9a00      	ldr	r2, [sp, #0]
 8000424:	408a      	lsls	r2, r1
 8000426:	4937      	ldr	r1, [pc, #220]	@ (8000504 <__aeabi_ddiv+0x22c>)
 8000428:	4453      	add	r3, sl
 800042a:	468a      	mov	sl, r1
 800042c:	2100      	movs	r1, #0
 800042e:	449a      	add	sl, r3
 8000430:	e797      	b.n	8000362 <__aeabi_ddiv+0x8a>
 8000432:	465b      	mov	r3, fp
 8000434:	4303      	orrs	r3, r0
 8000436:	4699      	mov	r9, r3
 8000438:	d021      	beq.n	800047e <__aeabi_ddiv+0x1a6>
 800043a:	465b      	mov	r3, fp
 800043c:	2b00      	cmp	r3, #0
 800043e:	d100      	bne.n	8000442 <__aeabi_ddiv+0x16a>
 8000440:	e169      	b.n	8000716 <__aeabi_ddiv+0x43e>
 8000442:	4658      	mov	r0, fp
 8000444:	f000 ffec 	bl	8001420 <__clzsi2>
 8000448:	230b      	movs	r3, #11
 800044a:	425b      	negs	r3, r3
 800044c:	469c      	mov	ip, r3
 800044e:	0002      	movs	r2, r0
 8000450:	4484      	add	ip, r0
 8000452:	4666      	mov	r6, ip
 8000454:	231d      	movs	r3, #29
 8000456:	1b9b      	subs	r3, r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	0011      	movs	r1, r2
 800045c:	4658      	mov	r0, fp
 800045e:	40de      	lsrs	r6, r3
 8000460:	3908      	subs	r1, #8
 8000462:	4088      	lsls	r0, r1
 8000464:	0033      	movs	r3, r6
 8000466:	4303      	orrs	r3, r0
 8000468:	4699      	mov	r9, r3
 800046a:	0023      	movs	r3, r4
 800046c:	408b      	lsls	r3, r1
 800046e:	4698      	mov	r8, r3
 8000470:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <__aeabi_ddiv+0x230>)
 8000472:	2400      	movs	r4, #0
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	469a      	mov	sl, r3
 8000478:	2300      	movs	r3, #0
 800047a:	9303      	str	r3, [sp, #12]
 800047c:	e753      	b.n	8000326 <__aeabi_ddiv+0x4e>
 800047e:	2300      	movs	r3, #0
 8000480:	4698      	mov	r8, r3
 8000482:	469a      	mov	sl, r3
 8000484:	3301      	adds	r3, #1
 8000486:	2404      	movs	r4, #4
 8000488:	9303      	str	r3, [sp, #12]
 800048a:	e74c      	b.n	8000326 <__aeabi_ddiv+0x4e>
 800048c:	2301      	movs	r3, #1
 800048e:	431c      	orrs	r4, r3
 8000490:	2300      	movs	r3, #0
 8000492:	2101      	movs	r1, #1
 8000494:	469b      	mov	fp, r3
 8000496:	e764      	b.n	8000362 <__aeabi_ddiv+0x8a>
 8000498:	2303      	movs	r3, #3
 800049a:	0032      	movs	r2, r6
 800049c:	2103      	movs	r1, #3
 800049e:	431c      	orrs	r4, r3
 80004a0:	e75f      	b.n	8000362 <__aeabi_ddiv+0x8a>
 80004a2:	469a      	mov	sl, r3
 80004a4:	2303      	movs	r3, #3
 80004a6:	46d9      	mov	r9, fp
 80004a8:	240c      	movs	r4, #12
 80004aa:	9303      	str	r3, [sp, #12]
 80004ac:	e73b      	b.n	8000326 <__aeabi_ddiv+0x4e>
 80004ae:	2300      	movs	r3, #0
 80004b0:	2480      	movs	r4, #128	@ 0x80
 80004b2:	4698      	mov	r8, r3
 80004b4:	2600      	movs	r6, #0
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 80004b8:	0324      	lsls	r4, r4, #12
 80004ba:	e779      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80004bc:	2480      	movs	r4, #128	@ 0x80
 80004be:	465b      	mov	r3, fp
 80004c0:	0324      	lsls	r4, r4, #12
 80004c2:	431c      	orrs	r4, r3
 80004c4:	0324      	lsls	r4, r4, #12
 80004c6:	002e      	movs	r6, r5
 80004c8:	4690      	mov	r8, r2
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 80004cc:	0b24      	lsrs	r4, r4, #12
 80004ce:	e76f      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80004d0:	2480      	movs	r4, #128	@ 0x80
 80004d2:	464b      	mov	r3, r9
 80004d4:	0324      	lsls	r4, r4, #12
 80004d6:	4223      	tst	r3, r4
 80004d8:	d002      	beq.n	80004e0 <__aeabi_ddiv+0x208>
 80004da:	465b      	mov	r3, fp
 80004dc:	4223      	tst	r3, r4
 80004de:	d0f0      	beq.n	80004c2 <__aeabi_ddiv+0x1ea>
 80004e0:	2480      	movs	r4, #128	@ 0x80
 80004e2:	464b      	mov	r3, r9
 80004e4:	0324      	lsls	r4, r4, #12
 80004e6:	431c      	orrs	r4, r3
 80004e8:	0324      	lsls	r4, r4, #12
 80004ea:	9e02      	ldr	r6, [sp, #8]
 80004ec:	4b01      	ldr	r3, [pc, #4]	@ (80004f4 <__aeabi_ddiv+0x21c>)
 80004ee:	0b24      	lsrs	r4, r4, #12
 80004f0:	e75e      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	000007ff 	.word	0x000007ff
 80004f8:	fffffc01 	.word	0xfffffc01
 80004fc:	080030c8 	.word	0x080030c8
 8000500:	fffff801 	.word	0xfffff801
 8000504:	000003f3 	.word	0x000003f3
 8000508:	fffffc0d 	.word	0xfffffc0d
 800050c:	45cb      	cmp	fp, r9
 800050e:	d200      	bcs.n	8000512 <__aeabi_ddiv+0x23a>
 8000510:	e0f8      	b.n	8000704 <__aeabi_ddiv+0x42c>
 8000512:	d100      	bne.n	8000516 <__aeabi_ddiv+0x23e>
 8000514:	e0f3      	b.n	80006fe <__aeabi_ddiv+0x426>
 8000516:	2301      	movs	r3, #1
 8000518:	425b      	negs	r3, r3
 800051a:	469c      	mov	ip, r3
 800051c:	4644      	mov	r4, r8
 800051e:	4648      	mov	r0, r9
 8000520:	2500      	movs	r5, #0
 8000522:	44e2      	add	sl, ip
 8000524:	465b      	mov	r3, fp
 8000526:	0e17      	lsrs	r7, r2, #24
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	431f      	orrs	r7, r3
 800052c:	0c19      	lsrs	r1, r3, #16
 800052e:	043b      	lsls	r3, r7, #16
 8000530:	0212      	lsls	r2, r2, #8
 8000532:	9700      	str	r7, [sp, #0]
 8000534:	0c1f      	lsrs	r7, r3, #16
 8000536:	4691      	mov	r9, r2
 8000538:	9102      	str	r1, [sp, #8]
 800053a:	9703      	str	r7, [sp, #12]
 800053c:	f7ff fe6a 	bl	8000214 <__aeabi_uidivmod>
 8000540:	0002      	movs	r2, r0
 8000542:	437a      	muls	r2, r7
 8000544:	040b      	lsls	r3, r1, #16
 8000546:	0c21      	lsrs	r1, r4, #16
 8000548:	4680      	mov	r8, r0
 800054a:	4319      	orrs	r1, r3
 800054c:	428a      	cmp	r2, r1
 800054e:	d909      	bls.n	8000564 <__aeabi_ddiv+0x28c>
 8000550:	9f00      	ldr	r7, [sp, #0]
 8000552:	2301      	movs	r3, #1
 8000554:	46bc      	mov	ip, r7
 8000556:	425b      	negs	r3, r3
 8000558:	4461      	add	r1, ip
 800055a:	469c      	mov	ip, r3
 800055c:	44e0      	add	r8, ip
 800055e:	428f      	cmp	r7, r1
 8000560:	d800      	bhi.n	8000564 <__aeabi_ddiv+0x28c>
 8000562:	e15c      	b.n	800081e <__aeabi_ddiv+0x546>
 8000564:	1a88      	subs	r0, r1, r2
 8000566:	9902      	ldr	r1, [sp, #8]
 8000568:	f7ff fe54 	bl	8000214 <__aeabi_uidivmod>
 800056c:	9a03      	ldr	r2, [sp, #12]
 800056e:	0424      	lsls	r4, r4, #16
 8000570:	4342      	muls	r2, r0
 8000572:	0409      	lsls	r1, r1, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	0003      	movs	r3, r0
 8000578:	430c      	orrs	r4, r1
 800057a:	42a2      	cmp	r2, r4
 800057c:	d906      	bls.n	800058c <__aeabi_ddiv+0x2b4>
 800057e:	9900      	ldr	r1, [sp, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	468c      	mov	ip, r1
 8000584:	4464      	add	r4, ip
 8000586:	42a1      	cmp	r1, r4
 8000588:	d800      	bhi.n	800058c <__aeabi_ddiv+0x2b4>
 800058a:	e142      	b.n	8000812 <__aeabi_ddiv+0x53a>
 800058c:	1aa0      	subs	r0, r4, r2
 800058e:	4642      	mov	r2, r8
 8000590:	0412      	lsls	r2, r2, #16
 8000592:	431a      	orrs	r2, r3
 8000594:	4693      	mov	fp, r2
 8000596:	464b      	mov	r3, r9
 8000598:	4659      	mov	r1, fp
 800059a:	0c1b      	lsrs	r3, r3, #16
 800059c:	001f      	movs	r7, r3
 800059e:	9304      	str	r3, [sp, #16]
 80005a0:	040b      	lsls	r3, r1, #16
 80005a2:	4649      	mov	r1, r9
 80005a4:	0409      	lsls	r1, r1, #16
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	000c      	movs	r4, r1
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	435c      	muls	r4, r3
 80005ae:	0c12      	lsrs	r2, r2, #16
 80005b0:	437b      	muls	r3, r7
 80005b2:	4688      	mov	r8, r1
 80005b4:	4351      	muls	r1, r2
 80005b6:	437a      	muls	r2, r7
 80005b8:	0c27      	lsrs	r7, r4, #16
 80005ba:	46bc      	mov	ip, r7
 80005bc:	185b      	adds	r3, r3, r1
 80005be:	4463      	add	r3, ip
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d903      	bls.n	80005cc <__aeabi_ddiv+0x2f4>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0249      	lsls	r1, r1, #9
 80005c8:	468c      	mov	ip, r1
 80005ca:	4462      	add	r2, ip
 80005cc:	0c19      	lsrs	r1, r3, #16
 80005ce:	0424      	lsls	r4, r4, #16
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	0c24      	lsrs	r4, r4, #16
 80005d4:	188a      	adds	r2, r1, r2
 80005d6:	191c      	adds	r4, r3, r4
 80005d8:	4290      	cmp	r0, r2
 80005da:	d302      	bcc.n	80005e2 <__aeabi_ddiv+0x30a>
 80005dc:	d116      	bne.n	800060c <__aeabi_ddiv+0x334>
 80005de:	42a5      	cmp	r5, r4
 80005e0:	d214      	bcs.n	800060c <__aeabi_ddiv+0x334>
 80005e2:	465b      	mov	r3, fp
 80005e4:	9f00      	ldr	r7, [sp, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	444d      	add	r5, r9
 80005ea:	9305      	str	r3, [sp, #20]
 80005ec:	454d      	cmp	r5, r9
 80005ee:	419b      	sbcs	r3, r3
 80005f0:	46bc      	mov	ip, r7
 80005f2:	425b      	negs	r3, r3
 80005f4:	4463      	add	r3, ip
 80005f6:	18c0      	adds	r0, r0, r3
 80005f8:	4287      	cmp	r7, r0
 80005fa:	d300      	bcc.n	80005fe <__aeabi_ddiv+0x326>
 80005fc:	e102      	b.n	8000804 <__aeabi_ddiv+0x52c>
 80005fe:	4282      	cmp	r2, r0
 8000600:	d900      	bls.n	8000604 <__aeabi_ddiv+0x32c>
 8000602:	e129      	b.n	8000858 <__aeabi_ddiv+0x580>
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x330>
 8000606:	e124      	b.n	8000852 <__aeabi_ddiv+0x57a>
 8000608:	9b05      	ldr	r3, [sp, #20]
 800060a:	469b      	mov	fp, r3
 800060c:	1b2c      	subs	r4, r5, r4
 800060e:	42a5      	cmp	r5, r4
 8000610:	41ad      	sbcs	r5, r5
 8000612:	9b00      	ldr	r3, [sp, #0]
 8000614:	1a80      	subs	r0, r0, r2
 8000616:	426d      	negs	r5, r5
 8000618:	1b40      	subs	r0, r0, r5
 800061a:	4283      	cmp	r3, r0
 800061c:	d100      	bne.n	8000620 <__aeabi_ddiv+0x348>
 800061e:	e10f      	b.n	8000840 <__aeabi_ddiv+0x568>
 8000620:	9902      	ldr	r1, [sp, #8]
 8000622:	f7ff fdf7 	bl	8000214 <__aeabi_uidivmod>
 8000626:	9a03      	ldr	r2, [sp, #12]
 8000628:	040b      	lsls	r3, r1, #16
 800062a:	4342      	muls	r2, r0
 800062c:	0c21      	lsrs	r1, r4, #16
 800062e:	0005      	movs	r5, r0
 8000630:	4319      	orrs	r1, r3
 8000632:	428a      	cmp	r2, r1
 8000634:	d900      	bls.n	8000638 <__aeabi_ddiv+0x360>
 8000636:	e0cb      	b.n	80007d0 <__aeabi_ddiv+0x4f8>
 8000638:	1a88      	subs	r0, r1, r2
 800063a:	9902      	ldr	r1, [sp, #8]
 800063c:	f7ff fdea 	bl	8000214 <__aeabi_uidivmod>
 8000640:	9a03      	ldr	r2, [sp, #12]
 8000642:	0424      	lsls	r4, r4, #16
 8000644:	4342      	muls	r2, r0
 8000646:	0409      	lsls	r1, r1, #16
 8000648:	0c24      	lsrs	r4, r4, #16
 800064a:	0003      	movs	r3, r0
 800064c:	430c      	orrs	r4, r1
 800064e:	42a2      	cmp	r2, r4
 8000650:	d900      	bls.n	8000654 <__aeabi_ddiv+0x37c>
 8000652:	e0ca      	b.n	80007ea <__aeabi_ddiv+0x512>
 8000654:	4641      	mov	r1, r8
 8000656:	1aa4      	subs	r4, r4, r2
 8000658:	042a      	lsls	r2, r5, #16
 800065a:	431a      	orrs	r2, r3
 800065c:	9f04      	ldr	r7, [sp, #16]
 800065e:	0413      	lsls	r3, r2, #16
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	4359      	muls	r1, r3
 8000664:	4640      	mov	r0, r8
 8000666:	437b      	muls	r3, r7
 8000668:	469c      	mov	ip, r3
 800066a:	0c15      	lsrs	r5, r2, #16
 800066c:	4368      	muls	r0, r5
 800066e:	0c0b      	lsrs	r3, r1, #16
 8000670:	4484      	add	ip, r0
 8000672:	4463      	add	r3, ip
 8000674:	437d      	muls	r5, r7
 8000676:	4298      	cmp	r0, r3
 8000678:	d903      	bls.n	8000682 <__aeabi_ddiv+0x3aa>
 800067a:	2080      	movs	r0, #128	@ 0x80
 800067c:	0240      	lsls	r0, r0, #9
 800067e:	4684      	mov	ip, r0
 8000680:	4465      	add	r5, ip
 8000682:	0c18      	lsrs	r0, r3, #16
 8000684:	0409      	lsls	r1, r1, #16
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	0c09      	lsrs	r1, r1, #16
 800068a:	1940      	adds	r0, r0, r5
 800068c:	185b      	adds	r3, r3, r1
 800068e:	4284      	cmp	r4, r0
 8000690:	d327      	bcc.n	80006e2 <__aeabi_ddiv+0x40a>
 8000692:	d023      	beq.n	80006dc <__aeabi_ddiv+0x404>
 8000694:	2301      	movs	r3, #1
 8000696:	0035      	movs	r5, r6
 8000698:	431a      	orrs	r2, r3
 800069a:	4b94      	ldr	r3, [pc, #592]	@ (80008ec <__aeabi_ddiv+0x614>)
 800069c:	4453      	add	r3, sl
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dd60      	ble.n	8000764 <__aeabi_ddiv+0x48c>
 80006a2:	0751      	lsls	r1, r2, #29
 80006a4:	d000      	beq.n	80006a8 <__aeabi_ddiv+0x3d0>
 80006a6:	e086      	b.n	80007b6 <__aeabi_ddiv+0x4de>
 80006a8:	002e      	movs	r6, r5
 80006aa:	08d1      	lsrs	r1, r2, #3
 80006ac:	465a      	mov	r2, fp
 80006ae:	01d2      	lsls	r2, r2, #7
 80006b0:	d506      	bpl.n	80006c0 <__aeabi_ddiv+0x3e8>
 80006b2:	465a      	mov	r2, fp
 80006b4:	4b8e      	ldr	r3, [pc, #568]	@ (80008f0 <__aeabi_ddiv+0x618>)
 80006b6:	401a      	ands	r2, r3
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	4693      	mov	fp, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	4453      	add	r3, sl
 80006c0:	4a8c      	ldr	r2, [pc, #560]	@ (80008f4 <__aeabi_ddiv+0x61c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	dd00      	ble.n	80006c8 <__aeabi_ddiv+0x3f0>
 80006c6:	e680      	b.n	80003ca <__aeabi_ddiv+0xf2>
 80006c8:	465a      	mov	r2, fp
 80006ca:	0752      	lsls	r2, r2, #29
 80006cc:	430a      	orrs	r2, r1
 80006ce:	4690      	mov	r8, r2
 80006d0:	465a      	mov	r2, fp
 80006d2:	055b      	lsls	r3, r3, #21
 80006d4:	0254      	lsls	r4, r2, #9
 80006d6:	0b24      	lsrs	r4, r4, #12
 80006d8:	0d5b      	lsrs	r3, r3, #21
 80006da:	e669      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80006dc:	0035      	movs	r5, r6
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0db      	beq.n	800069a <__aeabi_ddiv+0x3c2>
 80006e2:	9d00      	ldr	r5, [sp, #0]
 80006e4:	1e51      	subs	r1, r2, #1
 80006e6:	46ac      	mov	ip, r5
 80006e8:	4464      	add	r4, ip
 80006ea:	42ac      	cmp	r4, r5
 80006ec:	d200      	bcs.n	80006f0 <__aeabi_ddiv+0x418>
 80006ee:	e09e      	b.n	800082e <__aeabi_ddiv+0x556>
 80006f0:	4284      	cmp	r4, r0
 80006f2:	d200      	bcs.n	80006f6 <__aeabi_ddiv+0x41e>
 80006f4:	e0e1      	b.n	80008ba <__aeabi_ddiv+0x5e2>
 80006f6:	d100      	bne.n	80006fa <__aeabi_ddiv+0x422>
 80006f8:	e0ee      	b.n	80008d8 <__aeabi_ddiv+0x600>
 80006fa:	000a      	movs	r2, r1
 80006fc:	e7ca      	b.n	8000694 <__aeabi_ddiv+0x3bc>
 80006fe:	4542      	cmp	r2, r8
 8000700:	d900      	bls.n	8000704 <__aeabi_ddiv+0x42c>
 8000702:	e708      	b.n	8000516 <__aeabi_ddiv+0x23e>
 8000704:	464b      	mov	r3, r9
 8000706:	07dc      	lsls	r4, r3, #31
 8000708:	0858      	lsrs	r0, r3, #1
 800070a:	4643      	mov	r3, r8
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	431c      	orrs	r4, r3
 8000710:	4643      	mov	r3, r8
 8000712:	07dd      	lsls	r5, r3, #31
 8000714:	e706      	b.n	8000524 <__aeabi_ddiv+0x24c>
 8000716:	f000 fe83 	bl	8001420 <__clzsi2>
 800071a:	2315      	movs	r3, #21
 800071c:	469c      	mov	ip, r3
 800071e:	4484      	add	ip, r0
 8000720:	0002      	movs	r2, r0
 8000722:	4663      	mov	r3, ip
 8000724:	3220      	adds	r2, #32
 8000726:	2b1c      	cmp	r3, #28
 8000728:	dc00      	bgt.n	800072c <__aeabi_ddiv+0x454>
 800072a:	e692      	b.n	8000452 <__aeabi_ddiv+0x17a>
 800072c:	0023      	movs	r3, r4
 800072e:	3808      	subs	r0, #8
 8000730:	4083      	lsls	r3, r0
 8000732:	4699      	mov	r9, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4698      	mov	r8, r3
 8000738:	e69a      	b.n	8000470 <__aeabi_ddiv+0x198>
 800073a:	f000 fe71 	bl	8001420 <__clzsi2>
 800073e:	0002      	movs	r2, r0
 8000740:	0003      	movs	r3, r0
 8000742:	3215      	adds	r2, #21
 8000744:	3320      	adds	r3, #32
 8000746:	2a1c      	cmp	r2, #28
 8000748:	dc00      	bgt.n	800074c <__aeabi_ddiv+0x474>
 800074a:	e65f      	b.n	800040c <__aeabi_ddiv+0x134>
 800074c:	9900      	ldr	r1, [sp, #0]
 800074e:	3808      	subs	r0, #8
 8000750:	4081      	lsls	r1, r0
 8000752:	2200      	movs	r2, #0
 8000754:	468b      	mov	fp, r1
 8000756:	e666      	b.n	8000426 <__aeabi_ddiv+0x14e>
 8000758:	2200      	movs	r2, #0
 800075a:	002e      	movs	r6, r5
 800075c:	2400      	movs	r4, #0
 800075e:	4690      	mov	r8, r2
 8000760:	4b65      	ldr	r3, [pc, #404]	@ (80008f8 <__aeabi_ddiv+0x620>)
 8000762:	e625      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 8000764:	002e      	movs	r6, r5
 8000766:	2101      	movs	r1, #1
 8000768:	1ac9      	subs	r1, r1, r3
 800076a:	2938      	cmp	r1, #56	@ 0x38
 800076c:	dd00      	ble.n	8000770 <__aeabi_ddiv+0x498>
 800076e:	e61b      	b.n	80003a8 <__aeabi_ddiv+0xd0>
 8000770:	291f      	cmp	r1, #31
 8000772:	dc7e      	bgt.n	8000872 <__aeabi_ddiv+0x59a>
 8000774:	4861      	ldr	r0, [pc, #388]	@ (80008fc <__aeabi_ddiv+0x624>)
 8000776:	0014      	movs	r4, r2
 8000778:	4450      	add	r0, sl
 800077a:	465b      	mov	r3, fp
 800077c:	4082      	lsls	r2, r0
 800077e:	4083      	lsls	r3, r0
 8000780:	40cc      	lsrs	r4, r1
 8000782:	1e50      	subs	r0, r2, #1
 8000784:	4182      	sbcs	r2, r0
 8000786:	4323      	orrs	r3, r4
 8000788:	431a      	orrs	r2, r3
 800078a:	465b      	mov	r3, fp
 800078c:	40cb      	lsrs	r3, r1
 800078e:	0751      	lsls	r1, r2, #29
 8000790:	d009      	beq.n	80007a6 <__aeabi_ddiv+0x4ce>
 8000792:	210f      	movs	r1, #15
 8000794:	4011      	ands	r1, r2
 8000796:	2904      	cmp	r1, #4
 8000798:	d005      	beq.n	80007a6 <__aeabi_ddiv+0x4ce>
 800079a:	1d11      	adds	r1, r2, #4
 800079c:	4291      	cmp	r1, r2
 800079e:	4192      	sbcs	r2, r2
 80007a0:	4252      	negs	r2, r2
 80007a2:	189b      	adds	r3, r3, r2
 80007a4:	000a      	movs	r2, r1
 80007a6:	0219      	lsls	r1, r3, #8
 80007a8:	d400      	bmi.n	80007ac <__aeabi_ddiv+0x4d4>
 80007aa:	e09b      	b.n	80008e4 <__aeabi_ddiv+0x60c>
 80007ac:	2200      	movs	r2, #0
 80007ae:	2301      	movs	r3, #1
 80007b0:	2400      	movs	r4, #0
 80007b2:	4690      	mov	r8, r2
 80007b4:	e5fc      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80007b6:	210f      	movs	r1, #15
 80007b8:	4011      	ands	r1, r2
 80007ba:	2904      	cmp	r1, #4
 80007bc:	d100      	bne.n	80007c0 <__aeabi_ddiv+0x4e8>
 80007be:	e773      	b.n	80006a8 <__aeabi_ddiv+0x3d0>
 80007c0:	1d11      	adds	r1, r2, #4
 80007c2:	4291      	cmp	r1, r2
 80007c4:	4192      	sbcs	r2, r2
 80007c6:	4252      	negs	r2, r2
 80007c8:	002e      	movs	r6, r5
 80007ca:	08c9      	lsrs	r1, r1, #3
 80007cc:	4493      	add	fp, r2
 80007ce:	e76d      	b.n	80006ac <__aeabi_ddiv+0x3d4>
 80007d0:	9b00      	ldr	r3, [sp, #0]
 80007d2:	3d01      	subs	r5, #1
 80007d4:	469c      	mov	ip, r3
 80007d6:	4461      	add	r1, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d900      	bls.n	80007de <__aeabi_ddiv+0x506>
 80007dc:	e72c      	b.n	8000638 <__aeabi_ddiv+0x360>
 80007de:	428a      	cmp	r2, r1
 80007e0:	d800      	bhi.n	80007e4 <__aeabi_ddiv+0x50c>
 80007e2:	e729      	b.n	8000638 <__aeabi_ddiv+0x360>
 80007e4:	1e85      	subs	r5, r0, #2
 80007e6:	4461      	add	r1, ip
 80007e8:	e726      	b.n	8000638 <__aeabi_ddiv+0x360>
 80007ea:	9900      	ldr	r1, [sp, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	468c      	mov	ip, r1
 80007f0:	4464      	add	r4, ip
 80007f2:	42a1      	cmp	r1, r4
 80007f4:	d900      	bls.n	80007f8 <__aeabi_ddiv+0x520>
 80007f6:	e72d      	b.n	8000654 <__aeabi_ddiv+0x37c>
 80007f8:	42a2      	cmp	r2, r4
 80007fa:	d800      	bhi.n	80007fe <__aeabi_ddiv+0x526>
 80007fc:	e72a      	b.n	8000654 <__aeabi_ddiv+0x37c>
 80007fe:	1e83      	subs	r3, r0, #2
 8000800:	4464      	add	r4, ip
 8000802:	e727      	b.n	8000654 <__aeabi_ddiv+0x37c>
 8000804:	4287      	cmp	r7, r0
 8000806:	d000      	beq.n	800080a <__aeabi_ddiv+0x532>
 8000808:	e6fe      	b.n	8000608 <__aeabi_ddiv+0x330>
 800080a:	45a9      	cmp	r9, r5
 800080c:	d900      	bls.n	8000810 <__aeabi_ddiv+0x538>
 800080e:	e6fb      	b.n	8000608 <__aeabi_ddiv+0x330>
 8000810:	e6f5      	b.n	80005fe <__aeabi_ddiv+0x326>
 8000812:	42a2      	cmp	r2, r4
 8000814:	d800      	bhi.n	8000818 <__aeabi_ddiv+0x540>
 8000816:	e6b9      	b.n	800058c <__aeabi_ddiv+0x2b4>
 8000818:	1e83      	subs	r3, r0, #2
 800081a:	4464      	add	r4, ip
 800081c:	e6b6      	b.n	800058c <__aeabi_ddiv+0x2b4>
 800081e:	428a      	cmp	r2, r1
 8000820:	d800      	bhi.n	8000824 <__aeabi_ddiv+0x54c>
 8000822:	e69f      	b.n	8000564 <__aeabi_ddiv+0x28c>
 8000824:	46bc      	mov	ip, r7
 8000826:	1e83      	subs	r3, r0, #2
 8000828:	4698      	mov	r8, r3
 800082a:	4461      	add	r1, ip
 800082c:	e69a      	b.n	8000564 <__aeabi_ddiv+0x28c>
 800082e:	000a      	movs	r2, r1
 8000830:	4284      	cmp	r4, r0
 8000832:	d000      	beq.n	8000836 <__aeabi_ddiv+0x55e>
 8000834:	e72e      	b.n	8000694 <__aeabi_ddiv+0x3bc>
 8000836:	454b      	cmp	r3, r9
 8000838:	d000      	beq.n	800083c <__aeabi_ddiv+0x564>
 800083a:	e72b      	b.n	8000694 <__aeabi_ddiv+0x3bc>
 800083c:	0035      	movs	r5, r6
 800083e:	e72c      	b.n	800069a <__aeabi_ddiv+0x3c2>
 8000840:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <__aeabi_ddiv+0x614>)
 8000842:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <__aeabi_ddiv+0x628>)
 8000844:	4453      	add	r3, sl
 8000846:	4592      	cmp	sl, r2
 8000848:	db43      	blt.n	80008d2 <__aeabi_ddiv+0x5fa>
 800084a:	2201      	movs	r2, #1
 800084c:	2100      	movs	r1, #0
 800084e:	4493      	add	fp, r2
 8000850:	e72c      	b.n	80006ac <__aeabi_ddiv+0x3d4>
 8000852:	42ac      	cmp	r4, r5
 8000854:	d800      	bhi.n	8000858 <__aeabi_ddiv+0x580>
 8000856:	e6d7      	b.n	8000608 <__aeabi_ddiv+0x330>
 8000858:	2302      	movs	r3, #2
 800085a:	425b      	negs	r3, r3
 800085c:	469c      	mov	ip, r3
 800085e:	9900      	ldr	r1, [sp, #0]
 8000860:	444d      	add	r5, r9
 8000862:	454d      	cmp	r5, r9
 8000864:	419b      	sbcs	r3, r3
 8000866:	44e3      	add	fp, ip
 8000868:	468c      	mov	ip, r1
 800086a:	425b      	negs	r3, r3
 800086c:	4463      	add	r3, ip
 800086e:	18c0      	adds	r0, r0, r3
 8000870:	e6cc      	b.n	800060c <__aeabi_ddiv+0x334>
 8000872:	201f      	movs	r0, #31
 8000874:	4240      	negs	r0, r0
 8000876:	1ac3      	subs	r3, r0, r3
 8000878:	4658      	mov	r0, fp
 800087a:	40d8      	lsrs	r0, r3
 800087c:	2920      	cmp	r1, #32
 800087e:	d004      	beq.n	800088a <__aeabi_ddiv+0x5b2>
 8000880:	4659      	mov	r1, fp
 8000882:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <__aeabi_ddiv+0x62c>)
 8000884:	4453      	add	r3, sl
 8000886:	4099      	lsls	r1, r3
 8000888:	430a      	orrs	r2, r1
 800088a:	1e53      	subs	r3, r2, #1
 800088c:	419a      	sbcs	r2, r3
 800088e:	2307      	movs	r3, #7
 8000890:	0019      	movs	r1, r3
 8000892:	4302      	orrs	r2, r0
 8000894:	2400      	movs	r4, #0
 8000896:	4011      	ands	r1, r2
 8000898:	4213      	tst	r3, r2
 800089a:	d009      	beq.n	80008b0 <__aeabi_ddiv+0x5d8>
 800089c:	3308      	adds	r3, #8
 800089e:	4013      	ands	r3, r2
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d01d      	beq.n	80008e0 <__aeabi_ddiv+0x608>
 80008a4:	1d13      	adds	r3, r2, #4
 80008a6:	4293      	cmp	r3, r2
 80008a8:	4189      	sbcs	r1, r1
 80008aa:	001a      	movs	r2, r3
 80008ac:	4249      	negs	r1, r1
 80008ae:	0749      	lsls	r1, r1, #29
 80008b0:	08d2      	lsrs	r2, r2, #3
 80008b2:	430a      	orrs	r2, r1
 80008b4:	4690      	mov	r8, r2
 80008b6:	2300      	movs	r3, #0
 80008b8:	e57a      	b.n	80003b0 <__aeabi_ddiv+0xd8>
 80008ba:	4649      	mov	r1, r9
 80008bc:	9f00      	ldr	r7, [sp, #0]
 80008be:	004d      	lsls	r5, r1, #1
 80008c0:	454d      	cmp	r5, r9
 80008c2:	4189      	sbcs	r1, r1
 80008c4:	46bc      	mov	ip, r7
 80008c6:	4249      	negs	r1, r1
 80008c8:	4461      	add	r1, ip
 80008ca:	46a9      	mov	r9, r5
 80008cc:	3a02      	subs	r2, #2
 80008ce:	1864      	adds	r4, r4, r1
 80008d0:	e7ae      	b.n	8000830 <__aeabi_ddiv+0x558>
 80008d2:	2201      	movs	r2, #1
 80008d4:	4252      	negs	r2, r2
 80008d6:	e746      	b.n	8000766 <__aeabi_ddiv+0x48e>
 80008d8:	4599      	cmp	r9, r3
 80008da:	d3ee      	bcc.n	80008ba <__aeabi_ddiv+0x5e2>
 80008dc:	000a      	movs	r2, r1
 80008de:	e7aa      	b.n	8000836 <__aeabi_ddiv+0x55e>
 80008e0:	2100      	movs	r1, #0
 80008e2:	e7e5      	b.n	80008b0 <__aeabi_ddiv+0x5d8>
 80008e4:	0759      	lsls	r1, r3, #29
 80008e6:	025b      	lsls	r3, r3, #9
 80008e8:	0b1c      	lsrs	r4, r3, #12
 80008ea:	e7e1      	b.n	80008b0 <__aeabi_ddiv+0x5d8>
 80008ec:	000003ff 	.word	0x000003ff
 80008f0:	feffffff 	.word	0xfeffffff
 80008f4:	000007fe 	.word	0x000007fe
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	0000041e 	.word	0x0000041e
 8000900:	fffffc02 	.word	0xfffffc02
 8000904:	0000043e 	.word	0x0000043e

08000908 <__eqdf2>:
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090a:	4657      	mov	r7, sl
 800090c:	46de      	mov	lr, fp
 800090e:	464e      	mov	r6, r9
 8000910:	4645      	mov	r5, r8
 8000912:	b5e0      	push	{r5, r6, r7, lr}
 8000914:	000d      	movs	r5, r1
 8000916:	0004      	movs	r4, r0
 8000918:	0fe8      	lsrs	r0, r5, #31
 800091a:	4683      	mov	fp, r0
 800091c:	0309      	lsls	r1, r1, #12
 800091e:	0fd8      	lsrs	r0, r3, #31
 8000920:	0b09      	lsrs	r1, r1, #12
 8000922:	4682      	mov	sl, r0
 8000924:	4819      	ldr	r0, [pc, #100]	@ (800098c <__eqdf2+0x84>)
 8000926:	468c      	mov	ip, r1
 8000928:	031f      	lsls	r7, r3, #12
 800092a:	0069      	lsls	r1, r5, #1
 800092c:	005e      	lsls	r6, r3, #1
 800092e:	0d49      	lsrs	r1, r1, #21
 8000930:	0b3f      	lsrs	r7, r7, #12
 8000932:	0d76      	lsrs	r6, r6, #21
 8000934:	4281      	cmp	r1, r0
 8000936:	d018      	beq.n	800096a <__eqdf2+0x62>
 8000938:	4286      	cmp	r6, r0
 800093a:	d00f      	beq.n	800095c <__eqdf2+0x54>
 800093c:	2001      	movs	r0, #1
 800093e:	42b1      	cmp	r1, r6
 8000940:	d10d      	bne.n	800095e <__eqdf2+0x56>
 8000942:	45bc      	cmp	ip, r7
 8000944:	d10b      	bne.n	800095e <__eqdf2+0x56>
 8000946:	4294      	cmp	r4, r2
 8000948:	d109      	bne.n	800095e <__eqdf2+0x56>
 800094a:	45d3      	cmp	fp, sl
 800094c:	d01c      	beq.n	8000988 <__eqdf2+0x80>
 800094e:	2900      	cmp	r1, #0
 8000950:	d105      	bne.n	800095e <__eqdf2+0x56>
 8000952:	4660      	mov	r0, ip
 8000954:	4320      	orrs	r0, r4
 8000956:	1e43      	subs	r3, r0, #1
 8000958:	4198      	sbcs	r0, r3
 800095a:	e000      	b.n	800095e <__eqdf2+0x56>
 800095c:	2001      	movs	r0, #1
 800095e:	bcf0      	pop	{r4, r5, r6, r7}
 8000960:	46bb      	mov	fp, r7
 8000962:	46b2      	mov	sl, r6
 8000964:	46a9      	mov	r9, r5
 8000966:	46a0      	mov	r8, r4
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	2001      	movs	r0, #1
 800096c:	428e      	cmp	r6, r1
 800096e:	d1f6      	bne.n	800095e <__eqdf2+0x56>
 8000970:	4661      	mov	r1, ip
 8000972:	4339      	orrs	r1, r7
 8000974:	000f      	movs	r7, r1
 8000976:	4317      	orrs	r7, r2
 8000978:	4327      	orrs	r7, r4
 800097a:	d1f0      	bne.n	800095e <__eqdf2+0x56>
 800097c:	465b      	mov	r3, fp
 800097e:	4652      	mov	r2, sl
 8000980:	1a98      	subs	r0, r3, r2
 8000982:	1e43      	subs	r3, r0, #1
 8000984:	4198      	sbcs	r0, r3
 8000986:	e7ea      	b.n	800095e <__eqdf2+0x56>
 8000988:	2000      	movs	r0, #0
 800098a:	e7e8      	b.n	800095e <__eqdf2+0x56>
 800098c:	000007ff 	.word	0x000007ff

08000990 <__gedf2>:
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	4657      	mov	r7, sl
 8000994:	464e      	mov	r6, r9
 8000996:	4645      	mov	r5, r8
 8000998:	46de      	mov	lr, fp
 800099a:	b5e0      	push	{r5, r6, r7, lr}
 800099c:	000d      	movs	r5, r1
 800099e:	030e      	lsls	r6, r1, #12
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	0d49      	lsrs	r1, r1, #21
 80009a4:	468a      	mov	sl, r1
 80009a6:	0fdf      	lsrs	r7, r3, #31
 80009a8:	0fe9      	lsrs	r1, r5, #31
 80009aa:	46bc      	mov	ip, r7
 80009ac:	b083      	sub	sp, #12
 80009ae:	4f2f      	ldr	r7, [pc, #188]	@ (8000a6c <__gedf2+0xdc>)
 80009b0:	0004      	movs	r4, r0
 80009b2:	4680      	mov	r8, r0
 80009b4:	9101      	str	r1, [sp, #4]
 80009b6:	0058      	lsls	r0, r3, #1
 80009b8:	0319      	lsls	r1, r3, #12
 80009ba:	4691      	mov	r9, r2
 80009bc:	0b36      	lsrs	r6, r6, #12
 80009be:	0b09      	lsrs	r1, r1, #12
 80009c0:	0d40      	lsrs	r0, r0, #21
 80009c2:	45ba      	cmp	sl, r7
 80009c4:	d01d      	beq.n	8000a02 <__gedf2+0x72>
 80009c6:	42b8      	cmp	r0, r7
 80009c8:	d00d      	beq.n	80009e6 <__gedf2+0x56>
 80009ca:	4657      	mov	r7, sl
 80009cc:	2f00      	cmp	r7, #0
 80009ce:	d12a      	bne.n	8000a26 <__gedf2+0x96>
 80009d0:	4334      	orrs	r4, r6
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d124      	bne.n	8000a20 <__gedf2+0x90>
 80009d6:	430a      	orrs	r2, r1
 80009d8:	d036      	beq.n	8000a48 <__gedf2+0xb8>
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d141      	bne.n	8000a62 <__gedf2+0xd2>
 80009de:	4663      	mov	r3, ip
 80009e0:	0058      	lsls	r0, r3, #1
 80009e2:	3801      	subs	r0, #1
 80009e4:	e015      	b.n	8000a12 <__gedf2+0x82>
 80009e6:	4311      	orrs	r1, r2
 80009e8:	d138      	bne.n	8000a5c <__gedf2+0xcc>
 80009ea:	4653      	mov	r3, sl
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <__gedf2+0x64>
 80009f0:	4326      	orrs	r6, r4
 80009f2:	d0f4      	beq.n	80009de <__gedf2+0x4e>
 80009f4:	9b01      	ldr	r3, [sp, #4]
 80009f6:	4563      	cmp	r3, ip
 80009f8:	d107      	bne.n	8000a0a <__gedf2+0x7a>
 80009fa:	9b01      	ldr	r3, [sp, #4]
 80009fc:	0058      	lsls	r0, r3, #1
 80009fe:	3801      	subs	r0, #1
 8000a00:	e007      	b.n	8000a12 <__gedf2+0x82>
 8000a02:	4326      	orrs	r6, r4
 8000a04:	d12a      	bne.n	8000a5c <__gedf2+0xcc>
 8000a06:	4550      	cmp	r0, sl
 8000a08:	d021      	beq.n	8000a4e <__gedf2+0xbe>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	9b01      	ldr	r3, [sp, #4]
 8000a0e:	425f      	negs	r7, r3
 8000a10:	4338      	orrs	r0, r7
 8000a12:	b003      	add	sp, #12
 8000a14:	bcf0      	pop	{r4, r5, r6, r7}
 8000a16:	46bb      	mov	fp, r7
 8000a18:	46b2      	mov	sl, r6
 8000a1a:	46a9      	mov	r9, r5
 8000a1c:	46a0      	mov	r8, r4
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	d0dc      	beq.n	80009de <__gedf2+0x4e>
 8000a24:	e7e6      	b.n	80009f4 <__gedf2+0x64>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d0ef      	beq.n	8000a0a <__gedf2+0x7a>
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	4563      	cmp	r3, ip
 8000a2e:	d1ec      	bne.n	8000a0a <__gedf2+0x7a>
 8000a30:	4582      	cmp	sl, r0
 8000a32:	dcea      	bgt.n	8000a0a <__gedf2+0x7a>
 8000a34:	dbe1      	blt.n	80009fa <__gedf2+0x6a>
 8000a36:	428e      	cmp	r6, r1
 8000a38:	d8e7      	bhi.n	8000a0a <__gedf2+0x7a>
 8000a3a:	d1de      	bne.n	80009fa <__gedf2+0x6a>
 8000a3c:	45c8      	cmp	r8, r9
 8000a3e:	d8e4      	bhi.n	8000a0a <__gedf2+0x7a>
 8000a40:	2000      	movs	r0, #0
 8000a42:	45c8      	cmp	r8, r9
 8000a44:	d2e5      	bcs.n	8000a12 <__gedf2+0x82>
 8000a46:	e7d8      	b.n	80009fa <__gedf2+0x6a>
 8000a48:	2c00      	cmp	r4, #0
 8000a4a:	d0e2      	beq.n	8000a12 <__gedf2+0x82>
 8000a4c:	e7dd      	b.n	8000a0a <__gedf2+0x7a>
 8000a4e:	4311      	orrs	r1, r2
 8000a50:	d104      	bne.n	8000a5c <__gedf2+0xcc>
 8000a52:	9b01      	ldr	r3, [sp, #4]
 8000a54:	4563      	cmp	r3, ip
 8000a56:	d1d8      	bne.n	8000a0a <__gedf2+0x7a>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7da      	b.n	8000a12 <__gedf2+0x82>
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	4240      	negs	r0, r0
 8000a60:	e7d7      	b.n	8000a12 <__gedf2+0x82>
 8000a62:	9b01      	ldr	r3, [sp, #4]
 8000a64:	4563      	cmp	r3, ip
 8000a66:	d0e6      	beq.n	8000a36 <__gedf2+0xa6>
 8000a68:	e7cf      	b.n	8000a0a <__gedf2+0x7a>
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	000007ff 	.word	0x000007ff

08000a70 <__ledf2>:
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	4657      	mov	r7, sl
 8000a74:	464e      	mov	r6, r9
 8000a76:	4645      	mov	r5, r8
 8000a78:	46de      	mov	lr, fp
 8000a7a:	b5e0      	push	{r5, r6, r7, lr}
 8000a7c:	000d      	movs	r5, r1
 8000a7e:	030e      	lsls	r6, r1, #12
 8000a80:	0049      	lsls	r1, r1, #1
 8000a82:	0d49      	lsrs	r1, r1, #21
 8000a84:	468a      	mov	sl, r1
 8000a86:	0fdf      	lsrs	r7, r3, #31
 8000a88:	0fe9      	lsrs	r1, r5, #31
 8000a8a:	46bc      	mov	ip, r7
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	4f2e      	ldr	r7, [pc, #184]	@ (8000b48 <__ledf2+0xd8>)
 8000a90:	0004      	movs	r4, r0
 8000a92:	4680      	mov	r8, r0
 8000a94:	9101      	str	r1, [sp, #4]
 8000a96:	0058      	lsls	r0, r3, #1
 8000a98:	0319      	lsls	r1, r3, #12
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	0b36      	lsrs	r6, r6, #12
 8000a9e:	0b09      	lsrs	r1, r1, #12
 8000aa0:	0d40      	lsrs	r0, r0, #21
 8000aa2:	45ba      	cmp	sl, r7
 8000aa4:	d01e      	beq.n	8000ae4 <__ledf2+0x74>
 8000aa6:	42b8      	cmp	r0, r7
 8000aa8:	d00d      	beq.n	8000ac6 <__ledf2+0x56>
 8000aaa:	4657      	mov	r7, sl
 8000aac:	2f00      	cmp	r7, #0
 8000aae:	d127      	bne.n	8000b00 <__ledf2+0x90>
 8000ab0:	4334      	orrs	r4, r6
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d133      	bne.n	8000b1e <__ledf2+0xae>
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	d034      	beq.n	8000b24 <__ledf2+0xb4>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d140      	bne.n	8000b40 <__ledf2+0xd0>
 8000abe:	4663      	mov	r3, ip
 8000ac0:	0058      	lsls	r0, r3, #1
 8000ac2:	3801      	subs	r0, #1
 8000ac4:	e015      	b.n	8000af2 <__ledf2+0x82>
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	d112      	bne.n	8000af0 <__ledf2+0x80>
 8000aca:	4653      	mov	r3, sl
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__ledf2+0x64>
 8000ad0:	4326      	orrs	r6, r4
 8000ad2:	d0f4      	beq.n	8000abe <__ledf2+0x4e>
 8000ad4:	9b01      	ldr	r3, [sp, #4]
 8000ad6:	4563      	cmp	r3, ip
 8000ad8:	d01d      	beq.n	8000b16 <__ledf2+0xa6>
 8000ada:	2001      	movs	r0, #1
 8000adc:	9b01      	ldr	r3, [sp, #4]
 8000ade:	425f      	negs	r7, r3
 8000ae0:	4338      	orrs	r0, r7
 8000ae2:	e006      	b.n	8000af2 <__ledf2+0x82>
 8000ae4:	4326      	orrs	r6, r4
 8000ae6:	d103      	bne.n	8000af0 <__ledf2+0x80>
 8000ae8:	4550      	cmp	r0, sl
 8000aea:	d1f6      	bne.n	8000ada <__ledf2+0x6a>
 8000aec:	4311      	orrs	r1, r2
 8000aee:	d01c      	beq.n	8000b2a <__ledf2+0xba>
 8000af0:	2002      	movs	r0, #2
 8000af2:	b003      	add	sp, #12
 8000af4:	bcf0      	pop	{r4, r5, r6, r7}
 8000af6:	46bb      	mov	fp, r7
 8000af8:	46b2      	mov	sl, r6
 8000afa:	46a9      	mov	r9, r5
 8000afc:	46a0      	mov	r8, r4
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d0ea      	beq.n	8000ada <__ledf2+0x6a>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	4563      	cmp	r3, ip
 8000b08:	d1e7      	bne.n	8000ada <__ledf2+0x6a>
 8000b0a:	4582      	cmp	sl, r0
 8000b0c:	dce5      	bgt.n	8000ada <__ledf2+0x6a>
 8000b0e:	db02      	blt.n	8000b16 <__ledf2+0xa6>
 8000b10:	428e      	cmp	r6, r1
 8000b12:	d8e2      	bhi.n	8000ada <__ledf2+0x6a>
 8000b14:	d00e      	beq.n	8000b34 <__ledf2+0xc4>
 8000b16:	9b01      	ldr	r3, [sp, #4]
 8000b18:	0058      	lsls	r0, r3, #1
 8000b1a:	3801      	subs	r0, #1
 8000b1c:	e7e9      	b.n	8000af2 <__ledf2+0x82>
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	d0cd      	beq.n	8000abe <__ledf2+0x4e>
 8000b22:	e7d7      	b.n	8000ad4 <__ledf2+0x64>
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d0e4      	beq.n	8000af2 <__ledf2+0x82>
 8000b28:	e7d7      	b.n	8000ada <__ledf2+0x6a>
 8000b2a:	9b01      	ldr	r3, [sp, #4]
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	4563      	cmp	r3, ip
 8000b30:	d0df      	beq.n	8000af2 <__ledf2+0x82>
 8000b32:	e7d2      	b.n	8000ada <__ledf2+0x6a>
 8000b34:	45c8      	cmp	r8, r9
 8000b36:	d8d0      	bhi.n	8000ada <__ledf2+0x6a>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2d9      	bcs.n	8000af2 <__ledf2+0x82>
 8000b3e:	e7ea      	b.n	8000b16 <__ledf2+0xa6>
 8000b40:	9b01      	ldr	r3, [sp, #4]
 8000b42:	4563      	cmp	r3, ip
 8000b44:	d0e4      	beq.n	8000b10 <__ledf2+0xa0>
 8000b46:	e7c8      	b.n	8000ada <__ledf2+0x6a>
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__aeabi_dsub>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	4657      	mov	r7, sl
 8000b50:	464e      	mov	r6, r9
 8000b52:	4645      	mov	r5, r8
 8000b54:	46de      	mov	lr, fp
 8000b56:	b5e0      	push	{r5, r6, r7, lr}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	9000      	str	r0, [sp, #0]
 8000b5c:	9101      	str	r1, [sp, #4]
 8000b5e:	030c      	lsls	r4, r1, #12
 8000b60:	004d      	lsls	r5, r1, #1
 8000b62:	0fce      	lsrs	r6, r1, #31
 8000b64:	0a61      	lsrs	r1, r4, #9
 8000b66:	9c00      	ldr	r4, [sp, #0]
 8000b68:	005f      	lsls	r7, r3, #1
 8000b6a:	0f64      	lsrs	r4, r4, #29
 8000b6c:	430c      	orrs	r4, r1
 8000b6e:	9900      	ldr	r1, [sp, #0]
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	00c8      	lsls	r0, r1, #3
 8000b76:	0319      	lsls	r1, r3, #12
 8000b78:	0d7b      	lsrs	r3, r7, #21
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	4fcc      	ldr	r7, [pc, #816]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000b80:	0fdb      	lsrs	r3, r3, #31
 8000b82:	469c      	mov	ip, r3
 8000b84:	0a4b      	lsrs	r3, r1, #9
 8000b86:	9900      	ldr	r1, [sp, #0]
 8000b88:	4680      	mov	r8, r0
 8000b8a:	0f49      	lsrs	r1, r1, #29
 8000b8c:	4319      	orrs	r1, r3
 8000b8e:	9b00      	ldr	r3, [sp, #0]
 8000b90:	468b      	mov	fp, r1
 8000b92:	00da      	lsls	r2, r3, #3
 8000b94:	4692      	mov	sl, r2
 8000b96:	0d6d      	lsrs	r5, r5, #21
 8000b98:	45b9      	cmp	r9, r7
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dsub+0x52>
 8000b9c:	e0bf      	b.n	8000d1e <__aeabi_dsub+0x1d2>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	4059      	eors	r1, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	468c      	mov	ip, r1
 8000ba8:	1aeb      	subs	r3, r5, r3
 8000baa:	428e      	cmp	r6, r1
 8000bac:	d075      	beq.n	8000c9a <__aeabi_dsub+0x14e>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dc00      	bgt.n	8000bb4 <__aeabi_dsub+0x68>
 8000bb2:	e2a3      	b.n	80010fc <__aeabi_dsub+0x5b0>
 8000bb4:	4649      	mov	r1, r9
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dsub+0x70>
 8000bba:	e0ce      	b.n	8000d5a <__aeabi_dsub+0x20e>
 8000bbc:	42bd      	cmp	r5, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dsub+0x76>
 8000bc0:	e200      	b.n	8000fc4 <__aeabi_dsub+0x478>
 8000bc2:	2701      	movs	r7, #1
 8000bc4:	2b38      	cmp	r3, #56	@ 0x38
 8000bc6:	dc19      	bgt.n	8000bfc <__aeabi_dsub+0xb0>
 8000bc8:	2780      	movs	r7, #128	@ 0x80
 8000bca:	4659      	mov	r1, fp
 8000bcc:	043f      	lsls	r7, r7, #16
 8000bce:	4339      	orrs	r1, r7
 8000bd0:	468b      	mov	fp, r1
 8000bd2:	2b1f      	cmp	r3, #31
 8000bd4:	dd00      	ble.n	8000bd8 <__aeabi_dsub+0x8c>
 8000bd6:	e1fa      	b.n	8000fce <__aeabi_dsub+0x482>
 8000bd8:	2720      	movs	r7, #32
 8000bda:	1af9      	subs	r1, r7, r3
 8000bdc:	468c      	mov	ip, r1
 8000bde:	4659      	mov	r1, fp
 8000be0:	4667      	mov	r7, ip
 8000be2:	40b9      	lsls	r1, r7
 8000be4:	000f      	movs	r7, r1
 8000be6:	0011      	movs	r1, r2
 8000be8:	40d9      	lsrs	r1, r3
 8000bea:	430f      	orrs	r7, r1
 8000bec:	4661      	mov	r1, ip
 8000bee:	408a      	lsls	r2, r1
 8000bf0:	1e51      	subs	r1, r2, #1
 8000bf2:	418a      	sbcs	r2, r1
 8000bf4:	4659      	mov	r1, fp
 8000bf6:	40d9      	lsrs	r1, r3
 8000bf8:	4317      	orrs	r7, r2
 8000bfa:	1a64      	subs	r4, r4, r1
 8000bfc:	1bc7      	subs	r7, r0, r7
 8000bfe:	42b8      	cmp	r0, r7
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	4240      	negs	r0, r0
 8000c04:	1a24      	subs	r4, r4, r0
 8000c06:	0223      	lsls	r3, r4, #8
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_dsub+0xc0>
 8000c0a:	e140      	b.n	8000e8e <__aeabi_dsub+0x342>
 8000c0c:	0264      	lsls	r4, r4, #9
 8000c0e:	0a64      	lsrs	r4, r4, #9
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dsub+0xca>
 8000c14:	e154      	b.n	8000ec0 <__aeabi_dsub+0x374>
 8000c16:	0020      	movs	r0, r4
 8000c18:	f000 fc02 	bl	8001420 <__clzsi2>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	3b08      	subs	r3, #8
 8000c20:	2120      	movs	r1, #32
 8000c22:	0038      	movs	r0, r7
 8000c24:	1aca      	subs	r2, r1, r3
 8000c26:	40d0      	lsrs	r0, r2
 8000c28:	409c      	lsls	r4, r3
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	4322      	orrs	r2, r4
 8000c30:	429d      	cmp	r5, r3
 8000c32:	dd00      	ble.n	8000c36 <__aeabi_dsub+0xea>
 8000c34:	e1a6      	b.n	8000f84 <__aeabi_dsub+0x438>
 8000c36:	1b58      	subs	r0, r3, r5
 8000c38:	3001      	adds	r0, #1
 8000c3a:	1a09      	subs	r1, r1, r0
 8000c3c:	003c      	movs	r4, r7
 8000c3e:	408f      	lsls	r7, r1
 8000c40:	40c4      	lsrs	r4, r0
 8000c42:	1e7b      	subs	r3, r7, #1
 8000c44:	419f      	sbcs	r7, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	4327      	orrs	r7, r4
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	40c2      	lsrs	r2, r0
 8000c50:	003b      	movs	r3, r7
 8000c52:	0014      	movs	r4, r2
 8000c54:	2500      	movs	r5, #0
 8000c56:	4313      	orrs	r3, r2
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dsub+0x110>
 8000c5a:	e1f7      	b.n	800104c <__aeabi_dsub+0x500>
 8000c5c:	077b      	lsls	r3, r7, #29
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dsub+0x116>
 8000c60:	e377      	b.n	8001352 <__aeabi_dsub+0x806>
 8000c62:	230f      	movs	r3, #15
 8000c64:	0038      	movs	r0, r7
 8000c66:	403b      	ands	r3, r7
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d004      	beq.n	8000c76 <__aeabi_dsub+0x12a>
 8000c6c:	1d38      	adds	r0, r7, #4
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41bf      	sbcs	r7, r7
 8000c72:	427f      	negs	r7, r7
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	0223      	lsls	r3, r4, #8
 8000c78:	d400      	bmi.n	8000c7c <__aeabi_dsub+0x130>
 8000c7a:	e368      	b.n	800134e <__aeabi_dsub+0x802>
 8000c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000c7e:	3501      	adds	r5, #1
 8000c80:	429d      	cmp	r5, r3
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x13a>
 8000c84:	e0f4      	b.n	8000e70 <__aeabi_dsub+0x324>
 8000c86:	4b8b      	ldr	r3, [pc, #556]	@ (8000eb4 <__aeabi_dsub+0x368>)
 8000c88:	056d      	lsls	r5, r5, #21
 8000c8a:	401c      	ands	r4, r3
 8000c8c:	0d6d      	lsrs	r5, r5, #21
 8000c8e:	0767      	lsls	r7, r4, #29
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	0264      	lsls	r4, r4, #9
 8000c94:	4307      	orrs	r7, r0
 8000c96:	0b24      	lsrs	r4, r4, #12
 8000c98:	e0ec      	b.n	8000e74 <__aeabi_dsub+0x328>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_dsub+0x154>
 8000c9e:	e329      	b.n	80012f4 <__aeabi_dsub+0x7a8>
 8000ca0:	4649      	mov	r1, r9
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dsub+0x15c>
 8000ca6:	e0d6      	b.n	8000e56 <__aeabi_dsub+0x30a>
 8000ca8:	4659      	mov	r1, fp
 8000caa:	4311      	orrs	r1, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dsub+0x164>
 8000cae:	e12e      	b.n	8000f0e <__aeabi_dsub+0x3c2>
 8000cb0:	1e59      	subs	r1, r3, #1
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dsub+0x16c>
 8000cb6:	e1e6      	b.n	8001086 <__aeabi_dsub+0x53a>
 8000cb8:	42bb      	cmp	r3, r7
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dsub+0x172>
 8000cbc:	e182      	b.n	8000fc4 <__aeabi_dsub+0x478>
 8000cbe:	2701      	movs	r7, #1
 8000cc0:	000b      	movs	r3, r1
 8000cc2:	2938      	cmp	r1, #56	@ 0x38
 8000cc4:	dc14      	bgt.n	8000cf0 <__aeabi_dsub+0x1a4>
 8000cc6:	2b1f      	cmp	r3, #31
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dsub+0x180>
 8000cca:	e23c      	b.n	8001146 <__aeabi_dsub+0x5fa>
 8000ccc:	2720      	movs	r7, #32
 8000cce:	1af9      	subs	r1, r7, r3
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	4659      	mov	r1, fp
 8000cd4:	4667      	mov	r7, ip
 8000cd6:	40b9      	lsls	r1, r7
 8000cd8:	000f      	movs	r7, r1
 8000cda:	0011      	movs	r1, r2
 8000cdc:	40d9      	lsrs	r1, r3
 8000cde:	430f      	orrs	r7, r1
 8000ce0:	4661      	mov	r1, ip
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	1e51      	subs	r1, r2, #1
 8000ce6:	418a      	sbcs	r2, r1
 8000ce8:	4659      	mov	r1, fp
 8000cea:	40d9      	lsrs	r1, r3
 8000cec:	4317      	orrs	r7, r2
 8000cee:	1864      	adds	r4, r4, r1
 8000cf0:	183f      	adds	r7, r7, r0
 8000cf2:	4287      	cmp	r7, r0
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	1824      	adds	r4, r4, r0
 8000cfa:	0223      	lsls	r3, r4, #8
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_dsub+0x1b4>
 8000cfe:	e0c6      	b.n	8000e8e <__aeabi_dsub+0x342>
 8000d00:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000d02:	3501      	adds	r5, #1
 8000d04:	429d      	cmp	r5, r3
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dsub+0x1be>
 8000d08:	e0b2      	b.n	8000e70 <__aeabi_dsub+0x324>
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4b69      	ldr	r3, [pc, #420]	@ (8000eb4 <__aeabi_dsub+0x368>)
 8000d0e:	087a      	lsrs	r2, r7, #1
 8000d10:	401c      	ands	r4, r3
 8000d12:	4039      	ands	r1, r7
 8000d14:	430a      	orrs	r2, r1
 8000d16:	07e7      	lsls	r7, r4, #31
 8000d18:	4317      	orrs	r7, r2
 8000d1a:	0864      	lsrs	r4, r4, #1
 8000d1c:	e79e      	b.n	8000c5c <__aeabi_dsub+0x110>
 8000d1e:	4b66      	ldr	r3, [pc, #408]	@ (8000eb8 <__aeabi_dsub+0x36c>)
 8000d20:	4311      	orrs	r1, r2
 8000d22:	468a      	mov	sl, r1
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d028      	beq.n	8000d7c <__aeabi_dsub+0x230>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	d02c      	beq.n	8000d88 <__aeabi_dsub+0x23c>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d05b      	beq.n	8000dea <__aeabi_dsub+0x29e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dsub+0x1ec>
 8000d36:	e12c      	b.n	8000f92 <__aeabi_dsub+0x446>
 8000d38:	465b      	mov	r3, fp
 8000d3a:	4666      	mov	r6, ip
 8000d3c:	075f      	lsls	r7, r3, #29
 8000d3e:	08d2      	lsrs	r2, r2, #3
 8000d40:	4317      	orrs	r7, r2
 8000d42:	08dd      	lsrs	r5, r3, #3
 8000d44:	003b      	movs	r3, r7
 8000d46:	432b      	orrs	r3, r5
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dsub+0x200>
 8000d4a:	e0e2      	b.n	8000f12 <__aeabi_dsub+0x3c6>
 8000d4c:	2480      	movs	r4, #128	@ 0x80
 8000d4e:	0324      	lsls	r4, r4, #12
 8000d50:	432c      	orrs	r4, r5
 8000d52:	0324      	lsls	r4, r4, #12
 8000d54:	4d56      	ldr	r5, [pc, #344]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	e08c      	b.n	8000e74 <__aeabi_dsub+0x328>
 8000d5a:	4659      	mov	r1, fp
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dsub+0x216>
 8000d60:	e0d5      	b.n	8000f0e <__aeabi_dsub+0x3c2>
 8000d62:	1e59      	subs	r1, r3, #1
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dsub+0x21e>
 8000d68:	e1b9      	b.n	80010de <__aeabi_dsub+0x592>
 8000d6a:	42bb      	cmp	r3, r7
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dsub+0x224>
 8000d6e:	e1b1      	b.n	80010d4 <__aeabi_dsub+0x588>
 8000d70:	2701      	movs	r7, #1
 8000d72:	000b      	movs	r3, r1
 8000d74:	2938      	cmp	r1, #56	@ 0x38
 8000d76:	dd00      	ble.n	8000d7a <__aeabi_dsub+0x22e>
 8000d78:	e740      	b.n	8000bfc <__aeabi_dsub+0xb0>
 8000d7a:	e72a      	b.n	8000bd2 <__aeabi_dsub+0x86>
 8000d7c:	4661      	mov	r1, ip
 8000d7e:	2701      	movs	r7, #1
 8000d80:	4079      	eors	r1, r7
 8000d82:	468c      	mov	ip, r1
 8000d84:	4566      	cmp	r6, ip
 8000d86:	d1d2      	bne.n	8000d2e <__aeabi_dsub+0x1e2>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dsub+0x242>
 8000d8c:	e0c5      	b.n	8000f1a <__aeabi_dsub+0x3ce>
 8000d8e:	2d00      	cmp	r5, #0
 8000d90:	d000      	beq.n	8000d94 <__aeabi_dsub+0x248>
 8000d92:	e155      	b.n	8001040 <__aeabi_dsub+0x4f4>
 8000d94:	464b      	mov	r3, r9
 8000d96:	0025      	movs	r5, r4
 8000d98:	4305      	orrs	r5, r0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dsub+0x252>
 8000d9c:	e212      	b.n	80011c4 <__aeabi_dsub+0x678>
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dsub+0x25c>
 8000da6:	e249      	b.n	800123c <__aeabi_dsub+0x6f0>
 8000da8:	4d41      	ldr	r5, [pc, #260]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dsub+0x264>
 8000dae:	e28f      	b.n	80012d0 <__aeabi_dsub+0x784>
 8000db0:	2701      	movs	r7, #1
 8000db2:	2938      	cmp	r1, #56	@ 0x38
 8000db4:	dc11      	bgt.n	8000dda <__aeabi_dsub+0x28e>
 8000db6:	4663      	mov	r3, ip
 8000db8:	2b1f      	cmp	r3, #31
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_dsub+0x272>
 8000dbc:	e25b      	b.n	8001276 <__aeabi_dsub+0x72a>
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	0027      	movs	r7, r4
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	4098      	lsls	r0, r3
 8000dca:	409f      	lsls	r7, r3
 8000dcc:	40cd      	lsrs	r5, r1
 8000dce:	1e43      	subs	r3, r0, #1
 8000dd0:	4198      	sbcs	r0, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	432f      	orrs	r7, r5
 8000dd6:	4307      	orrs	r7, r0
 8000dd8:	44a3      	add	fp, r4
 8000dda:	18bf      	adds	r7, r7, r2
 8000ddc:	4297      	cmp	r7, r2
 8000dde:	4192      	sbcs	r2, r2
 8000de0:	4252      	negs	r2, r2
 8000de2:	445a      	add	r2, fp
 8000de4:	0014      	movs	r4, r2
 8000de6:	464d      	mov	r5, r9
 8000de8:	e787      	b.n	8000cfa <__aeabi_dsub+0x1ae>
 8000dea:	4f34      	ldr	r7, [pc, #208]	@ (8000ebc <__aeabi_dsub+0x370>)
 8000dec:	1c6b      	adds	r3, r5, #1
 8000dee:	423b      	tst	r3, r7
 8000df0:	d000      	beq.n	8000df4 <__aeabi_dsub+0x2a8>
 8000df2:	e0b6      	b.n	8000f62 <__aeabi_dsub+0x416>
 8000df4:	4659      	mov	r1, fp
 8000df6:	0023      	movs	r3, r4
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	000f      	movs	r7, r1
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dsub+0x2b8>
 8000e02:	e126      	b.n	8001052 <__aeabi_dsub+0x506>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dsub+0x2be>
 8000e08:	e1c0      	b.n	800118c <__aeabi_dsub+0x640>
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dsub+0x2c4>
 8000e0e:	e0a1      	b.n	8000f54 <__aeabi_dsub+0x408>
 8000e10:	1a83      	subs	r3, r0, r2
 8000e12:	4698      	mov	r8, r3
 8000e14:	465b      	mov	r3, fp
 8000e16:	4540      	cmp	r0, r8
 8000e18:	41ad      	sbcs	r5, r5
 8000e1a:	1ae3      	subs	r3, r4, r3
 8000e1c:	426d      	negs	r5, r5
 8000e1e:	1b5b      	subs	r3, r3, r5
 8000e20:	2580      	movs	r5, #128	@ 0x80
 8000e22:	042d      	lsls	r5, r5, #16
 8000e24:	422b      	tst	r3, r5
 8000e26:	d100      	bne.n	8000e2a <__aeabi_dsub+0x2de>
 8000e28:	e14b      	b.n	80010c2 <__aeabi_dsub+0x576>
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	1a10      	subs	r0, r2, r0
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	4192      	sbcs	r2, r2
 8000e32:	1b1c      	subs	r4, r3, r4
 8000e34:	0007      	movs	r7, r0
 8000e36:	2601      	movs	r6, #1
 8000e38:	4663      	mov	r3, ip
 8000e3a:	4252      	negs	r2, r2
 8000e3c:	1aa4      	subs	r4, r4, r2
 8000e3e:	4327      	orrs	r7, r4
 8000e40:	401e      	ands	r6, r3
 8000e42:	2f00      	cmp	r7, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x2fc>
 8000e46:	e142      	b.n	80010ce <__aeabi_dsub+0x582>
 8000e48:	422c      	tst	r4, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dsub+0x302>
 8000e4c:	e26d      	b.n	800132a <__aeabi_dsub+0x7de>
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <__aeabi_dsub+0x368>)
 8000e50:	2501      	movs	r5, #1
 8000e52:	401c      	ands	r4, r3
 8000e54:	e71b      	b.n	8000c8e <__aeabi_dsub+0x142>
 8000e56:	42bd      	cmp	r5, r7
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dsub+0x310>
 8000e5a:	e13b      	b.n	80010d4 <__aeabi_dsub+0x588>
 8000e5c:	2701      	movs	r7, #1
 8000e5e:	2b38      	cmp	r3, #56	@ 0x38
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dsub+0x318>
 8000e62:	e745      	b.n	8000cf0 <__aeabi_dsub+0x1a4>
 8000e64:	2780      	movs	r7, #128	@ 0x80
 8000e66:	4659      	mov	r1, fp
 8000e68:	043f      	lsls	r7, r7, #16
 8000e6a:	4339      	orrs	r1, r7
 8000e6c:	468b      	mov	fp, r1
 8000e6e:	e72a      	b.n	8000cc6 <__aeabi_dsub+0x17a>
 8000e70:	2400      	movs	r4, #0
 8000e72:	2700      	movs	r7, #0
 8000e74:	052d      	lsls	r5, r5, #20
 8000e76:	4325      	orrs	r5, r4
 8000e78:	07f6      	lsls	r6, r6, #31
 8000e7a:	4335      	orrs	r5, r6
 8000e7c:	0038      	movs	r0, r7
 8000e7e:	0029      	movs	r1, r5
 8000e80:	b003      	add	sp, #12
 8000e82:	bcf0      	pop	{r4, r5, r6, r7}
 8000e84:	46bb      	mov	fp, r7
 8000e86:	46b2      	mov	sl, r6
 8000e88:	46a9      	mov	r9, r5
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8e:	077b      	lsls	r3, r7, #29
 8000e90:	d004      	beq.n	8000e9c <__aeabi_dsub+0x350>
 8000e92:	230f      	movs	r3, #15
 8000e94:	403b      	ands	r3, r7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dsub+0x350>
 8000e9a:	e6e7      	b.n	8000c6c <__aeabi_dsub+0x120>
 8000e9c:	002b      	movs	r3, r5
 8000e9e:	08f8      	lsrs	r0, r7, #3
 8000ea0:	4a03      	ldr	r2, [pc, #12]	@ (8000eb0 <__aeabi_dsub+0x364>)
 8000ea2:	0767      	lsls	r7, r4, #29
 8000ea4:	4307      	orrs	r7, r0
 8000ea6:	08e5      	lsrs	r5, r4, #3
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dsub+0x362>
 8000eac:	e74a      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 8000eae:	e0a5      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 8000eb0:	000007ff 	.word	0x000007ff
 8000eb4:	ff7fffff 	.word	0xff7fffff
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	000007fe 	.word	0x000007fe
 8000ec0:	0038      	movs	r0, r7
 8000ec2:	f000 faad 	bl	8001420 <__clzsi2>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	3318      	adds	r3, #24
 8000eca:	2b1f      	cmp	r3, #31
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_dsub+0x384>
 8000ece:	e6a7      	b.n	8000c20 <__aeabi_dsub+0xd4>
 8000ed0:	003a      	movs	r2, r7
 8000ed2:	3808      	subs	r0, #8
 8000ed4:	4082      	lsls	r2, r0
 8000ed6:	429d      	cmp	r5, r3
 8000ed8:	dd00      	ble.n	8000edc <__aeabi_dsub+0x390>
 8000eda:	e08a      	b.n	8000ff2 <__aeabi_dsub+0x4a6>
 8000edc:	1b5b      	subs	r3, r3, r5
 8000ede:	1c58      	adds	r0, r3, #1
 8000ee0:	281f      	cmp	r0, #31
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_dsub+0x39a>
 8000ee4:	e1d8      	b.n	8001298 <__aeabi_dsub+0x74c>
 8000ee6:	0017      	movs	r7, r2
 8000ee8:	3b1f      	subs	r3, #31
 8000eea:	40df      	lsrs	r7, r3
 8000eec:	2820      	cmp	r0, #32
 8000eee:	d005      	beq.n	8000efc <__aeabi_dsub+0x3b0>
 8000ef0:	2340      	movs	r3, #64	@ 0x40
 8000ef2:	1a1b      	subs	r3, r3, r0
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	1e53      	subs	r3, r2, #1
 8000ef8:	419a      	sbcs	r2, r3
 8000efa:	4317      	orrs	r7, r2
 8000efc:	2500      	movs	r5, #0
 8000efe:	2f00      	cmp	r7, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dsub+0x3b8>
 8000f02:	e0e5      	b.n	80010d0 <__aeabi_dsub+0x584>
 8000f04:	077b      	lsls	r3, r7, #29
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dsub+0x3be>
 8000f08:	e6ab      	b.n	8000c62 <__aeabi_dsub+0x116>
 8000f0a:	002c      	movs	r4, r5
 8000f0c:	e7c6      	b.n	8000e9c <__aeabi_dsub+0x350>
 8000f0e:	08c0      	lsrs	r0, r0, #3
 8000f10:	e7c6      	b.n	8000ea0 <__aeabi_dsub+0x354>
 8000f12:	2700      	movs	r7, #0
 8000f14:	2400      	movs	r4, #0
 8000f16:	4dd1      	ldr	r5, [pc, #836]	@ (800125c <__aeabi_dsub+0x710>)
 8000f18:	e7ac      	b.n	8000e74 <__aeabi_dsub+0x328>
 8000f1a:	4fd1      	ldr	r7, [pc, #836]	@ (8001260 <__aeabi_dsub+0x714>)
 8000f1c:	1c6b      	adds	r3, r5, #1
 8000f1e:	423b      	tst	r3, r7
 8000f20:	d171      	bne.n	8001006 <__aeabi_dsub+0x4ba>
 8000f22:	0023      	movs	r3, r4
 8000f24:	4303      	orrs	r3, r0
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d000      	beq.n	8000f2c <__aeabi_dsub+0x3e0>
 8000f2a:	e14e      	b.n	80011ca <__aeabi_dsub+0x67e>
 8000f2c:	4657      	mov	r7, sl
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dsub+0x3e8>
 8000f32:	e1b5      	b.n	80012a0 <__aeabi_dsub+0x754>
 8000f34:	2f00      	cmp	r7, #0
 8000f36:	d00d      	beq.n	8000f54 <__aeabi_dsub+0x408>
 8000f38:	1883      	adds	r3, r0, r2
 8000f3a:	4283      	cmp	r3, r0
 8000f3c:	4180      	sbcs	r0, r0
 8000f3e:	445c      	add	r4, fp
 8000f40:	4240      	negs	r0, r0
 8000f42:	1824      	adds	r4, r4, r0
 8000f44:	0222      	lsls	r2, r4, #8
 8000f46:	d500      	bpl.n	8000f4a <__aeabi_dsub+0x3fe>
 8000f48:	e1c8      	b.n	80012dc <__aeabi_dsub+0x790>
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	4327      	orrs	r7, r4
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dsub+0x408>
 8000f52:	e0bc      	b.n	80010ce <__aeabi_dsub+0x582>
 8000f54:	4643      	mov	r3, r8
 8000f56:	0767      	lsls	r7, r4, #29
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	08e5      	lsrs	r5, r4, #3
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e04c      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 8000f62:	1a83      	subs	r3, r0, r2
 8000f64:	4698      	mov	r8, r3
 8000f66:	465b      	mov	r3, fp
 8000f68:	4540      	cmp	r0, r8
 8000f6a:	41bf      	sbcs	r7, r7
 8000f6c:	1ae3      	subs	r3, r4, r3
 8000f6e:	427f      	negs	r7, r7
 8000f70:	1bdb      	subs	r3, r3, r7
 8000f72:	021f      	lsls	r7, r3, #8
 8000f74:	d47c      	bmi.n	8001070 <__aeabi_dsub+0x524>
 8000f76:	4647      	mov	r7, r8
 8000f78:	431f      	orrs	r7, r3
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dsub+0x432>
 8000f7c:	e0a6      	b.n	80010cc <__aeabi_dsub+0x580>
 8000f7e:	001c      	movs	r4, r3
 8000f80:	4647      	mov	r7, r8
 8000f82:	e645      	b.n	8000c10 <__aeabi_dsub+0xc4>
 8000f84:	4cb7      	ldr	r4, [pc, #732]	@ (8001264 <__aeabi_dsub+0x718>)
 8000f86:	1aed      	subs	r5, r5, r3
 8000f88:	4014      	ands	r4, r2
 8000f8a:	077b      	lsls	r3, r7, #29
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_dsub+0x444>
 8000f8e:	e780      	b.n	8000e92 <__aeabi_dsub+0x346>
 8000f90:	e784      	b.n	8000e9c <__aeabi_dsub+0x350>
 8000f92:	464b      	mov	r3, r9
 8000f94:	0025      	movs	r5, r4
 8000f96:	4305      	orrs	r5, r0
 8000f98:	d066      	beq.n	8001068 <__aeabi_dsub+0x51c>
 8000f9a:	1e5f      	subs	r7, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dsub+0x456>
 8000fa0:	e0fc      	b.n	800119c <__aeabi_dsub+0x650>
 8000fa2:	4dae      	ldr	r5, [pc, #696]	@ (800125c <__aeabi_dsub+0x710>)
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dsub+0x45e>
 8000fa8:	e15e      	b.n	8001268 <__aeabi_dsub+0x71c>
 8000faa:	4666      	mov	r6, ip
 8000fac:	2f38      	cmp	r7, #56	@ 0x38
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_dsub+0x466>
 8000fb0:	e0b4      	b.n	800111c <__aeabi_dsub+0x5d0>
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	1a17      	subs	r7, r2, r0
 8000fb6:	42ba      	cmp	r2, r7
 8000fb8:	4192      	sbcs	r2, r2
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	464d      	mov	r5, r9
 8000fc0:	1a9c      	subs	r4, r3, r2
 8000fc2:	e620      	b.n	8000c06 <__aeabi_dsub+0xba>
 8000fc4:	0767      	lsls	r7, r4, #29
 8000fc6:	08c0      	lsrs	r0, r0, #3
 8000fc8:	4307      	orrs	r7, r0
 8000fca:	08e5      	lsrs	r5, r4, #3
 8000fcc:	e6ba      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 8000fce:	001f      	movs	r7, r3
 8000fd0:	4659      	mov	r1, fp
 8000fd2:	3f20      	subs	r7, #32
 8000fd4:	40f9      	lsrs	r1, r7
 8000fd6:	000f      	movs	r7, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d005      	beq.n	8000fe8 <__aeabi_dsub+0x49c>
 8000fdc:	2140      	movs	r1, #64	@ 0x40
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	4659      	mov	r1, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	4692      	mov	sl, r2
 8000fe8:	4653      	mov	r3, sl
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	4193      	sbcs	r3, r2
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	e604      	b.n	8000bfc <__aeabi_dsub+0xb0>
 8000ff2:	1aeb      	subs	r3, r5, r3
 8000ff4:	4d9b      	ldr	r5, [pc, #620]	@ (8001264 <__aeabi_dsub+0x718>)
 8000ff6:	4015      	ands	r5, r2
 8000ff8:	076f      	lsls	r7, r5, #29
 8000ffa:	08ed      	lsrs	r5, r5, #3
 8000ffc:	032c      	lsls	r4, r5, #12
 8000ffe:	055d      	lsls	r5, r3, #21
 8001000:	0b24      	lsrs	r4, r4, #12
 8001002:	0d6d      	lsrs	r5, r5, #21
 8001004:	e736      	b.n	8000e74 <__aeabi_dsub+0x328>
 8001006:	4d95      	ldr	r5, [pc, #596]	@ (800125c <__aeabi_dsub+0x710>)
 8001008:	42ab      	cmp	r3, r5
 800100a:	d100      	bne.n	800100e <__aeabi_dsub+0x4c2>
 800100c:	e0d6      	b.n	80011bc <__aeabi_dsub+0x670>
 800100e:	1882      	adds	r2, r0, r2
 8001010:	0021      	movs	r1, r4
 8001012:	4282      	cmp	r2, r0
 8001014:	4180      	sbcs	r0, r0
 8001016:	4459      	add	r1, fp
 8001018:	4240      	negs	r0, r0
 800101a:	1808      	adds	r0, r1, r0
 800101c:	07c7      	lsls	r7, r0, #31
 800101e:	0852      	lsrs	r2, r2, #1
 8001020:	4317      	orrs	r7, r2
 8001022:	0844      	lsrs	r4, r0, #1
 8001024:	0752      	lsls	r2, r2, #29
 8001026:	d400      	bmi.n	800102a <__aeabi_dsub+0x4de>
 8001028:	e185      	b.n	8001336 <__aeabi_dsub+0x7ea>
 800102a:	220f      	movs	r2, #15
 800102c:	001d      	movs	r5, r3
 800102e:	403a      	ands	r2, r7
 8001030:	2a04      	cmp	r2, #4
 8001032:	d000      	beq.n	8001036 <__aeabi_dsub+0x4ea>
 8001034:	e61a      	b.n	8000c6c <__aeabi_dsub+0x120>
 8001036:	08ff      	lsrs	r7, r7, #3
 8001038:	0764      	lsls	r4, r4, #29
 800103a:	4327      	orrs	r7, r4
 800103c:	0905      	lsrs	r5, r0, #4
 800103e:	e7dd      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 8001040:	465b      	mov	r3, fp
 8001042:	08d2      	lsrs	r2, r2, #3
 8001044:	075f      	lsls	r7, r3, #29
 8001046:	4317      	orrs	r7, r2
 8001048:	08dd      	lsrs	r5, r3, #3
 800104a:	e67b      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 800104c:	2700      	movs	r7, #0
 800104e:	2400      	movs	r4, #0
 8001050:	e710      	b.n	8000e74 <__aeabi_dsub+0x328>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d000      	beq.n	8001058 <__aeabi_dsub+0x50c>
 8001056:	e0d6      	b.n	8001206 <__aeabi_dsub+0x6ba>
 8001058:	2900      	cmp	r1, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dsub+0x512>
 800105c:	e12f      	b.n	80012be <__aeabi_dsub+0x772>
 800105e:	2480      	movs	r4, #128	@ 0x80
 8001060:	2600      	movs	r6, #0
 8001062:	4d7e      	ldr	r5, [pc, #504]	@ (800125c <__aeabi_dsub+0x710>)
 8001064:	0324      	lsls	r4, r4, #12
 8001066:	e705      	b.n	8000e74 <__aeabi_dsub+0x328>
 8001068:	4666      	mov	r6, ip
 800106a:	465c      	mov	r4, fp
 800106c:	08d0      	lsrs	r0, r2, #3
 800106e:	e717      	b.n	8000ea0 <__aeabi_dsub+0x354>
 8001070:	465b      	mov	r3, fp
 8001072:	1a17      	subs	r7, r2, r0
 8001074:	42ba      	cmp	r2, r7
 8001076:	4192      	sbcs	r2, r2
 8001078:	1b1c      	subs	r4, r3, r4
 800107a:	2601      	movs	r6, #1
 800107c:	4663      	mov	r3, ip
 800107e:	4252      	negs	r2, r2
 8001080:	1aa4      	subs	r4, r4, r2
 8001082:	401e      	ands	r6, r3
 8001084:	e5c4      	b.n	8000c10 <__aeabi_dsub+0xc4>
 8001086:	1883      	adds	r3, r0, r2
 8001088:	4283      	cmp	r3, r0
 800108a:	4180      	sbcs	r0, r0
 800108c:	445c      	add	r4, fp
 800108e:	4240      	negs	r0, r0
 8001090:	1825      	adds	r5, r4, r0
 8001092:	022a      	lsls	r2, r5, #8
 8001094:	d400      	bmi.n	8001098 <__aeabi_dsub+0x54c>
 8001096:	e0da      	b.n	800124e <__aeabi_dsub+0x702>
 8001098:	4a72      	ldr	r2, [pc, #456]	@ (8001264 <__aeabi_dsub+0x718>)
 800109a:	085b      	lsrs	r3, r3, #1
 800109c:	4015      	ands	r5, r2
 800109e:	07ea      	lsls	r2, r5, #31
 80010a0:	431a      	orrs	r2, r3
 80010a2:	0869      	lsrs	r1, r5, #1
 80010a4:	075b      	lsls	r3, r3, #29
 80010a6:	d400      	bmi.n	80010aa <__aeabi_dsub+0x55e>
 80010a8:	e14a      	b.n	8001340 <__aeabi_dsub+0x7f4>
 80010aa:	230f      	movs	r3, #15
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dsub+0x568>
 80010b2:	e0fc      	b.n	80012ae <__aeabi_dsub+0x762>
 80010b4:	1d17      	adds	r7, r2, #4
 80010b6:	4297      	cmp	r7, r2
 80010b8:	41a4      	sbcs	r4, r4
 80010ba:	4264      	negs	r4, r4
 80010bc:	2502      	movs	r5, #2
 80010be:	1864      	adds	r4, r4, r1
 80010c0:	e6ec      	b.n	8000e9c <__aeabi_dsub+0x350>
 80010c2:	4647      	mov	r7, r8
 80010c4:	001c      	movs	r4, r3
 80010c6:	431f      	orrs	r7, r3
 80010c8:	d000      	beq.n	80010cc <__aeabi_dsub+0x580>
 80010ca:	e743      	b.n	8000f54 <__aeabi_dsub+0x408>
 80010cc:	2600      	movs	r6, #0
 80010ce:	2500      	movs	r5, #0
 80010d0:	2400      	movs	r4, #0
 80010d2:	e6cf      	b.n	8000e74 <__aeabi_dsub+0x328>
 80010d4:	08c0      	lsrs	r0, r0, #3
 80010d6:	0767      	lsls	r7, r4, #29
 80010d8:	4307      	orrs	r7, r0
 80010da:	08e5      	lsrs	r5, r4, #3
 80010dc:	e632      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 80010de:	1a87      	subs	r7, r0, r2
 80010e0:	465b      	mov	r3, fp
 80010e2:	42b8      	cmp	r0, r7
 80010e4:	4180      	sbcs	r0, r0
 80010e6:	1ae4      	subs	r4, r4, r3
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a24      	subs	r4, r4, r0
 80010ec:	0223      	lsls	r3, r4, #8
 80010ee:	d428      	bmi.n	8001142 <__aeabi_dsub+0x5f6>
 80010f0:	0763      	lsls	r3, r4, #29
 80010f2:	08ff      	lsrs	r7, r7, #3
 80010f4:	431f      	orrs	r7, r3
 80010f6:	08e5      	lsrs	r5, r4, #3
 80010f8:	2301      	movs	r3, #1
 80010fa:	e77f      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_dsub+0x5b6>
 8001100:	e673      	b.n	8000dea <__aeabi_dsub+0x29e>
 8001102:	464b      	mov	r3, r9
 8001104:	1b5f      	subs	r7, r3, r5
 8001106:	003b      	movs	r3, r7
 8001108:	2d00      	cmp	r5, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dsub+0x5c2>
 800110c:	e742      	b.n	8000f94 <__aeabi_dsub+0x448>
 800110e:	2f38      	cmp	r7, #56	@ 0x38
 8001110:	dd00      	ble.n	8001114 <__aeabi_dsub+0x5c8>
 8001112:	e0ec      	b.n	80012ee <__aeabi_dsub+0x7a2>
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	000e      	movs	r6, r1
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	431c      	orrs	r4, r3
 800111c:	2f1f      	cmp	r7, #31
 800111e:	dc25      	bgt.n	800116c <__aeabi_dsub+0x620>
 8001120:	2520      	movs	r5, #32
 8001122:	0023      	movs	r3, r4
 8001124:	1bed      	subs	r5, r5, r7
 8001126:	0001      	movs	r1, r0
 8001128:	40a8      	lsls	r0, r5
 800112a:	40ab      	lsls	r3, r5
 800112c:	40f9      	lsrs	r1, r7
 800112e:	1e45      	subs	r5, r0, #1
 8001130:	41a8      	sbcs	r0, r5
 8001132:	430b      	orrs	r3, r1
 8001134:	40fc      	lsrs	r4, r7
 8001136:	4318      	orrs	r0, r3
 8001138:	465b      	mov	r3, fp
 800113a:	1b1b      	subs	r3, r3, r4
 800113c:	469b      	mov	fp, r3
 800113e:	e739      	b.n	8000fb4 <__aeabi_dsub+0x468>
 8001140:	4666      	mov	r6, ip
 8001142:	2501      	movs	r5, #1
 8001144:	e562      	b.n	8000c0c <__aeabi_dsub+0xc0>
 8001146:	001f      	movs	r7, r3
 8001148:	4659      	mov	r1, fp
 800114a:	3f20      	subs	r7, #32
 800114c:	40f9      	lsrs	r1, r7
 800114e:	468c      	mov	ip, r1
 8001150:	2b20      	cmp	r3, #32
 8001152:	d005      	beq.n	8001160 <__aeabi_dsub+0x614>
 8001154:	2740      	movs	r7, #64	@ 0x40
 8001156:	4659      	mov	r1, fp
 8001158:	1afb      	subs	r3, r7, r3
 800115a:	4099      	lsls	r1, r3
 800115c:	430a      	orrs	r2, r1
 800115e:	4692      	mov	sl, r2
 8001160:	4657      	mov	r7, sl
 8001162:	1e7b      	subs	r3, r7, #1
 8001164:	419f      	sbcs	r7, r3
 8001166:	4663      	mov	r3, ip
 8001168:	431f      	orrs	r7, r3
 800116a:	e5c1      	b.n	8000cf0 <__aeabi_dsub+0x1a4>
 800116c:	003b      	movs	r3, r7
 800116e:	0025      	movs	r5, r4
 8001170:	3b20      	subs	r3, #32
 8001172:	40dd      	lsrs	r5, r3
 8001174:	2f20      	cmp	r7, #32
 8001176:	d004      	beq.n	8001182 <__aeabi_dsub+0x636>
 8001178:	2340      	movs	r3, #64	@ 0x40
 800117a:	1bdb      	subs	r3, r3, r7
 800117c:	409c      	lsls	r4, r3
 800117e:	4320      	orrs	r0, r4
 8001180:	4680      	mov	r8, r0
 8001182:	4640      	mov	r0, r8
 8001184:	1e43      	subs	r3, r0, #1
 8001186:	4198      	sbcs	r0, r3
 8001188:	4328      	orrs	r0, r5
 800118a:	e713      	b.n	8000fb4 <__aeabi_dsub+0x468>
 800118c:	2900      	cmp	r1, #0
 800118e:	d09d      	beq.n	80010cc <__aeabi_dsub+0x580>
 8001190:	2601      	movs	r6, #1
 8001192:	4663      	mov	r3, ip
 8001194:	465c      	mov	r4, fp
 8001196:	4690      	mov	r8, r2
 8001198:	401e      	ands	r6, r3
 800119a:	e6db      	b.n	8000f54 <__aeabi_dsub+0x408>
 800119c:	1a17      	subs	r7, r2, r0
 800119e:	465b      	mov	r3, fp
 80011a0:	42ba      	cmp	r2, r7
 80011a2:	4192      	sbcs	r2, r2
 80011a4:	1b1c      	subs	r4, r3, r4
 80011a6:	4252      	negs	r2, r2
 80011a8:	1aa4      	subs	r4, r4, r2
 80011aa:	0223      	lsls	r3, r4, #8
 80011ac:	d4c8      	bmi.n	8001140 <__aeabi_dsub+0x5f4>
 80011ae:	0763      	lsls	r3, r4, #29
 80011b0:	08ff      	lsrs	r7, r7, #3
 80011b2:	431f      	orrs	r7, r3
 80011b4:	4666      	mov	r6, ip
 80011b6:	2301      	movs	r3, #1
 80011b8:	08e5      	lsrs	r5, r4, #3
 80011ba:	e71f      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 80011bc:	001d      	movs	r5, r3
 80011be:	2400      	movs	r4, #0
 80011c0:	2700      	movs	r7, #0
 80011c2:	e657      	b.n	8000e74 <__aeabi_dsub+0x328>
 80011c4:	465c      	mov	r4, fp
 80011c6:	08d0      	lsrs	r0, r2, #3
 80011c8:	e66a      	b.n	8000ea0 <__aeabi_dsub+0x354>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dsub+0x684>
 80011ce:	e737      	b.n	8001040 <__aeabi_dsub+0x4f4>
 80011d0:	4653      	mov	r3, sl
 80011d2:	08c0      	lsrs	r0, r0, #3
 80011d4:	0767      	lsls	r7, r4, #29
 80011d6:	4307      	orrs	r7, r0
 80011d8:	08e5      	lsrs	r5, r4, #3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dsub+0x694>
 80011de:	e5b1      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	031b      	lsls	r3, r3, #12
 80011e4:	421d      	tst	r5, r3
 80011e6:	d008      	beq.n	80011fa <__aeabi_dsub+0x6ae>
 80011e8:	4659      	mov	r1, fp
 80011ea:	08c8      	lsrs	r0, r1, #3
 80011ec:	4218      	tst	r0, r3
 80011ee:	d104      	bne.n	80011fa <__aeabi_dsub+0x6ae>
 80011f0:	08d2      	lsrs	r2, r2, #3
 80011f2:	0749      	lsls	r1, r1, #29
 80011f4:	430a      	orrs	r2, r1
 80011f6:	0017      	movs	r7, r2
 80011f8:	0005      	movs	r5, r0
 80011fa:	0f7b      	lsrs	r3, r7, #29
 80011fc:	00ff      	lsls	r7, r7, #3
 80011fe:	08ff      	lsrs	r7, r7, #3
 8001200:	075b      	lsls	r3, r3, #29
 8001202:	431f      	orrs	r7, r3
 8001204:	e59e      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 8001206:	08c0      	lsrs	r0, r0, #3
 8001208:	0763      	lsls	r3, r4, #29
 800120a:	4318      	orrs	r0, r3
 800120c:	08e5      	lsrs	r5, r4, #3
 800120e:	2900      	cmp	r1, #0
 8001210:	d053      	beq.n	80012ba <__aeabi_dsub+0x76e>
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	031b      	lsls	r3, r3, #12
 8001216:	421d      	tst	r5, r3
 8001218:	d00a      	beq.n	8001230 <__aeabi_dsub+0x6e4>
 800121a:	4659      	mov	r1, fp
 800121c:	08cc      	lsrs	r4, r1, #3
 800121e:	421c      	tst	r4, r3
 8001220:	d106      	bne.n	8001230 <__aeabi_dsub+0x6e4>
 8001222:	2601      	movs	r6, #1
 8001224:	4663      	mov	r3, ip
 8001226:	0025      	movs	r5, r4
 8001228:	08d0      	lsrs	r0, r2, #3
 800122a:	0749      	lsls	r1, r1, #29
 800122c:	4308      	orrs	r0, r1
 800122e:	401e      	ands	r6, r3
 8001230:	0f47      	lsrs	r7, r0, #29
 8001232:	00c0      	lsls	r0, r0, #3
 8001234:	08c0      	lsrs	r0, r0, #3
 8001236:	077f      	lsls	r7, r7, #29
 8001238:	4307      	orrs	r7, r0
 800123a:	e583      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 800123c:	1883      	adds	r3, r0, r2
 800123e:	4293      	cmp	r3, r2
 8001240:	4192      	sbcs	r2, r2
 8001242:	445c      	add	r4, fp
 8001244:	4252      	negs	r2, r2
 8001246:	18a5      	adds	r5, r4, r2
 8001248:	022a      	lsls	r2, r5, #8
 800124a:	d500      	bpl.n	800124e <__aeabi_dsub+0x702>
 800124c:	e724      	b.n	8001098 <__aeabi_dsub+0x54c>
 800124e:	076f      	lsls	r7, r5, #29
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	431f      	orrs	r7, r3
 8001254:	08ed      	lsrs	r5, r5, #3
 8001256:	2301      	movs	r3, #1
 8001258:	e6d0      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	000007ff 	.word	0x000007ff
 8001260:	000007fe 	.word	0x000007fe
 8001264:	ff7fffff 	.word	0xff7fffff
 8001268:	465b      	mov	r3, fp
 800126a:	08d2      	lsrs	r2, r2, #3
 800126c:	075f      	lsls	r7, r3, #29
 800126e:	4666      	mov	r6, ip
 8001270:	4317      	orrs	r7, r2
 8001272:	08dd      	lsrs	r5, r3, #3
 8001274:	e566      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 8001276:	0025      	movs	r5, r4
 8001278:	3b20      	subs	r3, #32
 800127a:	40dd      	lsrs	r5, r3
 800127c:	4663      	mov	r3, ip
 800127e:	2b20      	cmp	r3, #32
 8001280:	d005      	beq.n	800128e <__aeabi_dsub+0x742>
 8001282:	2340      	movs	r3, #64	@ 0x40
 8001284:	4661      	mov	r1, ip
 8001286:	1a5b      	subs	r3, r3, r1
 8001288:	409c      	lsls	r4, r3
 800128a:	4320      	orrs	r0, r4
 800128c:	4680      	mov	r8, r0
 800128e:	4647      	mov	r7, r8
 8001290:	1e7b      	subs	r3, r7, #1
 8001292:	419f      	sbcs	r7, r3
 8001294:	432f      	orrs	r7, r5
 8001296:	e5a0      	b.n	8000dda <__aeabi_dsub+0x28e>
 8001298:	2120      	movs	r1, #32
 800129a:	2700      	movs	r7, #0
 800129c:	1a09      	subs	r1, r1, r0
 800129e:	e4d2      	b.n	8000c46 <__aeabi_dsub+0xfa>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dsub+0x75a>
 80012a4:	e713      	b.n	80010ce <__aeabi_dsub+0x582>
 80012a6:	465c      	mov	r4, fp
 80012a8:	0017      	movs	r7, r2
 80012aa:	2500      	movs	r5, #0
 80012ac:	e5f6      	b.n	8000e9c <__aeabi_dsub+0x350>
 80012ae:	08d7      	lsrs	r7, r2, #3
 80012b0:	0749      	lsls	r1, r1, #29
 80012b2:	2302      	movs	r3, #2
 80012b4:	430f      	orrs	r7, r1
 80012b6:	092d      	lsrs	r5, r5, #4
 80012b8:	e6a0      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 80012ba:	0007      	movs	r7, r0
 80012bc:	e542      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 80012be:	465b      	mov	r3, fp
 80012c0:	2601      	movs	r6, #1
 80012c2:	075f      	lsls	r7, r3, #29
 80012c4:	08dd      	lsrs	r5, r3, #3
 80012c6:	4663      	mov	r3, ip
 80012c8:	08d2      	lsrs	r2, r2, #3
 80012ca:	4317      	orrs	r7, r2
 80012cc:	401e      	ands	r6, r3
 80012ce:	e539      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 80012d0:	465b      	mov	r3, fp
 80012d2:	08d2      	lsrs	r2, r2, #3
 80012d4:	075f      	lsls	r7, r3, #29
 80012d6:	4317      	orrs	r7, r2
 80012d8:	08dd      	lsrs	r5, r3, #3
 80012da:	e533      	b.n	8000d44 <__aeabi_dsub+0x1f8>
 80012dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <__aeabi_dsub+0x80c>)
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	4022      	ands	r2, r4
 80012e2:	0757      	lsls	r7, r2, #29
 80012e4:	0252      	lsls	r2, r2, #9
 80012e6:	2501      	movs	r5, #1
 80012e8:	431f      	orrs	r7, r3
 80012ea:	0b14      	lsrs	r4, r2, #12
 80012ec:	e5c2      	b.n	8000e74 <__aeabi_dsub+0x328>
 80012ee:	000e      	movs	r6, r1
 80012f0:	2001      	movs	r0, #1
 80012f2:	e65f      	b.n	8000fb4 <__aeabi_dsub+0x468>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00d      	beq.n	8001314 <__aeabi_dsub+0x7c8>
 80012f8:	464b      	mov	r3, r9
 80012fa:	1b5b      	subs	r3, r3, r5
 80012fc:	469c      	mov	ip, r3
 80012fe:	2d00      	cmp	r5, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x7b8>
 8001302:	e548      	b.n	8000d96 <__aeabi_dsub+0x24a>
 8001304:	2701      	movs	r7, #1
 8001306:	2b38      	cmp	r3, #56	@ 0x38
 8001308:	dd00      	ble.n	800130c <__aeabi_dsub+0x7c0>
 800130a:	e566      	b.n	8000dda <__aeabi_dsub+0x28e>
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	431c      	orrs	r4, r3
 8001312:	e550      	b.n	8000db6 <__aeabi_dsub+0x26a>
 8001314:	1c6b      	adds	r3, r5, #1
 8001316:	4d11      	ldr	r5, [pc, #68]	@ (800135c <__aeabi_dsub+0x810>)
 8001318:	422b      	tst	r3, r5
 800131a:	d000      	beq.n	800131e <__aeabi_dsub+0x7d2>
 800131c:	e673      	b.n	8001006 <__aeabi_dsub+0x4ba>
 800131e:	4659      	mov	r1, fp
 8001320:	0023      	movs	r3, r4
 8001322:	4311      	orrs	r1, r2
 8001324:	468a      	mov	sl, r1
 8001326:	4303      	orrs	r3, r0
 8001328:	e600      	b.n	8000f2c <__aeabi_dsub+0x3e0>
 800132a:	0767      	lsls	r7, r4, #29
 800132c:	08c0      	lsrs	r0, r0, #3
 800132e:	2300      	movs	r3, #0
 8001330:	4307      	orrs	r7, r0
 8001332:	08e5      	lsrs	r5, r4, #3
 8001334:	e662      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 8001336:	0764      	lsls	r4, r4, #29
 8001338:	08ff      	lsrs	r7, r7, #3
 800133a:	4327      	orrs	r7, r4
 800133c:	0905      	lsrs	r5, r0, #4
 800133e:	e65d      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 8001340:	08d2      	lsrs	r2, r2, #3
 8001342:	0749      	lsls	r1, r1, #29
 8001344:	4311      	orrs	r1, r2
 8001346:	000f      	movs	r7, r1
 8001348:	2302      	movs	r3, #2
 800134a:	092d      	lsrs	r5, r5, #4
 800134c:	e656      	b.n	8000ffc <__aeabi_dsub+0x4b0>
 800134e:	0007      	movs	r7, r0
 8001350:	e5a4      	b.n	8000e9c <__aeabi_dsub+0x350>
 8001352:	0038      	movs	r0, r7
 8001354:	e48f      	b.n	8000c76 <__aeabi_dsub+0x12a>
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	ff7fffff 	.word	0xff7fffff
 800135c:	000007fe 	.word	0x000007fe

08001360 <__aeabi_d2iz>:
 8001360:	000b      	movs	r3, r1
 8001362:	0002      	movs	r2, r0
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d16      	ldr	r5, [pc, #88]	@ (80013c0 <__aeabi_d2iz+0x60>)
 8001368:	030c      	lsls	r4, r1, #12
 800136a:	b082      	sub	sp, #8
 800136c:	0049      	lsls	r1, r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0fde      	lsrs	r6, r3, #31
 800137a:	42a9      	cmp	r1, r5
 800137c:	dd04      	ble.n	8001388 <__aeabi_d2iz+0x28>
 800137e:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <__aeabi_d2iz+0x64>)
 8001380:	4281      	cmp	r1, r0
 8001382:	dd03      	ble.n	800138c <__aeabi_d2iz+0x2c>
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <__aeabi_d2iz+0x68>)
 8001386:	18f0      	adds	r0, r6, r3
 8001388:	b002      	add	sp, #8
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	2080      	movs	r0, #128	@ 0x80
 800138e:	0340      	lsls	r0, r0, #13
 8001390:	4320      	orrs	r0, r4
 8001392:	4c0e      	ldr	r4, [pc, #56]	@ (80013cc <__aeabi_d2iz+0x6c>)
 8001394:	1a64      	subs	r4, r4, r1
 8001396:	2c1f      	cmp	r4, #31
 8001398:	dd08      	ble.n	80013ac <__aeabi_d2iz+0x4c>
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <__aeabi_d2iz+0x70>)
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	0003      	movs	r3, r0
 80013a2:	4258      	negs	r0, r3
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d1ef      	bne.n	8001388 <__aeabi_d2iz+0x28>
 80013a8:	0018      	movs	r0, r3
 80013aa:	e7ed      	b.n	8001388 <__aeabi_d2iz+0x28>
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <__aeabi_d2iz+0x74>)
 80013ae:	9a00      	ldr	r2, [sp, #0]
 80013b0:	469c      	mov	ip, r3
 80013b2:	0003      	movs	r3, r0
 80013b4:	4461      	add	r1, ip
 80013b6:	408b      	lsls	r3, r1
 80013b8:	40e2      	lsrs	r2, r4
 80013ba:	4313      	orrs	r3, r2
 80013bc:	e7f1      	b.n	80013a2 <__aeabi_d2iz+0x42>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	000003fe 	.word	0x000003fe
 80013c4:	0000041d 	.word	0x0000041d
 80013c8:	7fffffff 	.word	0x7fffffff
 80013cc:	00000433 	.word	0x00000433
 80013d0:	00000413 	.word	0x00000413
 80013d4:	fffffbed 	.word	0xfffffbed

080013d8 <__aeabi_ui2d>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	1e04      	subs	r4, r0, #0
 80013dc:	d010      	beq.n	8001400 <__aeabi_ui2d+0x28>
 80013de:	f000 f81f 	bl	8001420 <__clzsi2>
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <__aeabi_ui2d+0x44>)
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	055b      	lsls	r3, r3, #21
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	280a      	cmp	r0, #10
 80013ec:	dc0f      	bgt.n	800140e <__aeabi_ui2d+0x36>
 80013ee:	220b      	movs	r2, #11
 80013f0:	0021      	movs	r1, r4
 80013f2:	1a12      	subs	r2, r2, r0
 80013f4:	40d1      	lsrs	r1, r2
 80013f6:	3015      	adds	r0, #21
 80013f8:	030a      	lsls	r2, r1, #12
 80013fa:	4084      	lsls	r4, r0
 80013fc:	0b12      	lsrs	r2, r2, #12
 80013fe:	e001      	b.n	8001404 <__aeabi_ui2d+0x2c>
 8001400:	2300      	movs	r3, #0
 8001402:	2200      	movs	r2, #0
 8001404:	051b      	lsls	r3, r3, #20
 8001406:	4313      	orrs	r3, r2
 8001408:	0020      	movs	r0, r4
 800140a:	0019      	movs	r1, r3
 800140c:	bd10      	pop	{r4, pc}
 800140e:	0022      	movs	r2, r4
 8001410:	380b      	subs	r0, #11
 8001412:	4082      	lsls	r2, r0
 8001414:	0312      	lsls	r2, r2, #12
 8001416:	2400      	movs	r4, #0
 8001418:	0b12      	lsrs	r2, r2, #12
 800141a:	e7f3      	b.n	8001404 <__aeabi_ui2d+0x2c>
 800141c:	0000041e 	.word	0x0000041e

08001420 <__clzsi2>:
 8001420:	211c      	movs	r1, #28
 8001422:	2301      	movs	r3, #1
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	4298      	cmp	r0, r3
 8001428:	d301      	bcc.n	800142e <__clzsi2+0xe>
 800142a:	0c00      	lsrs	r0, r0, #16
 800142c:	3910      	subs	r1, #16
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	4298      	cmp	r0, r3
 8001432:	d301      	bcc.n	8001438 <__clzsi2+0x18>
 8001434:	0a00      	lsrs	r0, r0, #8
 8001436:	3908      	subs	r1, #8
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	4298      	cmp	r0, r3
 800143c:	d301      	bcc.n	8001442 <__clzsi2+0x22>
 800143e:	0900      	lsrs	r0, r0, #4
 8001440:	3904      	subs	r1, #4
 8001442:	a202      	add	r2, pc, #8	@ (adr r2, 800144c <__clzsi2+0x2c>)
 8001444:	5c10      	ldrb	r0, [r2, r0]
 8001446:	1840      	adds	r0, r0, r1
 8001448:	4770      	bx	lr
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	02020304 	.word	0x02020304
 8001450:	01010101 	.word	0x01010101
	...

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f000 fb3a 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f832 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f000 f8b8 	bl	80015dc <MX_GPIO_Init>
  MX_SPI1_Init();
 800146c:	f000 f878 	bl	8001560 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2007      	movs	r0, #7
 8001476:	f000 fc63 	bl	8001d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800147a:	2007      	movs	r0, #7
 800147c:	f000 fc75 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  Test_Segments();
 8001480:	f000 f96a 	bl	8001758 <Test_Segments>

  // Инициализация дисплея (все нули)
  digits[0] = 0;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <main+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
  digits[1] = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <main+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	705a      	strb	r2, [r3, #1]
  digits[2] = 0;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <main+0x68>)
 8001492:	2200      	movs	r2, #0
 8001494:	709a      	strb	r2, [r3, #2]
  digits[3] = 0;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <main+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	70da      	strb	r2, [r3, #3]
  Update_Display();
 800149c:	f000 f902 	bl	80016a4 <Update_Display>
  HAL_Delay(1000);
 80014a0:	23fa      	movs	r3, #250	@ 0xfa
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 fb7b 	bl	8001ba0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pulse_count >= period_number) {
 80014aa:	2303      	movs	r3, #3
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <main+0x6c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f8      	bhi.n	80014aa <main+0x4e>
		  Frequency_calculation();
 80014b8:	f000 f9ae 	bl	8001818 <Frequency_calculation>
		  Update_Display();
 80014bc:	f000 f8f2 	bl	80016a4 <Update_Display>
	  if (pulse_count >= period_number) {
 80014c0:	e7f3      	b.n	80014aa <main+0x4e>
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	200000a0 	.word	0x200000a0
 80014c8:	20000090 	.word	0x20000090

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b091      	sub	sp, #68	@ 0x44
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	2410      	movs	r4, #16
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	0018      	movs	r0, r3
 80014d8:	2330      	movs	r3, #48	@ 0x30
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f001 fdbb 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e2:	003b      	movs	r3, r7
 80014e4:	0018      	movs	r0, r3
 80014e6:	2310      	movs	r3, #16
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f001 fdb4 	bl	8003058 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f0:	0021      	movs	r1, r4
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2202      	movs	r2, #2
 80014f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2201      	movs	r2, #1
 80014fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2210      	movs	r2, #16
 8001502:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2202      	movs	r2, #2
 8001508:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	22a0      	movs	r2, #160	@ 0xa0
 8001514:	0392      	lsls	r2, r2, #14
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	187b      	adds	r3, r7, r1
 8001520:	0018      	movs	r0, r3
 8001522:	f000 fdcd 	bl	80020c0 <HAL_RCC_OscConfig>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800152a:	f000 fa17 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	003b      	movs	r3, r7
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	003b      	movs	r3, r7
 8001536:	2202      	movs	r2, #2
 8001538:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	003b      	movs	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	003b      	movs	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001546:	003b      	movs	r3, r7
 8001548:	2101      	movs	r1, #1
 800154a:	0018      	movs	r0, r3
 800154c:	f001 f8d2 	bl	80026f4 <HAL_RCC_ClockConfig>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001554:	f000 fa02 	bl	800195c <Error_Handler>
  }
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b011      	add	sp, #68	@ 0x44
 800155e:	bd90      	pop	{r4, r7, pc}

08001560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_SPI1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <MX_SPI1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_SPI1_Init+0x74>)
 800156c:	2282      	movs	r2, #130	@ 0x82
 800156e:	0052      	lsls	r2, r2, #1
 8001570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_SPI1_Init+0x74>)
 800157a:	22e0      	movs	r2, #224	@ 0xe0
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_SPI1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_SPI1_Init+0x74>)
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_SPI1_Init+0x74>)
 8001596:	2220      	movs	r2, #32
 8001598:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_SPI1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015ba:	2208      	movs	r2, #8
 80015bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <MX_SPI1_Init+0x74>)
 80015c0:	0018      	movs	r0, r3
 80015c2:	f001 f9bb 	bl	800293c <HAL_SPI_Init>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f9c7 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000002c 	.word	0x2000002c
 80015d8:	40013000 	.word	0x40013000

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	240c      	movs	r4, #12
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	0018      	movs	r0, r3
 80015e8:	2314      	movs	r3, #20
 80015ea:	001a      	movs	r2, r3
 80015ec:	2100      	movs	r1, #0
 80015ee:	f001 fd33 	bl	8003058 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <MX_GPIO_Init+0xc0>)
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <MX_GPIO_Init+0xc0>)
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	0289      	lsls	r1, r1, #10
 80015fc:	430a      	orrs	r2, r1
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <MX_GPIO_Init+0xc0>)
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <MX_GPIO_Init+0xc0>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_GPIO_Init+0xc0>)
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	02c9      	lsls	r1, r1, #11
 8001618:	430a      	orrs	r2, r1
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_GPIO_Init+0xc0>)
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	02db      	lsls	r3, r3, #11
 8001624:	4013      	ands	r3, r2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OE_Pin|Latch_Pin, GPIO_PIN_RESET);
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_GPIO_Init+0xc4>)
 800162c:	2200      	movs	r2, #0
 800162e:	2103      	movs	r1, #3
 8001630:	0018      	movs	r0, r3
 8001632:	f000 fd27 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OE_Pin Latch_Pin */
  GPIO_InitStruct.Pin = OE_Pin|Latch_Pin;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2203      	movs	r2, #3
 800163a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2201      	movs	r2, #1
 8001640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	193b      	adds	r3, r7, r4
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	193b      	adds	r3, r7, r4
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	193b      	adds	r3, r7, r4
 8001650:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <MX_GPIO_Init+0xc4>)
 8001652:	0019      	movs	r1, r3
 8001654:	0010      	movs	r0, r2
 8001656:	f000 fba5 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800165a:	0021      	movs	r1, r4
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2288      	movs	r2, #136	@ 0x88
 8001666:	0352      	lsls	r2, r2, #13
 8001668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	187b      	adds	r3, r7, r1
 8001672:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <MX_GPIO_Init+0xc4>)
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f000 fb94 	bl	8001da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_GPIO_Init+0xc4>)
 800167e:	2201      	movs	r2, #1
 8001680:	2102      	movs	r1, #2
 8001682:	0018      	movs	r0, r3
 8001684:	f000 fcfe 	bl	8002084 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <MX_GPIO_Init+0xc4>)
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fcf8 	bl	8002084 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b009      	add	sp, #36	@ 0x24
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000400 	.word	0x48000400

080016a4 <Update_Display>:

/* USER CODE BEGIN 4 */

// Обновление индикаторов
void Update_Display(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
    uint8_t data[4];
    // Порядок передачи: LED1, LED2, LED3, LED4 (единицы → тысячи)
    data[0] = digit_pattern[digits[3]]; // Единицы (LED4)
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <Update_Display+0x74>)
 80016ac:	78db      	ldrb	r3, [r3, #3]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	001a      	movs	r2, r3
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <Update_Display+0x78>)
 80016b4:	5c9a      	ldrb	r2, [r3, r2]
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	701a      	strb	r2, [r3, #0]
    data[1] = digit_pattern[digits[2]]; // Десятки (LED3)
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <Update_Display+0x74>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	001a      	movs	r2, r3
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <Update_Display+0x78>)
 80016c4:	5c9a      	ldrb	r2, [r3, r2]
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	705a      	strb	r2, [r3, #1]
    data[2] = digit_pattern[digits[1]]; // Сотни (LED2)
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <Update_Display+0x74>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	001a      	movs	r2, r3
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <Update_Display+0x78>)
 80016d4:	5c9a      	ldrb	r2, [r3, r2]
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	709a      	strb	r2, [r3, #2]
    data[3] = digit_pattern[digits[0]]; // Тысячи (LED1)
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <Update_Display+0x74>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <Update_Display+0x78>)
 80016e4:	5c9a      	ldrb	r2, [r3, r2]
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // LATCH = 0
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <Update_Display+0x7c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	2102      	movs	r1, #2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 fcc7 	bl	8002084 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 4, 100);               // Передача данных
 80016f6:	1d39      	adds	r1, r7, #4
 80016f8:	480a      	ldr	r0, [pc, #40]	@ (8001724 <Update_Display+0x80>)
 80016fa:	2364      	movs	r3, #100	@ 0x64
 80016fc:	2204      	movs	r2, #4
 80016fe:	f001 f9d5 	bl	8002aac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // LATCH = 1
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <Update_Display+0x7c>)
 8001704:	2201      	movs	r2, #1
 8001706:	2102      	movs	r1, #2
 8001708:	0018      	movs	r0, r3
 800170a:	f000 fcbb 	bl	8002084 <HAL_GPIO_WritePin>
}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	200000a0 	.word	0x200000a0
 800171c:	08003108 	.word	0x08003108
 8001720:	48000400 	.word	0x48000400
 8001724:	2000002c 	.word	0x2000002c

08001728 <EXTI4_15_IRQHandler>:

// Обработчик прерывания для PB7
void EXTI4_15_IRQHandler(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) {
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <EXTI4_15_IRQHandler+0x28>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	4013      	ands	r3, r2
 8001734:	d009      	beq.n	800174a <EXTI4_15_IRQHandler+0x22>
        pulse_count++;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <EXTI4_15_IRQHandler+0x2c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <EXTI4_15_IRQHandler+0x2c>)
 8001742:	801a      	strh	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8001744:	4b02      	ldr	r3, [pc, #8]	@ (8001750 <EXTI4_15_IRQHandler+0x28>)
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	615a      	str	r2, [r3, #20]
    }
}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010400 	.word	0x40010400
 8001754:	20000090 	.word	0x20000090

08001758 <Test_Segments>:

// Тест сегментов
void Test_Segments(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
    uint8_t test_data[4] = {0};
 800175e:	003b      	movs	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

    // Все сегменты выключены
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001764:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <Test_Segments+0xb8>)
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fc8a 	bl	8002084 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 8001770:	0039      	movs	r1, r7
 8001772:	4828      	ldr	r0, [pc, #160]	@ (8001814 <Test_Segments+0xbc>)
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	2204      	movs	r2, #4
 8001778:	f001 f998 	bl	8002aac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <Test_Segments+0xb8>)
 800177e:	2201      	movs	r2, #1
 8001780:	2102      	movs	r1, #2
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fc7e 	bl	8002084 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001788:	23fa      	movs	r3, #250	@ 0xfa
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	0018      	movs	r0, r3
 800178e:	f000 fa07 	bl	8001ba0 <HAL_Delay>

    // Поочередное включение сегментов
    for(uint8_t seg = 0; seg < 8; seg++) {
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e031      	b.n	80017fe <Test_Segments+0xa6>
        for(uint8_t i = 0; i < 4; i++) {
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e00d      	b.n	80017be <Test_Segments+0x66>
            test_data[i] = (1 << seg);
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	409a      	lsls	r2, r3
 80017aa:	1dbb      	adds	r3, r7, #6
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2d1      	uxtb	r1, r2
 80017b0:	003a      	movs	r2, r7
 80017b2:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i = 0; i < 4; i++) {
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	1dbb      	adds	r3, r7, #6
 80017ba:	3201      	adds	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	1dbb      	adds	r3, r7, #6
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d9ed      	bls.n	80017a2 <Test_Segments+0x4a>
        }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <Test_Segments+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	2102      	movs	r1, #2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fc59 	bl	8002084 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 80017d2:	0039      	movs	r1, r7
 80017d4:	480f      	ldr	r0, [pc, #60]	@ (8001814 <Test_Segments+0xbc>)
 80017d6:	2364      	movs	r3, #100	@ 0x64
 80017d8:	2204      	movs	r2, #4
 80017da:	f001 f967 	bl	8002aac <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <Test_Segments+0xb8>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fc4d 	bl	8002084 <HAL_GPIO_WritePin>

        HAL_Delay(500);
 80017ea:	23fa      	movs	r3, #250	@ 0xfa
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f9d6 	bl	8001ba0 <HAL_Delay>
    for(uint8_t seg = 0; seg < 8; seg++) {
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	3201      	adds	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b07      	cmp	r3, #7
 8001804:	d9c9      	bls.n	800179a <Test_Segments+0x42>
    }
}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	48000400 	.word	0x48000400
 8001814:	2000002c 	.word	0x2000002c

08001818 <Frequency_calculation>:

//Функция расчета частоты
void Frequency_calculation(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
/*	__disable_irq();
    uint8_t current_count = pulse_count;  		// Фиксация значения
    pulse_count = 0;                       		// Сброс счетчика
    __enable_irq();
*/
    previous_time = current_time;
 800181c:	4b47      	ldr	r3, [pc, #284]	@ (800193c <Frequency_calculation+0x124>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <Frequency_calculation+0x128>)
 8001822:	601a      	str	r2, [r3, #0]
    current_time = HAL_GetTick();
 8001824:	f000 f9b2 	bl	8001b8c <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	4b44      	ldr	r3, [pc, #272]	@ (800193c <Frequency_calculation+0x124>)
 800182c:	601a      	str	r2, [r3, #0]
    frequency_rpm = 60000.0 / ((current_time - previous_time) / pulse_count);
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <Frequency_calculation+0x124>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b43      	ldr	r3, [pc, #268]	@ (8001940 <Frequency_calculation+0x128>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	4b42      	ldr	r3, [pc, #264]	@ (8001944 <Frequency_calculation+0x12c>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	0019      	movs	r1, r3
 8001840:	0010      	movs	r0, r2
 8001842:	f7fe fc61 	bl	8000108 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fdc5 	bl	80013d8 <__aeabi_ui2d>
 800184e:	0002      	movs	r2, r0
 8001850:	000b      	movs	r3, r1
 8001852:	2000      	movs	r0, #0
 8001854:	493c      	ldr	r1, [pc, #240]	@ (8001948 <Frequency_calculation+0x130>)
 8001856:	f7fe fd3f 	bl	80002d8 <__aeabi_ddiv>
 800185a:	0002      	movs	r2, r0
 800185c:	000b      	movs	r3, r1
 800185e:	493b      	ldr	r1, [pc, #236]	@ (800194c <Frequency_calculation+0x134>)
 8001860:	600a      	str	r2, [r1, #0]
 8001862:	604b      	str	r3, [r1, #4]
    pulse_count = 0;
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <Frequency_calculation+0x12c>)
 8001866:	2200      	movs	r2, #0
 8001868:	801a      	strh	r2, [r3, #0]

    // Ограничение значения (0-9999)
    frequency_rpm = (frequency_rpm > 9999) ? 9999 : frequency_rpm;
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <Frequency_calculation+0x134>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <Frequency_calculation+0x138>)
 8001874:	f7fe fcfe 	bl	8000274 <__aeabi_dcmpgt>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d002      	beq.n	8001882 <Frequency_calculation+0x6a>
 800187c:	2200      	movs	r2, #0
 800187e:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <Frequency_calculation+0x138>)
 8001880:	e002      	b.n	8001888 <Frequency_calculation+0x70>
 8001882:	4b32      	ldr	r3, [pc, #200]	@ (800194c <Frequency_calculation+0x134>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4930      	ldr	r1, [pc, #192]	@ (800194c <Frequency_calculation+0x134>)
 800188a:	600a      	str	r2, [r1, #0]
 800188c:	604b      	str	r3, [r1, #4]

    // Преобразование в цифры
    digits[0] = frequency_rpm / 1000;        	// Тысячи
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <Frequency_calculation+0x134>)
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <Frequency_calculation+0x13c>)
 8001898:	f7fe fd1e 	bl	80002d8 <__aeabi_ddiv>
 800189c:	0002      	movs	r2, r0
 800189e:	000b      	movs	r3, r1
 80018a0:	0010      	movs	r0, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	f7fe fcfa 	bl	800029c <__aeabi_d2uiz>
 80018a8:	0003      	movs	r3, r0
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <Frequency_calculation+0x140>)
 80018ae:	701a      	strb	r2, [r3, #0]
    digits[1] = ((uint16_t)frequency_rpm % 1000) / 100; 	// Сотни
 80018b0:	4b26      	ldr	r3, [pc, #152]	@ (800194c <Frequency_calculation+0x134>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0010      	movs	r0, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	f7fe fcef 	bl	800029c <__aeabi_d2uiz>
 80018be:	0003      	movs	r3, r0
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	22fa      	movs	r2, #250	@ 0xfa
 80018c4:	0091      	lsls	r1, r2, #2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7fe fca4 	bl	8000214 <__aeabi_uidivmod>
 80018cc:	000b      	movs	r3, r1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2164      	movs	r1, #100	@ 0x64
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fc18 	bl	8000108 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <Frequency_calculation+0x140>)
 80018e0:	705a      	strb	r2, [r3, #1]
    digits[2] = ((uint16_t)frequency_rpm % 100) / 10;   	// Десятки
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <Frequency_calculation+0x134>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0010      	movs	r0, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	f7fe fcd6 	bl	800029c <__aeabi_d2uiz>
 80018f0:	0003      	movs	r3, r0
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2164      	movs	r1, #100	@ 0x64
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fc8c 	bl	8000214 <__aeabi_uidivmod>
 80018fc:	000b      	movs	r3, r1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	210a      	movs	r1, #10
 8001902:	0018      	movs	r0, r3
 8001904:	f7fe fc00 	bl	8000108 <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <Frequency_calculation+0x140>)
 8001910:	709a      	strb	r2, [r3, #2]
    digits[3] = (uint16_t)frequency_rpm % 10;           	// Единицы
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <Frequency_calculation+0x134>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0010      	movs	r0, r2
 800191a:	0019      	movs	r1, r3
 800191c:	f7fe fcbe 	bl	800029c <__aeabi_d2uiz>
 8001920:	0003      	movs	r3, r0
 8001922:	b29b      	uxth	r3, r3
 8001924:	210a      	movs	r1, #10
 8001926:	0018      	movs	r0, r3
 8001928:	f7fe fc74 	bl	8000214 <__aeabi_uidivmod>
 800192c:	000b      	movs	r3, r1
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <Frequency_calculation+0x140>)
 8001934:	70da      	strb	r2, [r3, #3]

}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000a4 	.word	0x200000a4
 8001940:	200000a8 	.word	0x200000a8
 8001944:	20000090 	.word	0x20000090
 8001948:	40ed4c00 	.word	0x40ed4c00
 800194c:	20000098 	.word	0x20000098
 8001950:	40c38780 	.word	0x40c38780
 8001954:	408f4000 	.word	0x408f4000
 8001958:	200000a0 	.word	0x200000a0

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	46c0      	nop			@ (mov r8, r8)
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_MspInit+0x44>)
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_MspInit+0x44>)
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_MspInit+0x44>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_MspInit+0x44>)
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_MspInit+0x44>)
 800198c:	2180      	movs	r1, #128	@ 0x80
 800198e:	0549      	lsls	r1, r1, #21
 8001990:	430a      	orrs	r2, r1
 8001992:	61da      	str	r2, [r3, #28]
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_MspInit+0x44>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	055b      	lsls	r3, r3, #21
 800199c:	4013      	ands	r3, r2
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08b      	sub	sp, #44	@ 0x2c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	2414      	movs	r4, #20
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	0018      	movs	r0, r3
 80019be:	2314      	movs	r3, #20
 80019c0:	001a      	movs	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	f001 fb48 	bl	8003058 <memset>
  if(hspi->Instance==SPI1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <HAL_SPI_MspInit+0x90>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d132      	bne.n	8001a38 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019d8:	2180      	movs	r1, #128	@ 0x80
 80019da:	0149      	lsls	r1, r1, #5
 80019dc:	430a      	orrs	r2, r1
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0289      	lsls	r1, r1, #10
 80019f8:	430a      	orrs	r2, r1
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_SPI_MspInit+0x94>)
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	22e0      	movs	r2, #224	@ 0xe0
 8001a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2202      	movs	r2, #2
 8001a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2203      	movs	r2, #3
 8001a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	187a      	adds	r2, r7, r1
 8001a2c:	2390      	movs	r3, #144	@ 0x90
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f9b6 	bl	8001da4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b00b      	add	sp, #44	@ 0x2c
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	40013000 	.word	0x40013000
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f87a 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a88:	f7ff fff7 	bl	8001a7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ab2:	f001 fad9 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff fcd1 	bl	800145c <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   r0, =_estack
 8001abc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ac8:	0800314c 	.word	0x0800314c
  ldr r2, =_sbss
 8001acc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ad0:	200000b0 	.word	0x200000b0

08001ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <HAL_Init+0x24>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_Init+0x24>)
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f809 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aee:	f7ff ff3b 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_InitTick+0x5c>)
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_InitTick+0x60>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	0019      	movs	r1, r3
 8001b12:	23fa      	movs	r3, #250	@ 0xfa
 8001b14:	0098      	lsls	r0, r3, #2
 8001b16:	f7fe faf7 	bl	8000108 <__udivsi3>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	0020      	movs	r0, r4
 8001b20:	f7fe faf2 	bl	8000108 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 f92f 	bl	8001d8a <HAL_SYSTICK_Config>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e00f      	b.n	8001b54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d80b      	bhi.n	8001b52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	425b      	negs	r3, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f8fc 	bl	8001d40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_InitTick+0x64>)
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b003      	add	sp, #12
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	18d2      	adds	r2, r2, r3
 8001b78:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	20000008 	.word	0x20000008
 8001b88:	200000ac 	.word	0x200000ac

08001b8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	@ (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	200000ac 	.word	0x200000ac

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	f7ff ffe0 	bl	8001b8c <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	46c0      	nop			@ (mov r8, r8)
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	0002      	movs	r2, r0
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bfa:	d809      	bhi.n	8001c10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	231f      	movs	r3, #31
 8001c04:	401a      	ands	r2, r3
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <__NVIC_EnableIRQ+0x30>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4091      	lsls	r1, r2
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
  }
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	0002      	movs	r2, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c30:	d828      	bhi.n	8001c84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c32:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf0 <__NVIC_SetPriority+0xd4>)
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	33c0      	adds	r3, #192	@ 0xc0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	589b      	ldr	r3, [r3, r2]
 8001c42:	1dfa      	adds	r2, r7, #7
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	0011      	movs	r1, r2
 8001c48:	2203      	movs	r2, #3
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	00d2      	lsls	r2, r2, #3
 8001c4e:	21ff      	movs	r1, #255	@ 0xff
 8001c50:	4091      	lsls	r1, r2
 8001c52:	000a      	movs	r2, r1
 8001c54:	43d2      	mvns	r2, r2
 8001c56:	401a      	ands	r2, r3
 8001c58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	22ff      	movs	r2, #255	@ 0xff
 8001c60:	401a      	ands	r2, r3
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	0018      	movs	r0, r3
 8001c68:	2303      	movs	r3, #3
 8001c6a:	4003      	ands	r3, r0
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c70:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <__NVIC_SetPriority+0xd4>)
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	33c0      	adds	r3, #192	@ 0xc0
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c82:	e031      	b.n	8001ce8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c84:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf4 <__NVIC_SetPriority+0xd8>)
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	400b      	ands	r3, r1
 8001c90:	3b08      	subs	r3, #8
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3306      	adds	r3, #6
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	1dfa      	adds	r2, r7, #7
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	21ff      	movs	r1, #255	@ 0xff
 8001cac:	4091      	lsls	r1, r2
 8001cae:	000a      	movs	r2, r1
 8001cb0:	43d2      	mvns	r2, r2
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	22ff      	movs	r2, #255	@ 0xff
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	4003      	ands	r3, r0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ccc:	4809      	ldr	r0, [pc, #36]	@ (8001cf4 <__NVIC_SetPriority+0xd8>)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	001c      	movs	r4, r3
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	4023      	ands	r3, r4
 8001cd8:	3b08      	subs	r3, #8
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	3306      	adds	r3, #6
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	18c3      	adds	r3, r0, r3
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	46c0      	nop			@ (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b003      	add	sp, #12
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	045b      	lsls	r3, r3, #17
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d301      	bcc.n	8001d10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e010      	b.n	8001d32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <SysTick_Config+0x44>)
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	3a01      	subs	r2, #1
 8001d16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff ff7c 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <SysTick_Config+0x44>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <SysTick_Config+0x44>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	1c02      	adds	r2, r0, #0
 8001d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	0002      	movs	r2, r0
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ff33 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff ffaf 	bl	8001cf8 <SysTick_Config>
 8001d9a:	0003      	movs	r3, r0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e14f      	b.n	8002054 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4091      	lsls	r1, r2
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d100      	bne.n	8001dcc <HAL_GPIO_Init+0x28>
 8001dca:	e140      	b.n	800204e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	409a      	lsls	r2, r3
 8001df2:	0013      	movs	r3, r2
 8001df4:	43da      	mvns	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	0013      	movs	r3, r2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	2201      	movs	r2, #1
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	43da      	mvns	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	58d3      	ldr	r3, [r2, r3]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2107      	movs	r1, #7
 8001eba:	400b      	ands	r3, r1
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	6939      	ldr	r1, [r7, #16]
 8001ed4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	23c0      	movs	r3, #192	@ 0xc0
 8001f10:	029b      	lsls	r3, r3, #10
 8001f12:	4013      	ands	r3, r2
 8001f14:	d100      	bne.n	8001f18 <HAL_GPIO_Init+0x174>
 8001f16:	e09a      	b.n	800204e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f18:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_GPIO_Init+0x2c8>)
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <HAL_GPIO_Init+0x2c8>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	4b51      	ldr	r3, [pc, #324]	@ (800206c <HAL_GPIO_Init+0x2c8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f30:	4a4f      	ldr	r2, [pc, #316]	@ (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	589b      	ldr	r3, [r3, r2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2203      	movs	r2, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	2390      	movs	r3, #144	@ 0x90
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a44      	ldr	r2, [pc, #272]	@ (8002074 <HAL_GPIO_Init+0x2d0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <HAL_GPIO_Init+0x1de>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <HAL_GPIO_Init+0x2d4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x1da>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a42      	ldr	r2, [pc, #264]	@ (800207c <HAL_GPIO_Init+0x2d8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_GPIO_Init+0x1d6>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f86:	2300      	movs	r3, #0
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	@ (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	035b      	lsls	r3, r3, #13
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fca:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	039b      	lsls	r3, r3, #14
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43da      	mvns	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800201e:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43da      	mvns	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	4013      	ands	r3, r2
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	40da      	lsrs	r2, r3
 800205c:	1e13      	subs	r3, r2, #0
 800205e:	d000      	beq.n	8002062 <HAL_GPIO_Init+0x2be>
 8002060:	e6a8      	b.n	8001db4 <HAL_GPIO_Init+0x10>
  } 
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b006      	add	sp, #24
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	48000400 	.word	0x48000400
 8002078:	48000800 	.word	0x48000800
 800207c:	48000c00 	.word	0x48000c00
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	0008      	movs	r0, r1
 800208e:	0011      	movs	r1, r2
 8002090:	1cbb      	adds	r3, r7, #2
 8002092:	1c02      	adds	r2, r0, #0
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	1c7b      	adds	r3, r7, #1
 8002098:	1c0a      	adds	r2, r1, #0
 800209a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209c:	1c7b      	adds	r3, r7, #1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020a4:	1cbb      	adds	r3, r7, #2
 80020a6:	881a      	ldrh	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ae:	1cbb      	adds	r3, r7, #2
 80020b0:	881a      	ldrh	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e301      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d100      	bne.n	80020de <HAL_RCC_OscConfig+0x1e>
 80020dc:	e08d      	b.n	80021fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020de:	4bc3      	ldr	r3, [pc, #780]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	220c      	movs	r2, #12
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d00e      	beq.n	8002108 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ea:	4bc0      	ldr	r3, [pc, #768]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	220c      	movs	r2, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x64>
 80020f6:	4bbd      	ldr	r3, [pc, #756]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	025b      	lsls	r3, r3, #9
 80020fe:	401a      	ands	r2, r3
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	429a      	cmp	r2, r3
 8002106:	d10d      	bne.n	8002124 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4bb8      	ldr	r3, [pc, #736]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	d100      	bne.n	8002116 <HAL_RCC_OscConfig+0x56>
 8002114:	e070      	b.n	80021f8 <HAL_RCC_OscConfig+0x138>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d000      	beq.n	8002120 <HAL_RCC_OscConfig+0x60>
 800211e:	e06b      	b.n	80021f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e2d8      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x7c>
 800212c:	4baf      	ldr	r3, [pc, #700]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4bae      	ldr	r3, [pc, #696]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	0249      	lsls	r1, r1, #9
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e02f      	b.n	800219c <HAL_RCC_OscConfig+0xdc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x9e>
 8002144:	4ba9      	ldr	r3, [pc, #676]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4ba8      	ldr	r3, [pc, #672]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800214a:	49a9      	ldr	r1, [pc, #676]	@ (80023f0 <HAL_RCC_OscConfig+0x330>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	4ba6      	ldr	r3, [pc, #664]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4ba5      	ldr	r3, [pc, #660]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002156:	49a7      	ldr	r1, [pc, #668]	@ (80023f4 <HAL_RCC_OscConfig+0x334>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e01e      	b.n	800219c <HAL_RCC_OscConfig+0xdc>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10e      	bne.n	8002184 <HAL_RCC_OscConfig+0xc4>
 8002166:	4ba1      	ldr	r3, [pc, #644]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4ba0      	ldr	r3, [pc, #640]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	02c9      	lsls	r1, r1, #11
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4b9d      	ldr	r3, [pc, #628]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b9c      	ldr	r3, [pc, #624]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xdc>
 8002184:	4b99      	ldr	r3, [pc, #612]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b98      	ldr	r3, [pc, #608]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800218a:	4999      	ldr	r1, [pc, #612]	@ (80023f0 <HAL_RCC_OscConfig+0x330>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4b96      	ldr	r3, [pc, #600]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b95      	ldr	r3, [pc, #596]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002196:	4997      	ldr	r1, [pc, #604]	@ (80023f4 <HAL_RCC_OscConfig+0x334>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fcf2 	bl	8001b8c <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ae:	f7ff fced 	bl	8001b8c <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	@ 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e28a      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c0:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0xee>
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fcdd 	bl	8001b8c <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fcd8 	bl	8001b8c <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e275      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b80      	ldr	r3, [pc, #512]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x118>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x146>
 8002204:	e069      	b.n	80022da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002206:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	220c      	movs	r2, #12
 800220c:	4013      	ands	r3, r2
 800220e:	d00b      	beq.n	8002228 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002210:	4b76      	ldr	r3, [pc, #472]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	220c      	movs	r2, #12
 8002216:	4013      	ands	r3, r2
 8002218:	2b08      	cmp	r3, #8
 800221a:	d11c      	bne.n	8002256 <HAL_RCC_OscConfig+0x196>
 800221c:	4b73      	ldr	r3, [pc, #460]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	4013      	ands	r3, r2
 8002226:	d116      	bne.n	8002256 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002228:	4b70      	ldr	r3, [pc, #448]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x17e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e24b      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b6b      	ldr	r3, [pc, #428]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22f8      	movs	r2, #248	@ 0xf8
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00da      	lsls	r2, r3, #3
 800224e:	4b67      	ldr	r3, [pc, #412]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002254:	e041      	b.n	80022da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d024      	beq.n	80022a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225e:	4b63      	ldr	r3, [pc, #396]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b62      	ldr	r3, [pc, #392]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fc8f 	bl	8001b8c <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fc8a 	bl	8001b8c <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e227      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d0f1      	beq.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b56      	ldr	r3, [pc, #344]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22f8      	movs	r2, #248	@ 0xf8
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00da      	lsls	r2, r3, #3
 80022a0:	4b52      	ldr	r3, [pc, #328]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e018      	b.n	80022da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a8:	4b50      	ldr	r3, [pc, #320]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b4f      	ldr	r3, [pc, #316]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	438a      	bics	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fc6a 	bl	8001b8c <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fc65 	bl	8001b8c <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e202      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d0:	4b46      	ldr	r3, [pc, #280]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d1f1      	bne.n	80022be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	4013      	ands	r3, r2
 80022e2:	d036      	beq.n	8002352 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d019      	beq.n	8002320 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ec:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f0:	4b3e      	ldr	r3, [pc, #248]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff fc48 	bl	8001b8c <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff fc43 	bl	8001b8c <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1e0      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d0f1      	beq.n	8002302 <HAL_RCC_OscConfig+0x242>
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b32      	ldr	r3, [pc, #200]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002324:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7ff fc2e 	bl	8001b8c <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff fc29 	bl	8001b8c <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1c6      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	2202      	movs	r2, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d1f1      	bne.n	8002336 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	4013      	ands	r3, r2
 800235a:	d100      	bne.n	800235e <HAL_RCC_OscConfig+0x29e>
 800235c:	e0b4      	b.n	80024c8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	201f      	movs	r0, #31
 8002360:	183b      	adds	r3, r7, r0
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	055b      	lsls	r3, r3, #21
 800236e:	4013      	ands	r3, r2
 8002370:	d110      	bne.n	8002394 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002378:	2180      	movs	r1, #128	@ 0x80
 800237a:	0549      	lsls	r1, r1, #21
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	055b      	lsls	r3, r3, #21
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800238e:	183b      	adds	r3, r7, r0
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d11a      	bne.n	80023d6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a0:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_RCC_OscConfig+0x338>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HAL_RCC_OscConfig+0x338>)
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	0049      	lsls	r1, r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7ff fbed 	bl	8001b8c <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7ff fbe8 	bl	8001b8c <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e185      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_OscConfig+0x338>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10e      	bne.n	80023fc <HAL_RCC_OscConfig+0x33c>
 80023de:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	4b02      	ldr	r3, [pc, #8]	@ (80023ec <HAL_RCC_OscConfig+0x32c>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	e035      	b.n	8002458 <HAL_RCC_OscConfig+0x398>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	fffeffff 	.word	0xfffeffff
 80023f4:	fffbffff 	.word	0xfffbffff
 80023f8:	40007000 	.word	0x40007000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x35e>
 8002404:	4bb6      	ldr	r3, [pc, #728]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4bb5      	ldr	r3, [pc, #724]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800240a:	2101      	movs	r1, #1
 800240c:	438a      	bics	r2, r1
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	4bb3      	ldr	r3, [pc, #716]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	4bb2      	ldr	r3, [pc, #712]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002416:	2104      	movs	r1, #4
 8002418:	438a      	bics	r2, r1
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x398>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x380>
 8002426:	4bae      	ldr	r3, [pc, #696]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	4bad      	ldr	r3, [pc, #692]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800242c:	2104      	movs	r1, #4
 800242e:	430a      	orrs	r2, r1
 8002430:	621a      	str	r2, [r3, #32]
 8002432:	4bab      	ldr	r3, [pc, #684]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	4baa      	ldr	r3, [pc, #680]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x398>
 8002440:	4ba7      	ldr	r3, [pc, #668]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	4ba6      	ldr	r3, [pc, #664]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002446:	2101      	movs	r1, #1
 8002448:	438a      	bics	r2, r1
 800244a:	621a      	str	r2, [r3, #32]
 800244c:	4ba4      	ldr	r3, [pc, #656]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	4ba3      	ldr	r3, [pc, #652]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002452:	2104      	movs	r1, #4
 8002454:	438a      	bics	r2, r1
 8002456:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d014      	beq.n	800248a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff fb94 	bl	8001b8c <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e009      	b.n	800247e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff fb8f 	bl	8001b8c <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a9b      	ldr	r2, [pc, #620]	@ (80026e4 <HAL_RCC_OscConfig+0x624>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e12b      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	4b98      	ldr	r3, [pc, #608]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2202      	movs	r2, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x3aa>
 8002488:	e013      	b.n	80024b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff fb7f 	bl	8001b8c <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	e009      	b.n	80024a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7ff fb7a 	bl	8001b8c <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	4a91      	ldr	r2, [pc, #580]	@ (80026e4 <HAL_RCC_OscConfig+0x624>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e116      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b8d      	ldr	r3, [pc, #564]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b88      	ldr	r3, [pc, #544]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	4b87      	ldr	r3, [pc, #540]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024c2:	4989      	ldr	r1, [pc, #548]	@ (80026e8 <HAL_RCC_OscConfig+0x628>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	4013      	ands	r3, r2
 80024d0:	d063      	beq.n	800259a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d12a      	bne.n	8002530 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024da:	4b81      	ldr	r3, [pc, #516]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024de:	4b80      	ldr	r3, [pc, #512]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024e0:	2104      	movs	r1, #4
 80024e2:	430a      	orrs	r2, r1
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024e6:	4b7e      	ldr	r3, [pc, #504]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ea:	4b7d      	ldr	r3, [pc, #500]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb4b 	bl	8001b8c <HAL_GetTick>
 80024f6:	0003      	movs	r3, r0
 80024f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024fc:	f7ff fb46 	bl	8001b8c <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0e3      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800250e:	4b74      	ldr	r3, [pc, #464]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	d0f1      	beq.n	80024fc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002518:	4b71      	ldr	r3, [pc, #452]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251c:	22f8      	movs	r2, #248	@ 0xf8
 800251e:	4393      	bics	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	00da      	lsls	r2, r3, #3
 8002528:	4b6d      	ldr	r3, [pc, #436]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800252a:	430a      	orrs	r2, r1
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34
 800252e:	e034      	b.n	800259a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	3305      	adds	r3, #5
 8002536:	d111      	bne.n	800255c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002538:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800253e:	2104      	movs	r1, #4
 8002540:	438a      	bics	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002544:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002548:	22f8      	movs	r2, #248	@ 0xf8
 800254a:	4393      	bics	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	00da      	lsls	r2, r3, #3
 8002554:	4b62      	ldr	r3, [pc, #392]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002556:	430a      	orrs	r2, r1
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34
 800255a:	e01e      	b.n	800259a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800255c:	4b60      	ldr	r3, [pc, #384]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800255e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002560:	4b5f      	ldr	r3, [pc, #380]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002562:	2104      	movs	r1, #4
 8002564:	430a      	orrs	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002568:	4b5d      	ldr	r3, [pc, #372]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256c:	4b5c      	ldr	r3, [pc, #368]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7ff fb0a 	bl	8001b8c <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800257e:	f7ff fb05 	bl	8001b8c <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0a2      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d1f1      	bne.n	800257e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d100      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4e4>
 80025a2:	e097      	b.n	80026d4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	220c      	movs	r2, #12
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d100      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4f2>
 80025b0:	e06b      	b.n	800268a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d14c      	bne.n	8002654 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025c0:	494a      	ldr	r1, [pc, #296]	@ (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7ff fae1 	bl	8001b8c <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fadc 	bl	8001b8c <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e079      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	049b      	lsls	r3, r3, #18
 80025ea:	4013      	ands	r3, r2
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ee:	4b3c      	ldr	r3, [pc, #240]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	220f      	movs	r2, #15
 80025f4:	4393      	bics	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fc:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a3a      	ldr	r2, [pc, #232]	@ (80026f0 <HAL_RCC_OscConfig+0x630>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	431a      	orrs	r2, r3
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	0449      	lsls	r1, r1, #17
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff faaf 	bl	8001b8c <HAL_GetTick>
 800262e:	0003      	movs	r3, r0
 8002630:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff faaa 	bl	8001b8c <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e047      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	049b      	lsls	r3, r3, #18
 800264e:	4013      	ands	r3, r2
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x574>
 8002652:	e03f      	b.n	80026d4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800265a:	4924      	ldr	r1, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x62c>)
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fa94 	bl	8001b8c <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff fa8f 	bl	8001b8c <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e02c      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	049b      	lsls	r3, r3, #18
 8002684:	4013      	ands	r3, r2
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x5aa>
 8002688:	e024      	b.n	80026d4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e01f      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800269c:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_RCC_OscConfig+0x620>)
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	401a      	ands	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10e      	bne.n	80026d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	220f      	movs	r2, #15
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	23f0      	movs	r3, #240	@ 0xf0
 80026c4:	039b      	lsls	r3, r3, #14
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b008      	add	sp, #32
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	40021000 	.word	0x40021000
 80026e4:	00001388 	.word	0x00001388
 80026e8:	efffffff 	.word	0xefffffff
 80026ec:	feffffff 	.word	0xfeffffff
 80026f0:	ffc2ffff 	.word	0xffc2ffff

080026f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b3      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d911      	bls.n	800273a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b58      	ldr	r3, [pc, #352]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	4393      	bics	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	4b55      	ldr	r3, [pc, #340]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	4013      	ands	r3, r2
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e09a      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d015      	beq.n	8002770 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2204      	movs	r2, #4
 800274a:	4013      	ands	r3, r2
 800274c:	d006      	beq.n	800275c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800274e:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 8002754:	21e0      	movs	r1, #224	@ 0xe0
 8002756:	00c9      	lsls	r1, r1, #3
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	22f0      	movs	r2, #240	@ 0xf0
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	4013      	ands	r3, r2
 800278c:	d114      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06e      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b38      	ldr	r3, [pc, #224]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	049b      	lsls	r3, r3, #18
 80027a2:	4013      	ands	r3, r2
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e062      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e05b      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b8:	4b30      	ldr	r3, [pc, #192]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	4393      	bics	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7ff f9de 	bl	8001b8c <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d4:	e009      	b.n	80027ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d6:	f7ff f9d9 	bl	8001b8c <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <HAL_RCC_ClockConfig+0x18c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e042      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	220c      	movs	r2, #12
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1ec      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d211      	bcs.n	800282e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <HAL_RCC_ClockConfig+0x184>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e020      	b.n	8002870 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2204      	movs	r2, #4
 8002834:	4013      	ands	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <HAL_RCC_ClockConfig+0x190>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800284c:	f000 f820 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002850:	0001      	movs	r1, r0
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x188>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	220f      	movs	r2, #15
 800285a:	4013      	ands	r3, r2
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_RCC_ClockConfig+0x194>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	000a      	movs	r2, r1
 8002862:	40da      	lsrs	r2, r3
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_ClockConfig+0x198>)
 8002866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002868:	2003      	movs	r0, #3
 800286a:	f7ff f949 	bl	8001b00 <HAL_InitTick>
  
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	00001388 	.word	0x00001388
 8002884:	fffff8ff 	.word	0xfffff8ff
 8002888:	08003114 	.word	0x08003114
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028aa:	4b20      	ldr	r3, [pc, #128]	@ (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	220c      	movs	r2, #12
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e02c      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e02c      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	220f      	movs	r2, #15
 80028cc:	4013      	ands	r3, r2
 80028ce:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028d4:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	220f      	movs	r2, #15
 80028da:	4013      	ands	r3, r2
 80028dc:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa8>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	4013      	ands	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4810      	ldr	r0, [pc, #64]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f0:	f7fd fc0a 	bl	8000108 <__udivsi3>
 80028f4:	0003      	movs	r3, r0
 80028f6:	001a      	movs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4353      	muls	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e009      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	000a      	movs	r2, r1
 8002904:	0152      	lsls	r2, r2, #5
 8002906:	1a52      	subs	r2, r2, r1
 8002908:	0193      	lsls	r3, r2, #6
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	185b      	adds	r3, r3, r1
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800291a:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 800291c:	613b      	str	r3, [r7, #16]
      break;
 800291e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002920:	693b      	ldr	r3, [r7, #16]
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b006      	add	sp, #24
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	08003124 	.word	0x08003124
 8002938:	08003134 	.word	0x08003134

0800293c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0a8      	b.n	8002aa0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2382      	movs	r3, #130	@ 0x82
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	429a      	cmp	r2, r3
 8002960:	d009      	beq.n	8002976 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
 8002968:	e005      	b.n	8002976 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	225d      	movs	r2, #93	@ 0x5d
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	225c      	movs	r2, #92	@ 0x5c
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff f80c 	bl	80019b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	225d      	movs	r2, #93	@ 0x5d
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2140      	movs	r1, #64	@ 0x40
 80029ac:	438a      	bics	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d902      	bls.n	80029c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e002      	b.n	80029c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	015b      	lsls	r3, r3, #5
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	23f0      	movs	r3, #240	@ 0xf0
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d008      	beq.n	80029e6 <HAL_SPI_Init+0xaa>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	23e0      	movs	r3, #224	@ 0xe0
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	429a      	cmp	r2, r3
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	2382      	movs	r3, #130	@ 0x82
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	2384      	movs	r3, #132	@ 0x84
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	400b      	ands	r3, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2102      	movs	r1, #2
 8002a02:	400b      	ands	r3, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	400b      	ands	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2138      	movs	r1, #56	@ 0x38
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	2180      	movs	r1, #128	@ 0x80
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	0011      	movs	r1, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	2110      	movs	r1, #16
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	400b      	ands	r3, r1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	23f0      	movs	r3, #240	@ 0xf0
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	0011      	movs	r1, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4907      	ldr	r1, [pc, #28]	@ (8002aa8 <HAL_SPI_Init+0x16c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	225d      	movs	r2, #93	@ 0x5d
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffff7ff 	.word	0xfffff7ff

08002aac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	225c      	movs	r2, #92	@ 0x5c
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Transmit+0x26>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e147      	b.n	8002d62 <HAL_SPI_Transmit+0x2b6>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	225c      	movs	r2, #92	@ 0x5c
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ada:	f7ff f857 	bl	8001b8c <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ae2:	2316      	movs	r3, #22
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	1dba      	adds	r2, r7, #6
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	225d      	movs	r2, #93	@ 0x5d
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d004      	beq.n	8002b02 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002af8:	231f      	movs	r3, #31
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b00:	e128      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_SPI_Transmit+0x64>
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b10:	231f      	movs	r3, #31
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b18:	e11c      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	225d      	movs	r2, #93	@ 0x5d
 8002b1e:	2103      	movs	r1, #3
 8002b20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1dba      	adds	r2, r7, #6
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1dba      	adds	r2, r7, #6
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2244      	movs	r2, #68	@ 0x44
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2246      	movs	r2, #70	@ 0x46
 8002b50:	2100      	movs	r1, #0
 8002b52:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d110      	bne.n	8002b8e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2180      	movs	r1, #128	@ 0x80
 8002b88:	01c9      	lsls	r1, r1, #7
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d007      	beq.n	8002bac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2140      	movs	r1, #64	@ 0x40
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	23e0      	movs	r3, #224	@ 0xe0
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d952      	bls.n	8002c5e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_SPI_Transmit+0x11e>
 8002bc0:	2316      	movs	r3, #22
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d143      	bne.n	8002c52 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bee:	e030      	b.n	8002c52 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d112      	bne.n	8002c24 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c22:	e016      	b.n	8002c52 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c24:	f7fe ffb2 	bl	8001b8c <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d802      	bhi.n	8002c3a <HAL_SPI_Transmit+0x18e>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_Transmit+0x194>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2203      	movs	r2, #3
 8002c46:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	225d      	movs	r2, #93	@ 0x5d
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c50:	e080      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1c9      	bne.n	8002bf0 <HAL_SPI_Transmit+0x144>
 8002c5c:	e053      	b.n	8002d06 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_SPI_Transmit+0x1c4>
 8002c66:	2316      	movs	r3, #22
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d145      	bne.n	8002cfc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002c96:	e031      	b.n	8002cfc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d113      	bne.n	8002cce <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ccc:	e016      	b.n	8002cfc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cce:	f7fe ff5d 	bl	8001b8c <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_SPI_Transmit+0x238>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x23e>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	225d      	movs	r2, #93	@ 0x5d
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
          goto error;
 8002cfa:	e02b      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1c8      	bne.n	8002c98 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 f95d 	bl	8002fcc <SPI_EndRxTxTransaction>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002d42:	231f      	movs	r3, #31
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	225d      	movs	r2, #93	@ 0x5d
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	225c      	movs	r2, #92	@ 0x5c
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b008      	add	sp, #32
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d7c:	f7fe ff06 	bl	8001b8c <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d8c:	f7fe fefe 	bl	8001b8c <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d94:	4b3a      	ldr	r3, [pc, #232]	@ (8002e80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	015b      	lsls	r3, r3, #5
 8002d9a:	0d1b      	lsrs	r3, r3, #20
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	4353      	muls	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da2:	e058      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	d055      	beq.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002daa:	f7fe feef 	bl	8001b8c <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d902      	bls.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d142      	bne.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	21e0      	movs	r1, #224	@ 0xe0
 8002dcc:	438a      	bics	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	2382      	movs	r3, #130	@ 0x82
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d113      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d005      	beq.n	8002df4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2140      	movs	r1, #64	@ 0x40
 8002e00:	438a      	bics	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	019b      	lsls	r3, r3, #6
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d110      	bne.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	491a      	ldr	r1, [pc, #104]	@ (8002e84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	0189      	lsls	r1, r1, #6
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	225d      	movs	r2, #93	@ 0x5d
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	225c      	movs	r2, #92	@ 0x5c
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e017      	b.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	425a      	negs	r2, r3
 8002e66:	4153      	adcs	r3, r2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d197      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b008      	add	sp, #32
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	20000000 	.word	0x20000000
 8002e84:	ffffdfff 	.word	0xffffdfff

08002e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e96:	2317      	movs	r3, #23
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e9e:	f7fe fe75 	bl	8001b8c <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002eae:	f7fe fe6d 	bl	8001b8c <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	0013      	movs	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	00da      	lsls	r2, r3, #3
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	0d1b      	lsrs	r3, r3, #20
 8002ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed0:	4353      	muls	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ed4:	e068      	b.n	8002fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	23c0      	movs	r3, #192	@ 0xc0
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10a      	bne.n	8002ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	2117      	movs	r1, #23
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	d055      	beq.n	8002fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002efc:	f7fe fe46 	bl	8001b8c <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d902      	bls.n	8002f12 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d142      	bne.n	8002f98 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	21e0      	movs	r1, #224	@ 0xe0
 8002f1e:	438a      	bics	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	2382      	movs	r3, #130	@ 0x82
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d113      	bne.n	8002f56 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d005      	beq.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d107      	bne.n	8002f56 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2140      	movs	r1, #64	@ 0x40
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d110      	bne.n	8002f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2180      	movs	r1, #128	@ 0x80
 8002f7e:	0189      	lsls	r1, r1, #6
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	225d      	movs	r2, #93	@ 0x5d
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	225c      	movs	r2, #92	@ 0x5c
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e010      	b.n	8002fba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d18e      	bne.n	8002ed6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b00a      	add	sp, #40	@ 0x28
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	ffffdfff 	.word	0xffffdfff

08002fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	23c0      	movs	r3, #192	@ 0xc0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f7ff ff4e 	bl	8002e88 <SPI_WaitFifoStateUntilTimeout>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d007      	beq.n	8003000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e027      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	0013      	movs	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	2180      	movs	r1, #128	@ 0x80
 800300e:	f7ff fead 	bl	8002d6c <SPI_WaitFlagStateUntilTimeout>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d007      	beq.n	8003026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301a:	2220      	movs	r2, #32
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e014      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	23c0      	movs	r3, #192	@ 0xc0
 800302a:	00d9      	lsls	r1, r3, #3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	0013      	movs	r3, r2
 8003034:	2200      	movs	r2, #0
 8003036:	f7ff ff27 	bl	8002e88 <SPI_WaitFifoStateUntilTimeout>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d007      	beq.n	800304e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	2220      	movs	r2, #32
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e000      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b004      	add	sp, #16
 8003056:	bd80      	pop	{r7, pc}

08003058 <memset>:
 8003058:	0003      	movs	r3, r0
 800305a:	1882      	adds	r2, r0, r2
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	7019      	strb	r1, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2600      	movs	r6, #0
 800306c:	4c0c      	ldr	r4, [pc, #48]	@ (80030a0 <__libc_init_array+0x38>)
 800306e:	4d0d      	ldr	r5, [pc, #52]	@ (80030a4 <__libc_init_array+0x3c>)
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	2600      	movs	r6, #0
 800307a:	f000 f819 	bl	80030b0 <_init>
 800307e:	4c0a      	ldr	r4, [pc, #40]	@ (80030a8 <__libc_init_array+0x40>)
 8003080:	4d0a      	ldr	r5, [pc, #40]	@ (80030ac <__libc_init_array+0x44>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	00b3      	lsls	r3, r6, #2
 800308e:	58eb      	ldr	r3, [r5, r3]
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	00b3      	lsls	r3, r6, #2
 8003098:	58eb      	ldr	r3, [r5, r3]
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	08003144 	.word	0x08003144
 80030a4:	08003144 	.word	0x08003144
 80030a8:	08003148 	.word	0x08003148
 80030ac:	08003144 	.word	0x08003144

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr
