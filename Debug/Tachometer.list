
Tachometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002f30  08002f30  00003f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f6c  08002f6c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f6c  08002f6c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f6c  08002f6c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f6c  08002f6c  00003f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f70  08002f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f74  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08002f80  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002f80  00004130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000987a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001891  00000000  00000000  0000d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000873  00000000  00000000  0000fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f1d2  00000000  00000000  00010483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0bd  00000000  00000000  0001f655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e1c0  00000000  00000000  0002b712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000898d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000271c  00000000  00000000  00089918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0008c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f18 	.word	0x08002f18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f18 	.word	0x08002f18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcb0 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f840 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9da 	bl	80005e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f886 	bl	8000340 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000234:	f000 f97a 	bl	800052c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000238:	f000 f8c0 	bl	80003bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2007      	movs	r0, #7
 8000242:	f000 fdd5 	bl	8000df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000246:	2007      	movs	r0, #7
 8000248:	f000 fde7 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800024c:	2010      	movs	r0, #16
 800024e:	f000 fde4 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim3);
 8000252:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <main+0x80>)
 8000254:	0018      	movs	r0, r3
 8000256:	f001 ffa7 	bl	80021a8 <HAL_TIM_Base_Start_IT>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); OE = 0, switch on all of register (уже есть в инициализации)
  Test_Segments();
 800025a:	f000 faed 	bl	8000838 <Test_Segments>
//  Test_Segments_2();
//  Start_Test_Signal();

  // Инициализация дисплея (все нули)
  digits[0] = 0;
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <main+0x84>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
  digits[1] = 0;
 8000264:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <main+0x84>)
 8000266:	2200      	movs	r2, #0
 8000268:	705a      	strb	r2, [r3, #1]
  digits[2] = 0;
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <main+0x84>)
 800026c:	2200      	movs	r2, #0
 800026e:	709a      	strb	r2, [r3, #2]
  digits[3] = 0;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <main+0x84>)
 8000272:	2200      	movs	r2, #0
 8000274:	70da      	strb	r2, [r3, #3]
  Update_Display();
 8000276:	f000 fa19 	bl	80006ac <Update_Display>
  HAL_Delay(2000);
 800027a:	23fa      	movs	r3, #250	@ 0xfa
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fce6 	bl	8000c50 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (display_updated) {
 8000284:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <main+0x88>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	2b00      	cmp	r3, #0
 800028c:	d004      	beq.n	8000298 <main+0x78>
		  Update_Display();
 800028e:	f000 fa0d 	bl	80006ac <Update_Display>
		  display_updated = 0;
 8000292:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <main+0x88>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(200);
 8000298:	20c8      	movs	r0, #200	@ 0xc8
 800029a:	f000 fcd9 	bl	8000c50 <HAL_Delay>
	  if (display_updated) {
 800029e:	e7f1      	b.n	8000284 <main+0x64>
 80002a0:	200000d4 	.word	0x200000d4
 80002a4:	20000124 	.word	0x20000124
 80002a8:	20000128 	.word	0x20000128

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b091      	sub	sp, #68	@ 0x44
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2410      	movs	r4, #16
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2330      	movs	r3, #48	@ 0x30
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 fdff 	bl	8002ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	003b      	movs	r3, r7
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f002 fdf8 	bl	8002ec0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	22a0      	movs	r2, #160	@ 0xa0
 80002f4:	0392      	lsls	r2, r2, #14
 80002f6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f000 ff35 	bl	8001170 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800030a:	f000 faf5 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	003b      	movs	r3, r7
 8000310:	2207      	movs	r2, #7
 8000312:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	003b      	movs	r3, r7
 8000316:	2202      	movs	r2, #2
 8000318:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	003b      	movs	r3, r7
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	003b      	movs	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	2101      	movs	r1, #1
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fa3a 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000334:	f000 fae0 	bl	80008f8 <Error_Handler>
  }
}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b011      	add	sp, #68	@ 0x44
 800033e:	bd90      	pop	{r4, r7, pc}

08000340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	@ (80003b8 <MX_SPI1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800034c:	2282      	movs	r2, #130	@ 0x82
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800035a:	22e0      	movs	r2, #224	@ 0xe0
 800035c:	00d2      	lsls	r2, r2, #3
 800035e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000360:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000366:	4b13      	ldr	r3, [pc, #76]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800036e:	2280      	movs	r2, #128	@ 0x80
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000376:	2220      	movs	r2, #32
 8000378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800038e:	2207      	movs	r2, #7
 8000390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_SPI1_Init+0x74>)
 800039a:	2208      	movs	r2, #8
 800039c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800039e:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <MX_SPI1_Init+0x74>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fb23 	bl	80019ec <HAL_SPI_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 faa5 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40013000 	.word	0x40013000

080003bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b096      	sub	sp, #88	@ 0x58
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	2348      	movs	r3, #72	@ 0x48
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fd77 	bl	8002ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	2340      	movs	r3, #64	@ 0x40
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2308      	movs	r3, #8
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fd6f 	bl	8002ec0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	2324      	movs	r3, #36	@ 0x24
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	231c      	movs	r3, #28
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 fd67 	bl	8002ec0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	2320      	movs	r3, #32
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f002 fd60 	bl	8002ec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000400:	4b46      	ldr	r3, [pc, #280]	@ (800051c <MX_TIM1_Init+0x160>)
 8000402:	4a47      	ldr	r2, [pc, #284]	@ (8000520 <MX_TIM1_Init+0x164>)
 8000404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4799;
 8000406:	4b45      	ldr	r3, [pc, #276]	@ (800051c <MX_TIM1_Init+0x160>)
 8000408:	4a46      	ldr	r2, [pc, #280]	@ (8000524 <MX_TIM1_Init+0x168>)
 800040a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b43      	ldr	r3, [pc, #268]	@ (800051c <MX_TIM1_Init+0x160>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000412:	4b42      	ldr	r3, [pc, #264]	@ (800051c <MX_TIM1_Init+0x160>)
 8000414:	4a44      	ldr	r2, [pc, #272]	@ (8000528 <MX_TIM1_Init+0x16c>)
 8000416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b40      	ldr	r3, [pc, #256]	@ (800051c <MX_TIM1_Init+0x160>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041e:	4b3f      	ldr	r3, [pc, #252]	@ (800051c <MX_TIM1_Init+0x160>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000424:	4b3d      	ldr	r3, [pc, #244]	@ (800051c <MX_TIM1_Init+0x160>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800042a:	4b3c      	ldr	r3, [pc, #240]	@ (800051c <MX_TIM1_Init+0x160>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fe6b 	bl	8002108 <HAL_TIM_Base_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000436:	f000 fa5f 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043a:	2148      	movs	r1, #72	@ 0x48
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2280      	movs	r2, #128	@ 0x80
 8000440:	0152      	lsls	r2, r2, #5
 8000442:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000444:	187a      	adds	r2, r7, r1
 8000446:	4b35      	ldr	r3, [pc, #212]	@ (800051c <MX_TIM1_Init+0x160>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f002 f890 	bl	8002570 <HAL_TIM_ConfigClockSource>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000454:	f000 fa50 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000458:	4b30      	ldr	r3, [pc, #192]	@ (800051c <MX_TIM1_Init+0x160>)
 800045a:	0018      	movs	r0, r3
 800045c:	f001 feea 	bl	8002234 <HAL_TIM_OC_Init>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000464:	f000 fa48 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2140      	movs	r1, #64	@ 0x40
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000476:	187a      	adds	r2, r7, r1
 8000478:	4b28      	ldr	r3, [pc, #160]	@ (800051c <MX_TIM1_Init+0x160>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fc5f 	bl	8002d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000486:	f000 fa37 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800048a:	2124      	movs	r1, #36	@ 0x24
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	22fa      	movs	r2, #250	@ 0xfa
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004b8:	1879      	adds	r1, r7, r1
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_TIM1_Init+0x160>)
 80004bc:	2208      	movs	r2, #8
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fffe 	bl	80024c0 <HAL_TIM_OC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80004c8:	f000 fa16 	bl	80008f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	0192      	lsls	r2, r2, #6
 80004f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f8:	1d3a      	adds	r2, r7, #4
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_TIM1_Init+0x160>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fc70 	bl	8002de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000508:	f000 f9f6 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <MX_TIM1_Init+0x160>)
 800050e:	0018      	movs	r0, r3
 8000510:	f000 faa4 	bl	8000a5c <HAL_TIM_MspPostInit>

}
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b016      	add	sp, #88	@ 0x58
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000008c 	.word	0x2000008c
 8000520:	40012c00 	.word	0x40012c00
 8000524:	000012bf 	.word	0x000012bf
 8000528:	000003e7 	.word	0x000003e7

0800052c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000532:	2308      	movs	r3, #8
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	0018      	movs	r0, r3
 8000538:	2310      	movs	r3, #16
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fcbf 	bl	8002ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	2308      	movs	r3, #8
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 fcb8 	bl	8002ec0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000550:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000552:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <MX_TIM3_Init+0xac>)
 8000554:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000558:	4a20      	ldr	r2, [pc, #128]	@ (80005dc <MX_TIM3_Init+0xb0>)
 800055a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055c:	4b1d      	ldr	r3, [pc, #116]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000562:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000564:	4a1e      	ldr	r2, [pc, #120]	@ (80005e0 <MX_TIM3_Init+0xb4>)
 8000566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000568:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fdc6 	bl	8002108 <HAL_TIM_Base_Init>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000580:	f000 f9ba 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000584:	2108      	movs	r1, #8
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	0152      	lsls	r2, r2, #5
 800058c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800058e:	187a      	adds	r2, r7, r1
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f001 ffeb 	bl	8002570 <HAL_TIM_ConfigClockSource>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800059e:	f000 f9ab 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ae:	003a      	movs	r2, r7
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <MX_TIM3_Init+0xa8>)
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fbc3 	bl	8002d40 <HAL_TIMEx_MasterConfigSynchronization>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005be:	f000 f99b 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // Настройка прерывания
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 fc12 	bl	8000df0 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM3_Init 2 */

}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b006      	add	sp, #24
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	40000400 	.word	0x40000400
 80005dc:	0000bb7f 	.word	0x0000bb7f
 80005e0:	000003e7 	.word	0x000003e7

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	@ 0x24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	240c      	movs	r4, #12
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 fc63 	bl	8002ec0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	02c9      	lsls	r1, r1, #11
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_GPIO_Init+0xc0>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	02db      	lsls	r3, r3, #11
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OE_Pin|Latch_Pin, GPIO_PIN_RESET);
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_GPIO_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	2103      	movs	r1, #3
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fd7b 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OE_Pin Latch_Pin */
  GPIO_InitStruct.Pin = OE_Pin|Latch_Pin;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2203      	movs	r2, #3
 8000642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	193b      	adds	r3, r7, r4
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0xc4>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 fbf9 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000662:	0021      	movs	r1, r4
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2288      	movs	r2, #136	@ 0x88
 800066e:	0352      	lsls	r2, r2, #13
 8000670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	187b      	adds	r3, r7, r1
 800067a:	4a0b      	ldr	r2, [pc, #44]	@ (80006a8 <MX_GPIO_Init+0xc4>)
 800067c:	0019      	movs	r1, r3
 800067e:	0010      	movs	r0, r2
 8000680:	f000 fbe8 	bl	8000e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_GPIO_Init+0xc4>)
 8000686:	2201      	movs	r2, #1
 8000688:	2102      	movs	r1, #2
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fd52 	bl	8001134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <MX_GPIO_Init+0xc4>)
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fd4c 	bl	8001134 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b009      	add	sp, #36	@ 0x24
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400

080006ac <Update_Display>:

/* USER CODE BEGIN 4 */

// Обновление индикаторов
void Update_Display(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
    uint8_t data[4];
    // Порядок передачи: LED1, LED2, LED3, LED4 (единицы → тысячи)
    data[0] = digit_pattern[digits[3]]; // Единицы (LED4)
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <Update_Display+0x74>)
 80006b4:	78db      	ldrb	r3, [r3, #3]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	001a      	movs	r2, r3
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <Update_Display+0x78>)
 80006bc:	5c9a      	ldrb	r2, [r3, r2]
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	701a      	strb	r2, [r3, #0]
    data[1] = digit_pattern[digits[2]]; // Десятки (LED3)
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <Update_Display+0x74>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <Update_Display+0x78>)
 80006cc:	5c9a      	ldrb	r2, [r3, r2]
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	705a      	strb	r2, [r3, #1]
    data[2] = digit_pattern[digits[1]]; // Сотни (LED2)
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <Update_Display+0x74>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	001a      	movs	r2, r3
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Update_Display+0x78>)
 80006dc:	5c9a      	ldrb	r2, [r3, r2]
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	709a      	strb	r2, [r3, #2]
    data[3] = digit_pattern[digits[0]]; // Тысячи (LED1)
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <Update_Display+0x74>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	001a      	movs	r2, r3
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <Update_Display+0x78>)
 80006ec:	5c9a      	ldrb	r2, [r3, r2]
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // LATCH = 0
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Update_Display+0x7c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	2102      	movs	r1, #2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fd1b 	bl	8001134 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 4, 100);               // Передача данных
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	480a      	ldr	r0, [pc, #40]	@ (800072c <Update_Display+0x80>)
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	2204      	movs	r2, #4
 8000706:	f001 fa29 	bl	8001b5c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // LATCH = 1
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <Update_Display+0x7c>)
 800070c:	2201      	movs	r2, #1
 800070e:	2102      	movs	r1, #2
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fd0f 	bl	8001134 <HAL_GPIO_WritePin>
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000124 	.word	0x20000124
 8000724:	08002f30 	.word	0x08002f30
 8000728:	48000400 	.word	0x48000400
 800072c:	20000028 	.word	0x20000028

08000730 <EXTI4_15_IRQHandler>:

// Обработчик прерывания для PB7
void EXTI4_15_IRQHandler(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) {
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <EXTI4_15_IRQHandler+0x24>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	4013      	ands	r3, r2
 800073c:	d007      	beq.n	800074e <EXTI4_15_IRQHandler+0x1e>
        pulse_count++;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <EXTI4_15_IRQHandler+0x28>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <EXTI4_15_IRQHandler+0x28>)
 8000746:	601a      	str	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <EXTI4_15_IRQHandler+0x24>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	615a      	str	r2, [r3, #20]
    }
}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40010400 	.word	0x40010400
 8000758:	2000011c 	.word	0x2000011c

0800075c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a2d      	ldr	r2, [pc, #180]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d153      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0xba>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076e:	b672      	cpsid	i
}
 8000770:	46c0      	nop			@ (mov r8, r8)
        // Расчет частоты в об/мин
    	__disable_irq();
        uint32_t current_count = pulse_count;  		// Фиксация значения
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	60fb      	str	r3, [r7, #12]
        pulse_count = 0;                       		// Сброс счетчика
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800077e:	b662      	cpsie	i
}
 8000780:	46c0      	nop			@ (mov r8, r8)
        __enable_irq();
        frequency_rpm = current_count * 60;
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	0013      	movs	r3, r2
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	001a      	movs	r2, r3
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000790:	601a      	str	r2, [r3, #0]

        // Ограничение значения (0-9999)
        frequency_rpm=(frequency_rpm>9999)?9999:frequency_rpm;
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d802      	bhi.n	80007a2 <HAL_TIM_PeriodElapsedCallback+0x46>
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	e000      	b.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0x48>
 80007a2:	4a22      	ldr	r2, [pc, #136]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007a6:	601a      	str	r2, [r3, #0]

        // Преобразование в цифры
        digits[0] = frequency_rpm / 1000;        	// Тысячи
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	22fa      	movs	r2, #250	@ 0xfa
 80007ae:	0091      	lsls	r1, r2, #2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80007bc:	701a      	strb	r2, [r3, #0]
        digits[1] = (frequency_rpm % 1000) / 100; 	// Сотни
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	22fa      	movs	r2, #250	@ 0xfa
 80007c4:	0091      	lsls	r1, r2, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd24 	bl	8000214 <__aeabi_uidivmod>
 80007cc:	000b      	movs	r3, r1
 80007ce:	2164      	movs	r1, #100	@ 0x64
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff fc99 	bl	8000108 <__udivsi3>
 80007d6:	0003      	movs	r3, r0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80007dc:	705a      	strb	r2, [r3, #1]
        digits[2] = (frequency_rpm % 100) / 10;   	// Десятки
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2164      	movs	r1, #100	@ 0x64
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fd15 	bl	8000214 <__aeabi_uidivmod>
 80007ea:	000b      	movs	r3, r1
 80007ec:	210a      	movs	r1, #10
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fc8a 	bl	8000108 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80007fa:	709a      	strb	r2, [r3, #2]
        digits[3] = frequency_rpm % 10;           	// Единицы
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	210a      	movs	r1, #10
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fd06 	bl	8000214 <__aeabi_uidivmod>
 8000808:	000b      	movs	r3, r1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800080e:	70da      	strb	r2, [r3, #3]

        display_updated = 1;                    	// Флаг обновления дисплея
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
    }
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	40000400 	.word	0x40000400
 8000824:	2000011c 	.word	0x2000011c
 8000828:	20000120 	.word	0x20000120
 800082c:	0000270f 	.word	0x0000270f
 8000830:	20000124 	.word	0x20000124
 8000834:	20000128 	.word	0x20000128

08000838 <Test_Segments>:

// Тест сегментов
void Test_Segments(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
    uint8_t test_data[4] = {0};
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]

    // Все сегменты выключены
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <Test_Segments+0xb8>)
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fc72 	bl	8001134 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 8000850:	0039      	movs	r1, r7
 8000852:	4828      	ldr	r0, [pc, #160]	@ (80008f4 <Test_Segments+0xbc>)
 8000854:	2364      	movs	r3, #100	@ 0x64
 8000856:	2204      	movs	r2, #4
 8000858:	f001 f980 	bl	8001b5c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <Test_Segments+0xb8>)
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fc66 	bl	8001134 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000868:	23fa      	movs	r3, #250	@ 0xfa
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f9ef 	bl	8000c50 <HAL_Delay>

    // Поочередное включение сегментов
    for(uint8_t seg = 0; seg < 8; seg++) {
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e031      	b.n	80008de <Test_Segments+0xa6>
        for(uint8_t i = 0; i < 4; i++) {
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e00d      	b.n	800089e <Test_Segments+0x66>
            test_data[i] = (1 << seg);
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	409a      	lsls	r2, r3
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2d1      	uxtb	r1, r2
 8000890:	003a      	movs	r2, r7
 8000892:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i = 0; i < 4; i++) {
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	3201      	adds	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d9ed      	bls.n	8000882 <Test_Segments+0x4a>
        }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <Test_Segments+0xb8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	2102      	movs	r1, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fc41 	bl	8001134 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 80008b2:	0039      	movs	r1, r7
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <Test_Segments+0xbc>)
 80008b6:	2364      	movs	r3, #100	@ 0x64
 80008b8:	2204      	movs	r2, #4
 80008ba:	f001 f94f 	bl	8001b5c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <Test_Segments+0xb8>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	2102      	movs	r1, #2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fc35 	bl	8001134 <HAL_GPIO_WritePin>

        HAL_Delay(500);
 80008ca:	23fa      	movs	r3, #250	@ 0xfa
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f9be 	bl	8000c50 <HAL_Delay>
    for(uint8_t seg = 0; seg < 8; seg++) {
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	3201      	adds	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	d9c9      	bls.n	800087a <Test_Segments+0x42>
    }
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	48000400 	.word	0x48000400
 80008f4:	20000028 	.word	0x20000028

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_MspInit+0x44>)
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_MspInit+0x44>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	619a      	str	r2, [r3, #24]
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <HAL_MspInit+0x44>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x44>)
 8000924:	69da      	ldr	r2, [r3, #28]
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_MspInit+0x44>)
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	0549      	lsls	r1, r1, #21
 800092c:	430a      	orrs	r2, r1
 800092e:	61da      	str	r2, [r3, #28]
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_MspInit+0x44>)
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08b      	sub	sp, #44	@ 0x2c
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2414      	movs	r4, #20
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 faae 	bl	8002ec0 <memset>
  if(hspi->Instance==SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d132      	bne.n	80009d4 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	0149      	lsls	r1, r1, #5
 8000978:	430a      	orrs	r2, r1
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	22e0      	movs	r2, #224	@ 0xe0
 80009ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2203      	movs	r2, #3
 80009be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	187a      	adds	r2, r7, r1
 80009c8:	2390      	movs	r3, #144	@ 0x90
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fa40 	bl	8000e54 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b00b      	add	sp, #44	@ 0x2c
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40013000 	.word	0x40013000
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_TIM_Base_MspInit+0x6c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10e      	bne.n	8000a14 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0109      	lsls	r1, r1, #4
 8000a00:	430a      	orrs	r2, r1
 8000a02:	619a      	str	r2, [r3, #24]
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a12:	e018      	b.n	8000a46 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_TIM_Base_MspInit+0x74>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d113      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 8000a24:	2102      	movs	r1, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	61da      	str	r2, [r3, #28]
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_TIM_Base_MspInit+0x70>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2010      	movs	r0, #16
 8000a3c:	f000 f9d8 	bl	8000df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a40:	2010      	movs	r0, #16
 8000a42:	f000 f9ea 	bl	8000e1a <HAL_NVIC_EnableIRQ>
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	40012c00 	.word	0x40012c00
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40000400 	.word	0x40000400

08000a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	240c      	movs	r4, #12
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f002 fa26 	bl	8002ec0 <memset>
  if(htim->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <HAL_TIM_MspPostInit+0x78>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d125      	bne.n	8000aca <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_TIM_MspPostInit+0x7c>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_TIM_MspPostInit+0x7c>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_TIM_MspPostInit+0x7c>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	00d2      	lsls	r2, r2, #3
 8000aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	187a      	adds	r2, r7, r1
 8000abe:	2390      	movs	r3, #144	@ 0x90
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 f9c5 	bl	8000e54 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b009      	add	sp, #36	@ 0x24
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f888 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <TIM3_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fbe4 	bl	80022e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	200000d4 	.word	0x200000d4

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b38:	f7ff fff6 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f002 f9b5 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fb5b 	bl	8000220 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	08002f74 	.word	0x08002f74
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	20000130 	.word	0x20000130

08000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <HAL_Init+0x24>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_Init+0x24>)
 8000b92:	2110      	movs	r1, #16
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f809 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9e:	f7ff feb1 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x5c>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_InitTick+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	23fa      	movs	r3, #250	@ 0xfa
 8000bc4:	0098      	lsls	r0, r3, #2
 8000bc6:	f7ff fa9f 	bl	8000108 <__udivsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f7ff fa9a 	bl	8000108 <__udivsi3>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f92f 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00f      	b.n	8000c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d80b      	bhi.n	8000c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f8fc 	bl	8000df0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_InitTick+0x64>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	18d2      	adds	r2, r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	20000008 	.word	0x20000008
 8000c38:	2000012c 	.word	0x2000012c

08000c3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	@ (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	2000012c 	.word	0x2000012c

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000caa:	d809      	bhi.n	8000cc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	231f      	movs	r3, #31
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_EnableIRQ+0x30>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
  }
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce0:	d828      	bhi.n	8000d34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8000da0 <__NVIC_SetPriority+0xd4>)
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	33c0      	adds	r3, #192	@ 0xc0
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	589b      	ldr	r3, [r3, r2]
 8000cf2:	1dfa      	adds	r2, r7, #7
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	21ff      	movs	r1, #255	@ 0xff
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	22ff      	movs	r2, #255	@ 0xff
 8000d10:	401a      	ands	r2, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4003      	ands	r3, r0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	481f      	ldr	r0, [pc, #124]	@ (8000da0 <__NVIC_SetPriority+0xd4>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	33c0      	adds	r3, #192	@ 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d32:	e031      	b.n	8000d98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	400b      	ands	r3, r1
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3306      	adds	r3, #6
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	0011      	movs	r1, r2
 8000d54:	2203      	movs	r2, #3
 8000d56:	400a      	ands	r2, r1
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	21ff      	movs	r1, #255	@ 0xff
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	22ff      	movs	r2, #255	@ 0xff
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0018      	movs	r0, r3
 8000d74:	2303      	movs	r3, #3
 8000d76:	4003      	ands	r3, r0
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	001c      	movs	r4, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	4023      	ands	r3, r4
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	3306      	adds	r3, #6
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	18c3      	adds	r3, r0, r3
 8000d94:	3304      	adds	r3, #4
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	045b      	lsls	r3, r3, #17
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d301      	bcc.n	8000dc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e010      	b.n	8000de2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <SysTick_Config+0x44>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	425b      	negs	r3, r3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ff7c 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x44>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x44>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	1c02      	adds	r2, r0, #0
 8000e00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	0002      	movs	r2, r0
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ff33 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ffaf 	bl	8000da8 <SysTick_Config>
 8000e4a:	0003      	movs	r3, r0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e14f      	b.n	8001104 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d100      	bne.n	8000e7c <HAL_GPIO_Init+0x28>
 8000e7a:	e140      	b.n	80010fe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d005      	beq.n	8000e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d017      	beq.n	8000f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d123      	bne.n	8000f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	58d3      	ldr	r3, [r2, r3]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2207      	movs	r2, #7
 8000f50:	4013      	ands	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2107      	movs	r1, #7
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	23c0      	movs	r3, #192	@ 0xc0
 8000fc0:	029b      	lsls	r3, r3, #10
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <HAL_GPIO_Init+0x174>
 8000fc6:	e09a      	b.n	80010fe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b54      	ldr	r3, [pc, #336]	@ (800111c <HAL_GPIO_Init+0x2c8>)
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	4b53      	ldr	r3, [pc, #332]	@ (800111c <HAL_GPIO_Init+0x2c8>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	4b51      	ldr	r3, [pc, #324]	@ (800111c <HAL_GPIO_Init+0x2c8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8001120 <HAL_GPIO_Init+0x2cc>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	589b      	ldr	r3, [r3, r2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	2390      	movs	r3, #144	@ 0x90
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	429a      	cmp	r2, r3
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1e2>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a44      	ldr	r2, [pc, #272]	@ (8001124 <HAL_GPIO_Init+0x2d0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1de>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a43      	ldr	r2, [pc, #268]	@ (8001128 <HAL_GPIO_Init+0x2d4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1da>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a42      	ldr	r2, [pc, #264]	@ (800112c <HAL_GPIO_Init+0x2d8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1d6>
 8001026:	2303      	movs	r3, #3
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 800102a:	2305      	movs	r3, #5
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001036:	2300      	movs	r3, #0
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	2103      	movs	r1, #3
 800103c:	400a      	ands	r2, r1
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x2cc>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	035b      	lsls	r3, r3, #13
 800106e:	4013      	ands	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107a:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	025b      	lsls	r3, r3, #9
 80010ec:	4013      	ands	r3, r2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_GPIO_Init+0x2dc>)
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	40da      	lsrs	r2, r3
 800110c:	1e13      	subs	r3, r2, #0
 800110e:	d000      	beq.n	8001112 <HAL_GPIO_Init+0x2be>
 8001110:	e6a8      	b.n	8000e64 <HAL_GPIO_Init+0x10>
  } 
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b006      	add	sp, #24
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	48000c00 	.word	0x48000c00
 8001130:	40010400 	.word	0x40010400

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	0008      	movs	r0, r1
 800113e:	0011      	movs	r1, r2
 8001140:	1cbb      	adds	r3, r7, #2
 8001142:	1c02      	adds	r2, r0, #0
 8001144:	801a      	strh	r2, [r3, #0]
 8001146:	1c7b      	adds	r3, r7, #1
 8001148:	1c0a      	adds	r2, r1, #0
 800114a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114c:	1c7b      	adds	r3, r7, #1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	881a      	ldrh	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e301      	b.n	8001786 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x1e>
 800118c:	e08d      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118e:	4bc3      	ldr	r3, [pc, #780]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	220c      	movs	r2, #12
 8001194:	4013      	ands	r3, r2
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00e      	beq.n	80011b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119a:	4bc0      	ldr	r3, [pc, #768]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	220c      	movs	r2, #12
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
 80011a6:	4bbd      	ldr	r3, [pc, #756]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	401a      	ands	r2, r3
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	025b      	lsls	r3, r3, #9
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4bb8      	ldr	r3, [pc, #736]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x56>
 80011c4:	e070      	b.n	80012a8 <HAL_RCC_OscConfig+0x138>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d000      	beq.n	80011d0 <HAL_RCC_OscConfig+0x60>
 80011ce:	e06b      	b.n	80012a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e2d8      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d107      	bne.n	80011ec <HAL_RCC_OscConfig+0x7c>
 80011dc:	4baf      	ldr	r3, [pc, #700]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4bae      	ldr	r3, [pc, #696]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	0249      	lsls	r1, r1, #9
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e02f      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10c      	bne.n	800120e <HAL_RCC_OscConfig+0x9e>
 80011f4:	4ba9      	ldr	r3, [pc, #676]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4ba8      	ldr	r3, [pc, #672]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011fa:	49a9      	ldr	r1, [pc, #676]	@ (80014a0 <HAL_RCC_OscConfig+0x330>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4ba6      	ldr	r3, [pc, #664]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4ba5      	ldr	r3, [pc, #660]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001206:	49a7      	ldr	r1, [pc, #668]	@ (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e01e      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b05      	cmp	r3, #5
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0xc4>
 8001216:	4ba1      	ldr	r3, [pc, #644]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4ba0      	ldr	r3, [pc, #640]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	02c9      	lsls	r1, r1, #11
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	4b9d      	ldr	r3, [pc, #628]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b9c      	ldr	r3, [pc, #624]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800122a:	2180      	movs	r1, #128	@ 0x80
 800122c:	0249      	lsls	r1, r1, #9
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 8001234:	4b99      	ldr	r3, [pc, #612]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b98      	ldr	r3, [pc, #608]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800123a:	4999      	ldr	r1, [pc, #612]	@ (80014a0 <HAL_RCC_OscConfig+0x330>)
 800123c:	400a      	ands	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	4b96      	ldr	r3, [pc, #600]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b95      	ldr	r3, [pc, #596]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001246:	4997      	ldr	r1, [pc, #604]	@ (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d014      	beq.n	800127e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fcf2 	bl	8000c3c <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fced 	bl	8000c3c <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	@ 0x64
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e28a      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	4b8a      	ldr	r3, [pc, #552]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4013      	ands	r3, r2
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0xee>
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fcdd 	bl	8000c3c <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fcd8 	bl	8000c3c <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e275      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b80      	ldr	r3, [pc, #512]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	029b      	lsls	r3, r3, #10
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x118>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x146>
 80012b4:	e069      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b6:	4b79      	ldr	r3, [pc, #484]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	220c      	movs	r2, #12
 80012bc:	4013      	ands	r3, r2
 80012be:	d00b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012c0:	4b76      	ldr	r3, [pc, #472]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d11c      	bne.n	8001306 <HAL_RCC_OscConfig+0x196>
 80012cc:	4b73      	ldr	r3, [pc, #460]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	4013      	ands	r3, r2
 80012d6:	d116      	bne.n	8001306 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	4b70      	ldr	r3, [pc, #448]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e24b      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b6b      	ldr	r3, [pc, #428]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	22f8      	movs	r2, #248	@ 0xf8
 80012f4:	4393      	bics	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	00da      	lsls	r2, r3, #3
 80012fe:	4b67      	ldr	r3, [pc, #412]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001304:	e041      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d024      	beq.n	8001358 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b62      	ldr	r3, [pc, #392]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fc8f 	bl	8000c3c <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fc8a 	bl	8000c3c <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e227      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d0f1      	beq.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b56      	ldr	r3, [pc, #344]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	22f8      	movs	r2, #248	@ 0xf8
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00da      	lsls	r2, r3, #3
 8001350:	4b52      	ldr	r3, [pc, #328]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e018      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001358:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc6a 	bl	8000c3c <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc65 	bl	8000c3c <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e202      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001380:	4b46      	ldr	r3, [pc, #280]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d1f1      	bne.n	800136e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2208      	movs	r2, #8
 8001390:	4013      	ands	r3, r2
 8001392:	d036      	beq.n	8001402 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d019      	beq.n	80013d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139c:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a0:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc48 	bl	8000c3c <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc43 	bl	8000c3c <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1e0      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d0f1      	beq.n	80013b2 <HAL_RCC_OscConfig+0x242>
 80013ce:	e018      	b.n	8001402 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d4:	4b31      	ldr	r3, [pc, #196]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc2e 	bl	8000c3c <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc29 	bl	8000c3c <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1c6      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f1      	bne.n	80013e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2204      	movs	r2, #4
 8001408:	4013      	ands	r3, r2
 800140a:	d100      	bne.n	800140e <HAL_RCC_OscConfig+0x29e>
 800140c:	e0b4      	b.n	8001578 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	201f      	movs	r0, #31
 8001410:	183b      	adds	r3, r7, r0
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	055b      	lsls	r3, r3, #21
 800141e:	4013      	ands	r3, r2
 8001420:	d110      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	0549      	lsls	r1, r1, #21
 800142c:	430a      	orrs	r2, r1
 800142e:	61da      	str	r2, [r3, #28]
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	055b      	lsls	r3, r3, #21
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800143e:	183b      	adds	r3, r7, r0
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fbed 	bl	8000c3c <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff fbe8 	bl	8000c3c <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e185      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x33c>
 800148e:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4b02      	ldr	r3, [pc, #8]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	621a      	str	r2, [r3, #32]
 800149a:	e035      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 800149c:	40021000 	.word	0x40021000
 80014a0:	fffeffff 	.word	0xfffeffff
 80014a4:	fffbffff 	.word	0xfffbffff
 80014a8:	40007000 	.word	0x40007000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x35e>
 80014b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	438a      	bics	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
 80014c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014c2:	6a1a      	ldr	r2, [r3, #32]
 80014c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	621a      	str	r2, [r3, #32]
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x380>
 80014d6:	4bae      	ldr	r3, [pc, #696]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	4bad      	ldr	r3, [pc, #692]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014dc:	2104      	movs	r1, #4
 80014de:	430a      	orrs	r2, r1
 80014e0:	621a      	str	r2, [r3, #32]
 80014e2:	4bab      	ldr	r3, [pc, #684]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4baa      	ldr	r3, [pc, #680]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	621a      	str	r2, [r3, #32]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 80014f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
 80014fc:	4ba4      	ldr	r3, [pc, #656]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4ba3      	ldr	r3, [pc, #652]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fb94 	bl	8000c3c <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e009      	b.n	800152e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb8f 	bl	8000c3c <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a9b      	ldr	r2, [pc, #620]	@ (8001794 <HAL_RCC_OscConfig+0x624>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e12b      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b98      	ldr	r3, [pc, #608]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x3aa>
 8001538:	e013      	b.n	8001562 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb7f 	bl	8000c3c <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fb7a 	bl	8000c3c <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a91      	ldr	r2, [pc, #580]	@ (8001794 <HAL_RCC_OscConfig+0x624>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e116      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b8d      	ldr	r3, [pc, #564]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001562:	231f      	movs	r3, #31
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b88      	ldr	r3, [pc, #544]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	4b87      	ldr	r3, [pc, #540]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001572:	4989      	ldr	r1, [pc, #548]	@ (8001798 <HAL_RCC_OscConfig+0x628>)
 8001574:	400a      	ands	r2, r1
 8001576:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	4013      	ands	r3, r2
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d12a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800158a:	4b81      	ldr	r3, [pc, #516]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800158c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158e:	4b80      	ldr	r3, [pc, #512]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001590:	2104      	movs	r1, #4
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001596:	4b7e      	ldr	r3, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800159a:	4b7d      	ldr	r3, [pc, #500]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb4b 	bl	8000c3c <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ac:	f7ff fb46 	bl	8000c3c <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0e3      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015be:	4b74      	ldr	r3, [pc, #464]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c8:	4b71      	ldr	r3, [pc, #452]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015cc:	22f8      	movs	r2, #248	@ 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015de:	e034      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	3305      	adds	r3, #5
 80015e6:	d111      	bne.n	800160c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e8:	4b69      	ldr	r3, [pc, #420]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ec:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f8:	22f8      	movs	r2, #248	@ 0xf8
 80015fa:	4393      	bics	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	00da      	lsls	r2, r3, #3
 8001604:	4b62      	ldr	r3, [pc, #392]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	@ 0x34
 800160a:	e01e      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800160c:	4b60      	ldr	r3, [pc, #384]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800160e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001610:	4b5f      	ldr	r3, [pc, #380]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001612:	2104      	movs	r1, #4
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001618:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161c:	4b5c      	ldr	r3, [pc, #368]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fb0a 	bl	8000c3c <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800162e:	f7ff fb05 	bl	8000c3c <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0a2      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001640:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x4e4>
 8001652:	e097      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b08      	cmp	r3, #8
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x4f2>
 8001660:	e06b      	b.n	800173a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d14c      	bne.n	8001704 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b48      	ldr	r3, [pc, #288]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001670:	494a      	ldr	r1, [pc, #296]	@ (800179c <HAL_RCC_OscConfig+0x62c>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fae1 	bl	8000c3c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fadc 	bl	8000c3c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e079      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	220f      	movs	r2, #15
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	4b38      	ldr	r3, [pc, #224]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016b2:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x630>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	0449      	lsls	r1, r1, #17
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff faaf 	bl	8000c3c <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff faaa 	bl	8000c3c <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e047      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	049b      	lsls	r3, r3, #18
 80016fe:	4013      	ands	r3, r2
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x574>
 8001702:	e03f      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800170a:	4924      	ldr	r1, [pc, #144]	@ (800179c <HAL_RCC_OscConfig+0x62c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fa94 	bl	8000c3c <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fa8f 	bl	8000c3c <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e02c      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	049b      	lsls	r3, r3, #18
 8001734:	4013      	ands	r3, r2
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x5aa>
 8001738:	e024      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e01f      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	429a      	cmp	r2, r3
 8001760:	d10e      	bne.n	8001780 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	220f      	movs	r2, #15
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	23f0      	movs	r3, #240	@ 0xf0
 8001774:	039b      	lsls	r3, r3, #14
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b008      	add	sp, #32
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	00001388 	.word	0x00001388
 8001798:	efffffff 	.word	0xefffffff
 800179c:	feffffff 	.word	0xfeffffff
 80017a0:	ffc2ffff 	.word	0xffc2ffff

080017a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b3      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d911      	bls.n	80017ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b58      	ldr	r3, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e09a      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2204      	movs	r2, #4
 80017fa:	4013      	ands	r3, r2
 80017fc:	d006      	beq.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fe:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001804:	21e0      	movs	r1, #224	@ 0xe0
 8001806:	00c9      	lsls	r1, r1, #3
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	22f0      	movs	r2, #240	@ 0xf0
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d040      	beq.n	80018ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d114      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06e      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d108      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e062      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e05b      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff f9de 	bl	8000c3c <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001884:	e009      	b.n	800189a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f9d9 	bl	8000c3c <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <HAL_RCC_ClockConfig+0x18c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e042      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	220c      	movs	r2, #12
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1ec      	bne.n	8001886 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d211      	bcs.n	80018de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e020      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	d009      	beq.n	80018fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_RCC_ClockConfig+0x190>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fc:	f000 f820 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8001900:	0001      	movs	r1, r0
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	220f      	movs	r2, #15
 800190a:	4013      	ands	r3, r2
 800190c:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_RCC_ClockConfig+0x194>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	000a      	movs	r2, r1
 8001912:	40da      	lsrs	r2, r3
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x198>)
 8001916:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001918:	2003      	movs	r0, #3
 800191a:	f7ff f949 	bl	8000bb0 <HAL_InitTick>
  
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b004      	add	sp, #16
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	00001388 	.word	0x00001388
 8001934:	fffff8ff 	.word	0xfffff8ff
 8001938:	08002f3c 	.word	0x08002f3c
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	220c      	movs	r2, #12
 8001964:	4013      	ands	r3, r2
 8001966:	2b04      	cmp	r3, #4
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x30>
 800196a:	2b08      	cmp	r3, #8
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x36>
 800196e:	e02c      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001972:	613b      	str	r3, [r7, #16]
      break;
 8001974:	e02c      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	220f      	movs	r2, #15
 800197c:	4013      	ands	r3, r2
 800197e:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	220f      	movs	r2, #15
 800198a:	4013      	ands	r3, r2
 800198c:	4a16      	ldr	r2, [pc, #88]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	025b      	lsls	r3, r3, #9
 8001998:	4013      	ands	r3, r2
 800199a:	d009      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	4810      	ldr	r0, [pc, #64]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a0:	f7fe fbb2 	bl	8000108 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	001a      	movs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4353      	muls	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	000a      	movs	r2, r1
 80019b4:	0152      	lsls	r2, r2, #5
 80019b6:	1a52      	subs	r2, r2, r1
 80019b8:	0193      	lsls	r3, r2, #6
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	185b      	adds	r3, r3, r1
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019cc:	613b      	str	r3, [r7, #16]
      break;
 80019ce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019d0:	693b      	ldr	r3, [r7, #16]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	08002f4c 	.word	0x08002f4c
 80019e8:	08002f5c 	.word	0x08002f5c

080019ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0a8      	b.n	8001b50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2382      	movs	r3, #130	@ 0x82
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d009      	beq.n	8001a26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	61da      	str	r2, [r3, #28]
 8001a18:	e005      	b.n	8001a26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	225d      	movs	r2, #93	@ 0x5d
 8001a30:	5c9b      	ldrb	r3, [r3, r2]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	225c      	movs	r2, #92	@ 0x5c
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7fe ff82 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	225d      	movs	r2, #93	@ 0x5d
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2140      	movs	r1, #64	@ 0x40
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	23e0      	movs	r3, #224	@ 0xe0
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d902      	bls.n	8001a72 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e002      	b.n	8001a78 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	23f0      	movs	r3, #240	@ 0xf0
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d008      	beq.n	8001a96 <HAL_SPI_Init+0xaa>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	23e0      	movs	r3, #224	@ 0xe0
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d002      	beq.n	8001a96 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	2382      	movs	r3, #130	@ 0x82
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	2384      	movs	r3, #132	@ 0x84
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2101      	movs	r1, #1
 8001abc:	400b      	ands	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6999      	ldr	r1, [r3, #24]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2138      	movs	r1, #56	@ 0x38
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	2180      	movs	r1, #128	@ 0x80
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	2204      	movs	r2, #4
 8001afc:	401a      	ands	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	2110      	movs	r1, #16
 8001b04:	400b      	ands	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68d9      	ldr	r1, [r3, #12]
 8001b16:	23f0      	movs	r3, #240	@ 0xf0
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <HAL_SPI_Init+0x16c>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	225d      	movs	r2, #93	@ 0x5d
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	fffff7ff 	.word	0xfffff7ff

08001b5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b6c:	231f      	movs	r3, #31
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	225c      	movs	r2, #92	@ 0x5c
 8001b78:	5c9b      	ldrb	r3, [r3, r2]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_SPI_Transmit+0x26>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e147      	b.n	8001e12 <HAL_SPI_Transmit+0x2b6>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	225c      	movs	r2, #92	@ 0x5c
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b8a:	f7ff f857 	bl	8000c3c <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001b92:	2316      	movs	r3, #22
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	1dba      	adds	r2, r7, #6
 8001b98:	8812      	ldrh	r2, [r2, #0]
 8001b9a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	225d      	movs	r2, #93	@ 0x5d
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d004      	beq.n	8001bb2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bb0:	e128      	b.n	8001e04 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_SPI_Transmit+0x64>
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001bc0:	231f      	movs	r3, #31
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bc8:	e11c      	b.n	8001e04 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	225d      	movs	r2, #93	@ 0x5d
 8001bce:	2103      	movs	r1, #3
 8001bd0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1dba      	adds	r2, r7, #6
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1dba      	adds	r2, r7, #6
 8001bea:	8812      	ldrh	r2, [r2, #0]
 8001bec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2244      	movs	r2, #68	@ 0x44
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2246      	movs	r2, #70	@ 0x46
 8001c00:	2100      	movs	r1, #0
 8001c02:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d110      	bne.n	8001c3e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	438a      	bics	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2180      	movs	r1, #128	@ 0x80
 8001c38:	01c9      	lsls	r1, r1, #7
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2240      	movs	r2, #64	@ 0x40
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b40      	cmp	r3, #64	@ 0x40
 8001c4a:	d007      	beq.n	8001c5c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2140      	movs	r1, #64	@ 0x40
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	23e0      	movs	r3, #224	@ 0xe0
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d952      	bls.n	8001d0e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_SPI_Transmit+0x11e>
 8001c70:	2316      	movs	r3, #22
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d143      	bne.n	8001d02 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8a:	1c9a      	adds	r2, r3, #2
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c9e:	e030      	b.n	8001d02 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d112      	bne.n	8001cd4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbe:	1c9a      	adds	r2, r3, #2
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cd2:	e016      	b.n	8001d02 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cd4:	f7fe ffb2 	bl	8000c3c <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d802      	bhi.n	8001cea <HAL_SPI_Transmit+0x18e>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_SPI_Transmit+0x194>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d108      	bne.n	8001d02 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	225d      	movs	r2, #93	@ 0x5d
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	5499      	strb	r1, [r3, r2]
          goto error;
 8001d00:	e080      	b.n	8001e04 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1c9      	bne.n	8001ca0 <HAL_SPI_Transmit+0x144>
 8001d0c:	e053      	b.n	8001db6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_SPI_Transmit+0x1c4>
 8001d16:	2316      	movs	r3, #22
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d145      	bne.n	8001dac <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001d46:	e031      	b.n	8001dac <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d113      	bne.n	8001d7e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	330c      	adds	r3, #12
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d7c:	e016      	b.n	8001dac <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7e:	f7fe ff5d 	bl	8000c3c <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d802      	bhi.n	8001d94 <HAL_SPI_Transmit+0x238>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	d102      	bne.n	8001d9a <HAL_SPI_Transmit+0x23e>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2203      	movs	r2, #3
 8001da0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	225d      	movs	r2, #93	@ 0x5d
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001daa:	e02b      	b.n	8001e04 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1c8      	bne.n	8001d48 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 f95d 	bl	800207c <SPI_EndRxTxTransaction>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001df2:	231f      	movs	r3, #31
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e003      	b.n	8001e04 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	225d      	movs	r2, #93	@ 0x5d
 8001e00:	2101      	movs	r1, #1
 8001e02:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	225c      	movs	r2, #92	@ 0x5c
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e0c:	231f      	movs	r3, #31
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	781b      	ldrb	r3, [r3, #0]
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b008      	add	sp, #32
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e2c:	f7fe ff06 	bl	8000c3c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	18d3      	adds	r3, r2, r3
 8001e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e3c:	f7fe fefe 	bl	8000c3c <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e44:	4b3a      	ldr	r3, [pc, #232]	@ (8001f30 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	015b      	lsls	r3, r3, #5
 8001e4a:	0d1b      	lsrs	r3, r3, #20
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4353      	muls	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e52:	e058      	b.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	d055      	beq.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e5a:	f7fe feef 	bl	8000c3c <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d902      	bls.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d142      	bne.n	8001ef6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	21e0      	movs	r1, #224	@ 0xe0
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	2382      	movs	r3, #130	@ 0x82
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d113      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d005      	beq.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2140      	movs	r1, #64	@ 0x40
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d110      	bne.n	8001ee2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	491a      	ldr	r1, [pc, #104]	@ (8001f34 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	0189      	lsls	r1, r1, #6
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	225d      	movs	r2, #93	@ 0x5d
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	225c      	movs	r2, #92	@ 0x5c
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e017      	b.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	425a      	negs	r2, r3
 8001f16:	4153      	adcs	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d197      	bne.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b008      	add	sp, #32
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000000 	.word	0x20000000
 8001f34:	ffffdfff 	.word	0xffffdfff

08001f38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f46:	2317      	movs	r3, #23
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f4e:	f7fe fe75 	bl	8000c3c <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	18d3      	adds	r3, r2, r3
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001f5e:	f7fe fe6d 	bl	8000c3c <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	0013      	movs	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	00da      	lsls	r2, r3, #3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	0d1b      	lsrs	r3, r3, #20
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4353      	muls	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f84:	e068      	b.n	8002058 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	23c0      	movs	r3, #192	@ 0xc0
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10a      	bne.n	8001fa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	2117      	movs	r1, #23
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	d055      	beq.n	8002058 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fac:	f7fe fe46 	bl	8000c3c <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d902      	bls.n	8001fc2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d142      	bne.n	8002048 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	21e0      	movs	r1, #224	@ 0xe0
 8001fce:	438a      	bics	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	2382      	movs	r3, #130	@ 0x82
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d113      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d005      	beq.n	8001ff6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d107      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2140      	movs	r1, #64	@ 0x40
 8002002:	438a      	bics	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	429a      	cmp	r2, r3
 8002010:	d110      	bne.n	8002034 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4916      	ldr	r1, [pc, #88]	@ (8002078 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800201e:	400a      	ands	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	0189      	lsls	r1, r1, #6
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	225d      	movs	r2, #93	@ 0x5d
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	225c      	movs	r2, #92	@ 0x5c
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e010      	b.n	800206a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3b01      	subs	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d18e      	bne.n	8001f86 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b00a      	add	sp, #40	@ 0x28
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	20000000 	.word	0x20000000
 8002078:	ffffdfff 	.word	0xffffdfff

0800207c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	23c0      	movs	r3, #192	@ 0xc0
 800208c:	0159      	lsls	r1, r3, #5
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	0013      	movs	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	f7ff ff4e 	bl	8001f38 <SPI_WaitFifoStateUntilTimeout>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d007      	beq.n	80020b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a4:	2220      	movs	r2, #32
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e027      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	0013      	movs	r3, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	f7ff fead 	bl	8001e1c <SPI_WaitFlagStateUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d007      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	2220      	movs	r2, #32
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e014      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	23c0      	movs	r3, #192	@ 0xc0
 80020da:	00d9      	lsls	r1, r3, #3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	0013      	movs	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	f7ff ff27 	bl	8001f38 <SPI_WaitFifoStateUntilTimeout>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d007      	beq.n	80020fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	2220      	movs	r2, #32
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e000      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e042      	b.n	80021a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223d      	movs	r2, #61	@ 0x3d
 800211e:	5c9b      	ldrb	r3, [r3, r2]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223c      	movs	r2, #60	@ 0x3c
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fc57 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	@ 0x3d
 800213a:	2102      	movs	r1, #2
 800213c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	0019      	movs	r1, r3
 8002148:	0010      	movs	r0, r2
 800214a:	f000 fb05 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2246      	movs	r2, #70	@ 0x46
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223e      	movs	r2, #62	@ 0x3e
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223f      	movs	r2, #63	@ 0x3f
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2240      	movs	r2, #64	@ 0x40
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2241      	movs	r2, #65	@ 0x41
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2242      	movs	r2, #66	@ 0x42
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2243      	movs	r2, #67	@ 0x43
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2244      	movs	r2, #68	@ 0x44
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2245      	movs	r2, #69	@ 0x45
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223d      	movs	r2, #61	@ 0x3d
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	223d      	movs	r2, #61	@ 0x3d
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e030      	b.n	8002222 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	223d      	movs	r2, #61	@ 0x3d
 80021c4:	2102      	movs	r1, #2
 80021c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a13      	ldr	r2, [pc, #76]	@ (800222c <HAL_TIM_Base_Start_IT+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x44>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <HAL_TIM_Base_Start_IT+0x88>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d111      	bne.n	8002210 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d010      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220e:	e007      	b.n	8002220 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b004      	add	sp, #16
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40000400 	.word	0x40000400

08002234 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e042      	b.n	80022cc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	223d      	movs	r2, #61	@ 0x3d
 800224a:	5c9b      	ldrb	r3, [r3, r2]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223c      	movs	r2, #60	@ 0x3c
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f839 	bl	80022d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223d      	movs	r2, #61	@ 0x3d
 8002266:	2102      	movs	r1, #2
 8002268:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f000 fa6f 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2246      	movs	r2, #70	@ 0x46
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223e      	movs	r2, #62	@ 0x3e
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2241      	movs	r2, #65	@ 0x41
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2242      	movs	r2, #66	@ 0x42
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2243      	movs	r2, #67	@ 0x43
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2244      	movs	r2, #68	@ 0x44
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2245      	movs	r2, #69	@ 0x45
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	@ 0x3d
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d021      	beq.n	8002348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2203      	movs	r2, #3
 8002312:	4252      	negs	r2, r2
 8002314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2203      	movs	r2, #3
 8002324:	4013      	ands	r3, r2
 8002326:	d004      	beq.n	8002332 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f000 f9fc 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 8002330:	e007      	b.n	8002342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f9ef 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f9fb 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d01e      	beq.n	8002396 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2205      	movs	r2, #5
 800235e:	4252      	negs	r2, r2
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	23c0      	movs	r3, #192	@ 0xc0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f9d5 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 800237e:	e007      	b.n	8002390 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f9c8 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f9d4 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2208      	movs	r2, #8
 800239a:	4013      	ands	r3, r2
 800239c:	d021      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2208      	movs	r2, #8
 80023a2:	4013      	ands	r3, r2
 80023a4:	d01d      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2209      	movs	r2, #9
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2204      	movs	r2, #4
 80023b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2203      	movs	r2, #3
 80023be:	4013      	ands	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f9af 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 80023ca:	e007      	b.n	80023dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f9a2 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f9ae 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2210      	movs	r2, #16
 80023e6:	4013      	ands	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4013      	ands	r3, r2
 80023f0:	d01e      	beq.n	8002430 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2211      	movs	r2, #17
 80023f8:	4252      	negs	r2, r2
 80023fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2208      	movs	r2, #8
 8002400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	23c0      	movs	r3, #192	@ 0xc0
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f988 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 8002418:	e007      	b.n	800242a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f97b 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f987 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d00c      	beq.n	8002452 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d008      	beq.n	8002452 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2202      	movs	r2, #2
 8002446:	4252      	negs	r2, r2
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe f985 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	4013      	ands	r3, r2
 8002458:	d00c      	beq.n	8002474 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2280      	movs	r2, #128	@ 0x80
 800245e:	4013      	ands	r3, r2
 8002460:	d008      	beq.n	8002474 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2281      	movs	r2, #129	@ 0x81
 8002468:	4252      	negs	r2, r2
 800246a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fd1e 	bl	8002eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	4013      	ands	r3, r2
 800247a:	d00c      	beq.n	8002496 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2240      	movs	r2, #64	@ 0x40
 8002480:	4013      	ands	r3, r2
 8002482:	d008      	beq.n	8002496 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2241      	movs	r2, #65	@ 0x41
 800248a:	4252      	negs	r2, r2
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f959 	bl	8002748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2220      	movs	r2, #32
 800249a:	4013      	ands	r3, r2
 800249c:	d00c      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d008      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2221      	movs	r2, #33	@ 0x21
 80024ac:	4252      	negs	r2, r2
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fcf4 	bl	8002ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2317      	movs	r3, #23
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	223c      	movs	r2, #60	@ 0x3c
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_OC_ConfigChannel+0x22>
 80024de:	2302      	movs	r3, #2
 80024e0:	e042      	b.n	8002568 <HAL_TIM_OC_ConfigChannel+0xa8>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	223c      	movs	r2, #60	@ 0x3c
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d027      	beq.n	8002540 <HAL_TIM_OC_ConfigChannel+0x80>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d82c      	bhi.n	8002550 <HAL_TIM_OC_ConfigChannel+0x90>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d019      	beq.n	8002530 <HAL_TIM_OC_ConfigChannel+0x70>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d826      	bhi.n	8002550 <HAL_TIM_OC_ConfigChannel+0x90>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_TIM_OC_ConfigChannel+0x50>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d008      	beq.n	8002520 <HAL_TIM_OC_ConfigChannel+0x60>
 800250e:	e01f      	b.n	8002550 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	0011      	movs	r1, r2
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f997 	bl	800284c <TIM_OC1_SetConfig>
      break;
 800251e:	e01c      	b.n	800255a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f000 fa0d 	bl	8002948 <TIM_OC2_SetConfig>
      break;
 800252e:	e014      	b.n	800255a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fa83 	bl	8002a44 <TIM_OC3_SetConfig>
      break;
 800253e:	e00c      	b.n	800255a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	0011      	movs	r1, r2
 8002548:	0018      	movs	r0, r3
 800254a:	f000 fafb 	bl	8002b44 <TIM_OC4_SetConfig>
      break;
 800254e:	e004      	b.n	800255a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002550:	2317      	movs	r3, #23
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
      break;
 8002558:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	223c      	movs	r2, #60	@ 0x3c
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

  return status;
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b006      	add	sp, #24
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	230f      	movs	r3, #15
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223c      	movs	r2, #60	@ 0x3c
 8002586:	5c9b      	ldrb	r3, [r3, r2]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_TIM_ConfigClockSource+0x20>
 800258c:	2302      	movs	r3, #2
 800258e:	e0bc      	b.n	800270a <HAL_TIM_ConfigClockSource+0x19a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	223c      	movs	r2, #60	@ 0x3c
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	223d      	movs	r2, #61	@ 0x3d
 800259c:	2102      	movs	r1, #2
 800259e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2277      	movs	r2, #119	@ 0x77
 80025ac:	4393      	bics	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	0192      	lsls	r2, r2, #6
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d040      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xde>
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	0192      	lsls	r2, r2, #6
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d900      	bls.n	80025d6 <HAL_TIM_ConfigClockSource+0x66>
 80025d4:	e088      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	0152      	lsls	r2, r2, #5
 80025da:	4293      	cmp	r3, r2
 80025dc:	d100      	bne.n	80025e0 <HAL_TIM_ConfigClockSource+0x70>
 80025de:	e088      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x182>
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	0152      	lsls	r2, r2, #5
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d900      	bls.n	80025ea <HAL_TIM_ConfigClockSource+0x7a>
 80025e8:	e07e      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 80025ea:	2b70      	cmp	r3, #112	@ 0x70
 80025ec:	d018      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0xb0>
 80025ee:	d900      	bls.n	80025f2 <HAL_TIM_ConfigClockSource+0x82>
 80025f0:	e07a      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 80025f2:	2b60      	cmp	r3, #96	@ 0x60
 80025f4:	d04f      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x126>
 80025f6:	d900      	bls.n	80025fa <HAL_TIM_ConfigClockSource+0x8a>
 80025f8:	e076      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 80025fa:	2b50      	cmp	r3, #80	@ 0x50
 80025fc:	d03b      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x106>
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x92>
 8002600:	e072      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2b40      	cmp	r3, #64	@ 0x40
 8002604:	d057      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x146>
 8002606:	d900      	bls.n	800260a <HAL_TIM_ConfigClockSource+0x9a>
 8002608:	e06e      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 800260a:	2b30      	cmp	r3, #48	@ 0x30
 800260c:	d063      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x166>
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x166>
 8002614:	d868      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d05d      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x166>
 800261a:	2b10      	cmp	r3, #16
 800261c:	d05b      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x166>
 800261e:	e063      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002630:	f000 fb66 	bl	8002d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2277      	movs	r2, #119	@ 0x77
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e052      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800265e:	f000 fb4f 	bl	8002d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	01c9      	lsls	r1, r1, #7
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03e      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	001a      	movs	r2, r3
 8002684:	f000 fac2 	bl	8002c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	@ 0x50
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fb1c 	bl	8002ccc <TIM_ITRx_SetConfig>
      break;
 8002694:	e02e      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a2:	001a      	movs	r2, r3
 80026a4:	f000 fae0 	bl	8002c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	@ 0x60
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 fb0c 	bl	8002ccc <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01e      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	001a      	movs	r2, r3
 80026c4:	f000 faa2 	bl	8002c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fafc 	bl	8002ccc <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00e      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f000 faf3 	bl	8002ccc <TIM_ITRx_SetConfig>
      break;
 80026e6:	e005      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80026e8:	230f      	movs	r3, #15
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
      break;
 80026f0:	e000      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80026f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	223d      	movs	r2, #61	@ 0x3d
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	223c      	movs	r2, #60	@ 0x3c
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]

  return status;
 8002704:	230f      	movs	r3, #15
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	ffff00ff 	.word	0xffff00ff

08002718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a32      	ldr	r2, [pc, #200]	@ (8002834 <TIM_Base_SetConfig+0xdc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x20>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a31      	ldr	r2, [pc, #196]	@ (8002838 <TIM_Base_SetConfig+0xe0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2270      	movs	r2, #112	@ 0x70
 800277c:	4393      	bics	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <TIM_Base_SetConfig+0xdc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00f      	beq.n	80027b2 <TIM_Base_SetConfig+0x5a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <TIM_Base_SetConfig+0xe0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_Base_SetConfig+0x5a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <TIM_Base_SetConfig+0xe4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_Base_SetConfig+0x5a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <TIM_Base_SetConfig+0xe8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0x5a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <TIM_Base_SetConfig+0xec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <TIM_Base_SetConfig+0xf0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	4393      	bics	r3, r2
 80027ca:	001a      	movs	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <TIM_Base_SetConfig+0xdc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <TIM_Base_SetConfig+0xaa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <TIM_Base_SetConfig+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_Base_SetConfig+0xaa>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <TIM_Base_SetConfig+0xec>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d103      	bne.n	800280a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2201      	movs	r2, #1
 8002816:	4013      	ands	r3, r2
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2201      	movs	r2, #1
 8002822:	4393      	bics	r3, r2
 8002824:	001a      	movs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
  }
}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40002000 	.word	0x40002000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800
 8002848:	fffffcff 	.word	0xfffffcff

0800284c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	2201      	movs	r2, #1
 8002862:	4393      	bics	r3, r2
 8002864:	001a      	movs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2270      	movs	r2, #112	@ 0x70
 800287a:	4393      	bics	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2203      	movs	r2, #3
 8002882:	4393      	bics	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2202      	movs	r2, #2
 8002894:	4393      	bics	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <TIM_OC1_SetConfig+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_OC1_SetConfig+0x6e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <TIM_OC1_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_OC1_SetConfig+0x6e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a21      	ldr	r2, [pc, #132]	@ (800293c <TIM_OC1_SetConfig+0xf0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2208      	movs	r2, #8
 80028be:	4393      	bics	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4393      	bics	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <TIM_OC1_SetConfig+0xe8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_OC1_SetConfig+0xa0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <TIM_OC1_SetConfig+0xec>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_OC1_SetConfig+0xa0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a15      	ldr	r2, [pc, #84]	@ (800293c <TIM_OC1_SetConfig+0xf0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d111      	bne.n	8002910 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <TIM_OC1_SetConfig+0xf4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <TIM_OC1_SetConfig+0xf8>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b006      	add	sp, #24
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40014400 	.word	0x40014400
 800293c:	40014800 	.word	0x40014800
 8002940:	fffffeff 	.word	0xfffffeff
 8002944:	fffffdff 	.word	0xfffffdff

08002948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	2210      	movs	r2, #16
 800295e:	4393      	bics	r3, r2
 8002960:	001a      	movs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <TIM_OC2_SetConfig+0xe0>)
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <TIM_OC2_SetConfig+0xe4>)
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2220      	movs	r2, #32
 8002992:	4393      	bics	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a22      	ldr	r2, [pc, #136]	@ (8002a30 <TIM_OC2_SetConfig+0xe8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10d      	bne.n	80029c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	4393      	bics	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2240      	movs	r2, #64	@ 0x40
 80029c2:	4393      	bics	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <TIM_OC2_SetConfig+0xe8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_OC2_SetConfig+0x96>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <TIM_OC2_SetConfig+0xec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_OC2_SetConfig+0x96>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <TIM_OC2_SetConfig+0xf0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d113      	bne.n	8002a06 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <TIM_OC2_SetConfig+0xf4>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4a15      	ldr	r2, [pc, #84]	@ (8002a40 <TIM_OC2_SetConfig+0xf8>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	ffff8fff 	.word	0xffff8fff
 8002a2c:	fffffcff 	.word	0xfffffcff
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40014800 	.word	0x40014800
 8002a3c:	fffffbff 	.word	0xfffffbff
 8002a40:	fffff7ff 	.word	0xfffff7ff

08002a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a31      	ldr	r2, [pc, #196]	@ (8002b20 <TIM_OC3_SetConfig+0xdc>)
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2270      	movs	r2, #112	@ 0x70
 8002a70:	4393      	bics	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2203      	movs	r2, #3
 8002a78:	4393      	bics	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <TIM_OC3_SetConfig+0xe0>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <TIM_OC3_SetConfig+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10d      	bne.n	8002abe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <TIM_OC3_SetConfig+0xe8>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b30 <TIM_OC3_SetConfig+0xec>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <TIM_OC3_SetConfig+0xe4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_OC3_SetConfig+0x92>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <TIM_OC3_SetConfig+0xf0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_OC3_SetConfig+0x92>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <TIM_OC3_SetConfig+0xf4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <TIM_OC3_SetConfig+0xf8>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a17      	ldr	r2, [pc, #92]	@ (8002b40 <TIM_OC3_SetConfig+0xfc>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b006      	add	sp, #24
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	fffffeff 	.word	0xfffffeff
 8002b24:	fffffdff 	.word	0xfffffdff
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	fffff7ff 	.word	0xfffff7ff
 8002b30:	fffffbff 	.word	0xfffffbff
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800
 8002b3c:	ffffefff 	.word	0xffffefff
 8002b40:	ffffdfff 	.word	0xffffdfff

08002b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a24      	ldr	r2, [pc, #144]	@ (8002bec <TIM_OC4_SetConfig+0xa8>)
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a20      	ldr	r2, [pc, #128]	@ (8002bf0 <TIM_OC4_SetConfig+0xac>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <TIM_OC4_SetConfig+0xb0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <TIM_OC4_SetConfig+0xb4>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	031b      	lsls	r3, r3, #12
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <TIM_OC4_SetConfig+0xb8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <TIM_OC4_SetConfig+0x70>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <TIM_OC4_SetConfig+0xbc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_OC4_SetConfig+0x70>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a15      	ldr	r2, [pc, #84]	@ (8002c04 <TIM_OC4_SetConfig+0xc0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d109      	bne.n	8002bc8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <TIM_OC4_SetConfig+0xc4>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b006      	add	sp, #24
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	ffffefff 	.word	0xffffefff
 8002bf0:	ffff8fff 	.word	0xffff8fff
 8002bf4:	fffffcff 	.word	0xfffffcff
 8002bf8:	ffffdfff 	.word	0xffffdfff
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800
 8002c08:	ffffbfff 	.word	0xffffbfff

08002c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4393      	bics	r3, r2
 8002c26:	001a      	movs	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	22f0      	movs	r2, #240	@ 0xf0
 8002c36:	4393      	bics	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	220a      	movs	r2, #10
 8002c48:	4393      	bics	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b006      	add	sp, #24
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	2210      	movs	r2, #16
 8002c80:	4393      	bics	r3, r2
 8002c82:	001a      	movs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <TIM_TI2_ConfigInputStage+0x60>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	22a0      	movs	r2, #160	@ 0xa0
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b006      	add	sp, #24
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	ffff0fff 	.word	0xffff0fff

08002ccc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2270      	movs	r2, #112	@ 0x70
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	2207      	movs	r2, #7
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <TIM_ETR_SetConfig+0x3c>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	021a      	lsls	r2, r3, #8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b006      	add	sp, #24
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	ffff00ff 	.word	0xffff00ff

08002d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	223c      	movs	r2, #60	@ 0x3c
 8002d4e:	5c9b      	ldrb	r3, [r3, r2]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e03c      	b.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	223c      	movs	r2, #60	@ 0x3c
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	223d      	movs	r2, #61	@ 0x3d
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2270      	movs	r2, #112	@ 0x70
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10c      	bne.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2280      	movs	r2, #128	@ 0x80
 8002daa:	4393      	bics	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	223d      	movs	r2, #61	@ 0x3d
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	223c      	movs	r2, #60	@ 0x3c
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223c      	movs	r2, #60	@ 0x3c
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e03e      	b.n	8002e7e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	223c      	movs	r2, #60	@ 0x3c
 8002e04:	2101      	movs	r1, #1
 8002e06:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	@ 0xff
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	001a      	movs	r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e88 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002e38:	401a      	ands	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002e46:	401a      	ands	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002e54:	401a      	ands	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a0e      	ldr	r2, [pc, #56]	@ (8002e9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002e62:	401a      	ands	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	223c      	movs	r2, #60	@ 0x3c
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	fffffcff 	.word	0xfffffcff
 8002e8c:	fffffbff 	.word	0xfffffbff
 8002e90:	fffff7ff 	.word	0xfffff7ff
 8002e94:	ffffefff 	.word	0xffffefff
 8002e98:	ffffdfff 	.word	0xffffdfff
 8002e9c:	ffffbfff 	.word	0xffffbfff

08002ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <memset>:
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	1882      	adds	r2, r0, r2
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d100      	bne.n	8002eca <memset+0xa>
 8002ec8:	4770      	bx	lr
 8002eca:	7019      	strb	r1, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e7f9      	b.n	8002ec4 <memset+0x4>

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	4c0c      	ldr	r4, [pc, #48]	@ (8002f08 <__libc_init_array+0x38>)
 8002ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8002f0c <__libc_init_array+0x3c>)
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	f000 f819 	bl	8002f18 <_init>
 8002ee6:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <__libc_init_array+0x40>)
 8002ee8:	4d0a      	ldr	r5, [pc, #40]	@ (8002f14 <__libc_init_array+0x44>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	00b3      	lsls	r3, r6, #2
 8002ef6:	58eb      	ldr	r3, [r5, r3]
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	00b3      	lsls	r3, r6, #2
 8002f00:	58eb      	ldr	r3, [r5, r3]
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08002f6c 	.word	0x08002f6c
 8002f0c:	08002f6c 	.word	0x08002f6c
 8002f10:	08002f70 	.word	0x08002f70
 8002f14:	08002f6c 	.word	0x08002f6c

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
