
Tachometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000435c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800441c  0800441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004498  08004498  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004498  08004498  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004498  08004498  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004498  08004498  00005498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  080044ac  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080044ac  000060b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a24  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ab  00000000  00000000  0000aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  0000bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000404  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e477  00000000  00000000  0000c56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e28  00000000  00000000  0001a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c91  00000000  00000000  0002180b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007749c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000146c  00000000  00000000  000774e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0007894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004404 	.word	0x08004404

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004404 	.word	0x08004404

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa47 	bl	80016c4 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f98b 	bl	800155c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa39 	bl	80016c4 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa2f 	bl	80016c4 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f9b5 	bl	80015e4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f9ab 	bl	80015e4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f002 f965 	bl	8002580 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f001 fd54 	bl	8001d6c <__aeabi_dsub>
 80002c4:	f002 f95c 	bl	8002580 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_fsub>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	4647      	mov	r7, r8
 80002dc:	46ce      	mov	lr, r9
 80002de:	0243      	lsls	r3, r0, #9
 80002e0:	b580      	push	{r7, lr}
 80002e2:	0a5f      	lsrs	r7, r3, #9
 80002e4:	099b      	lsrs	r3, r3, #6
 80002e6:	0045      	lsls	r5, r0, #1
 80002e8:	004a      	lsls	r2, r1, #1
 80002ea:	469c      	mov	ip, r3
 80002ec:	024b      	lsls	r3, r1, #9
 80002ee:	0fc4      	lsrs	r4, r0, #31
 80002f0:	0fce      	lsrs	r6, r1, #31
 80002f2:	0e2d      	lsrs	r5, r5, #24
 80002f4:	0a58      	lsrs	r0, r3, #9
 80002f6:	0e12      	lsrs	r2, r2, #24
 80002f8:	0999      	lsrs	r1, r3, #6
 80002fa:	2aff      	cmp	r2, #255	@ 0xff
 80002fc:	d06b      	beq.n	80003d6 <__aeabi_fsub+0xfe>
 80002fe:	2301      	movs	r3, #1
 8000300:	405e      	eors	r6, r3
 8000302:	1aab      	subs	r3, r5, r2
 8000304:	42b4      	cmp	r4, r6
 8000306:	d04b      	beq.n	80003a0 <__aeabi_fsub+0xc8>
 8000308:	2b00      	cmp	r3, #0
 800030a:	dc00      	bgt.n	800030e <__aeabi_fsub+0x36>
 800030c:	e0ff      	b.n	800050e <__aeabi_fsub+0x236>
 800030e:	2a00      	cmp	r2, #0
 8000310:	d100      	bne.n	8000314 <__aeabi_fsub+0x3c>
 8000312:	e088      	b.n	8000426 <__aeabi_fsub+0x14e>
 8000314:	2dff      	cmp	r5, #255	@ 0xff
 8000316:	d100      	bne.n	800031a <__aeabi_fsub+0x42>
 8000318:	e0ef      	b.n	80004fa <__aeabi_fsub+0x222>
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	04d2      	lsls	r2, r2, #19
 800031e:	4311      	orrs	r1, r2
 8000320:	2001      	movs	r0, #1
 8000322:	2b1b      	cmp	r3, #27
 8000324:	dc08      	bgt.n	8000338 <__aeabi_fsub+0x60>
 8000326:	0008      	movs	r0, r1
 8000328:	2220      	movs	r2, #32
 800032a:	40d8      	lsrs	r0, r3
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	4099      	lsls	r1, r3
 8000330:	000b      	movs	r3, r1
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	4193      	sbcs	r3, r2
 8000336:	4318      	orrs	r0, r3
 8000338:	4663      	mov	r3, ip
 800033a:	1a1b      	subs	r3, r3, r0
 800033c:	469c      	mov	ip, r3
 800033e:	4663      	mov	r3, ip
 8000340:	015b      	lsls	r3, r3, #5
 8000342:	d400      	bmi.n	8000346 <__aeabi_fsub+0x6e>
 8000344:	e0cd      	b.n	80004e2 <__aeabi_fsub+0x20a>
 8000346:	4663      	mov	r3, ip
 8000348:	019f      	lsls	r7, r3, #6
 800034a:	09bf      	lsrs	r7, r7, #6
 800034c:	0038      	movs	r0, r7
 800034e:	f002 f9bf 	bl	80026d0 <__clzsi2>
 8000352:	003b      	movs	r3, r7
 8000354:	3805      	subs	r0, #5
 8000356:	4083      	lsls	r3, r0
 8000358:	4285      	cmp	r5, r0
 800035a:	dc00      	bgt.n	800035e <__aeabi_fsub+0x86>
 800035c:	e0a2      	b.n	80004a4 <__aeabi_fsub+0x1cc>
 800035e:	4ab7      	ldr	r2, [pc, #732]	@ (800063c <__aeabi_fsub+0x364>)
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	401a      	ands	r2, r3
 8000364:	4694      	mov	ip, r2
 8000366:	075a      	lsls	r2, r3, #29
 8000368:	d100      	bne.n	800036c <__aeabi_fsub+0x94>
 800036a:	e0c3      	b.n	80004f4 <__aeabi_fsub+0x21c>
 800036c:	220f      	movs	r2, #15
 800036e:	4013      	ands	r3, r2
 8000370:	2b04      	cmp	r3, #4
 8000372:	d100      	bne.n	8000376 <__aeabi_fsub+0x9e>
 8000374:	e0be      	b.n	80004f4 <__aeabi_fsub+0x21c>
 8000376:	2304      	movs	r3, #4
 8000378:	4698      	mov	r8, r3
 800037a:	44c4      	add	ip, r8
 800037c:	4663      	mov	r3, ip
 800037e:	015b      	lsls	r3, r3, #5
 8000380:	d400      	bmi.n	8000384 <__aeabi_fsub+0xac>
 8000382:	e0b7      	b.n	80004f4 <__aeabi_fsub+0x21c>
 8000384:	1c68      	adds	r0, r5, #1
 8000386:	2dfe      	cmp	r5, #254	@ 0xfe
 8000388:	d000      	beq.n	800038c <__aeabi_fsub+0xb4>
 800038a:	e0a5      	b.n	80004d8 <__aeabi_fsub+0x200>
 800038c:	20ff      	movs	r0, #255	@ 0xff
 800038e:	2200      	movs	r2, #0
 8000390:	05c0      	lsls	r0, r0, #23
 8000392:	4310      	orrs	r0, r2
 8000394:	07e4      	lsls	r4, r4, #31
 8000396:	4320      	orrs	r0, r4
 8000398:	bcc0      	pop	{r6, r7}
 800039a:	46b9      	mov	r9, r7
 800039c:	46b0      	mov	r8, r6
 800039e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	dc00      	bgt.n	80003a6 <__aeabi_fsub+0xce>
 80003a4:	e1eb      	b.n	800077e <__aeabi_fsub+0x4a6>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d046      	beq.n	8000438 <__aeabi_fsub+0x160>
 80003aa:	2dff      	cmp	r5, #255	@ 0xff
 80003ac:	d100      	bne.n	80003b0 <__aeabi_fsub+0xd8>
 80003ae:	e0a4      	b.n	80004fa <__aeabi_fsub+0x222>
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	04d2      	lsls	r2, r2, #19
 80003b4:	4311      	orrs	r1, r2
 80003b6:	2b1b      	cmp	r3, #27
 80003b8:	dc00      	bgt.n	80003bc <__aeabi_fsub+0xe4>
 80003ba:	e0fb      	b.n	80005b4 <__aeabi_fsub+0x2dc>
 80003bc:	2305      	movs	r3, #5
 80003be:	4698      	mov	r8, r3
 80003c0:	002b      	movs	r3, r5
 80003c2:	44c4      	add	ip, r8
 80003c4:	4662      	mov	r2, ip
 80003c6:	08d7      	lsrs	r7, r2, #3
 80003c8:	2bff      	cmp	r3, #255	@ 0xff
 80003ca:	d100      	bne.n	80003ce <__aeabi_fsub+0xf6>
 80003cc:	e095      	b.n	80004fa <__aeabi_fsub+0x222>
 80003ce:	027a      	lsls	r2, r7, #9
 80003d0:	0a52      	lsrs	r2, r2, #9
 80003d2:	b2d8      	uxtb	r0, r3
 80003d4:	e7dc      	b.n	8000390 <__aeabi_fsub+0xb8>
 80003d6:	002b      	movs	r3, r5
 80003d8:	3bff      	subs	r3, #255	@ 0xff
 80003da:	4699      	mov	r9, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d118      	bne.n	8000412 <__aeabi_fsub+0x13a>
 80003e0:	2301      	movs	r3, #1
 80003e2:	405e      	eors	r6, r3
 80003e4:	42b4      	cmp	r4, r6
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x112>
 80003e8:	e0ca      	b.n	8000580 <__aeabi_fsub+0x2a8>
 80003ea:	464b      	mov	r3, r9
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d02d      	beq.n	800044c <__aeabi_fsub+0x174>
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d000      	beq.n	80003f6 <__aeabi_fsub+0x11e>
 80003f4:	e13c      	b.n	8000670 <__aeabi_fsub+0x398>
 80003f6:	23ff      	movs	r3, #255	@ 0xff
 80003f8:	4664      	mov	r4, ip
 80003fa:	2c00      	cmp	r4, #0
 80003fc:	d100      	bne.n	8000400 <__aeabi_fsub+0x128>
 80003fe:	e15f      	b.n	80006c0 <__aeabi_fsub+0x3e8>
 8000400:	1e5d      	subs	r5, r3, #1
 8000402:	2b01      	cmp	r3, #1
 8000404:	d100      	bne.n	8000408 <__aeabi_fsub+0x130>
 8000406:	e174      	b.n	80006f2 <__aeabi_fsub+0x41a>
 8000408:	0034      	movs	r4, r6
 800040a:	2bff      	cmp	r3, #255	@ 0xff
 800040c:	d074      	beq.n	80004f8 <__aeabi_fsub+0x220>
 800040e:	002b      	movs	r3, r5
 8000410:	e103      	b.n	800061a <__aeabi_fsub+0x342>
 8000412:	42b4      	cmp	r4, r6
 8000414:	d100      	bne.n	8000418 <__aeabi_fsub+0x140>
 8000416:	e09c      	b.n	8000552 <__aeabi_fsub+0x27a>
 8000418:	2b00      	cmp	r3, #0
 800041a:	d017      	beq.n	800044c <__aeabi_fsub+0x174>
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0ea      	beq.n	80003f6 <__aeabi_fsub+0x11e>
 8000420:	0007      	movs	r7, r0
 8000422:	0034      	movs	r4, r6
 8000424:	e06c      	b.n	8000500 <__aeabi_fsub+0x228>
 8000426:	2900      	cmp	r1, #0
 8000428:	d0cc      	beq.n	80003c4 <__aeabi_fsub+0xec>
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	2b01      	cmp	r3, #1
 800042e:	d02b      	beq.n	8000488 <__aeabi_fsub+0x1b0>
 8000430:	2bff      	cmp	r3, #255	@ 0xff
 8000432:	d062      	beq.n	80004fa <__aeabi_fsub+0x222>
 8000434:	0013      	movs	r3, r2
 8000436:	e773      	b.n	8000320 <__aeabi_fsub+0x48>
 8000438:	2900      	cmp	r1, #0
 800043a:	d0c3      	beq.n	80003c4 <__aeabi_fsub+0xec>
 800043c:	1e5a      	subs	r2, r3, #1
 800043e:	2b01      	cmp	r3, #1
 8000440:	d100      	bne.n	8000444 <__aeabi_fsub+0x16c>
 8000442:	e11e      	b.n	8000682 <__aeabi_fsub+0x3aa>
 8000444:	2bff      	cmp	r3, #255	@ 0xff
 8000446:	d058      	beq.n	80004fa <__aeabi_fsub+0x222>
 8000448:	0013      	movs	r3, r2
 800044a:	e7b4      	b.n	80003b6 <__aeabi_fsub+0xde>
 800044c:	22fe      	movs	r2, #254	@ 0xfe
 800044e:	1c6b      	adds	r3, r5, #1
 8000450:	421a      	tst	r2, r3
 8000452:	d10d      	bne.n	8000470 <__aeabi_fsub+0x198>
 8000454:	2d00      	cmp	r5, #0
 8000456:	d060      	beq.n	800051a <__aeabi_fsub+0x242>
 8000458:	4663      	mov	r3, ip
 800045a:	2b00      	cmp	r3, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fsub+0x188>
 800045e:	e120      	b.n	80006a2 <__aeabi_fsub+0x3ca>
 8000460:	2900      	cmp	r1, #0
 8000462:	d000      	beq.n	8000466 <__aeabi_fsub+0x18e>
 8000464:	e128      	b.n	80006b8 <__aeabi_fsub+0x3e0>
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	2400      	movs	r4, #0
 800046a:	20ff      	movs	r0, #255	@ 0xff
 800046c:	03d2      	lsls	r2, r2, #15
 800046e:	e78f      	b.n	8000390 <__aeabi_fsub+0xb8>
 8000470:	4663      	mov	r3, ip
 8000472:	1a5f      	subs	r7, r3, r1
 8000474:	017b      	lsls	r3, r7, #5
 8000476:	d500      	bpl.n	800047a <__aeabi_fsub+0x1a2>
 8000478:	e0fe      	b.n	8000678 <__aeabi_fsub+0x3a0>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d000      	beq.n	8000480 <__aeabi_fsub+0x1a8>
 800047e:	e765      	b.n	800034c <__aeabi_fsub+0x74>
 8000480:	2400      	movs	r4, #0
 8000482:	2000      	movs	r0, #0
 8000484:	2200      	movs	r2, #0
 8000486:	e783      	b.n	8000390 <__aeabi_fsub+0xb8>
 8000488:	4663      	mov	r3, ip
 800048a:	1a59      	subs	r1, r3, r1
 800048c:	014b      	lsls	r3, r1, #5
 800048e:	d400      	bmi.n	8000492 <__aeabi_fsub+0x1ba>
 8000490:	e119      	b.n	80006c6 <__aeabi_fsub+0x3ee>
 8000492:	018f      	lsls	r7, r1, #6
 8000494:	09bf      	lsrs	r7, r7, #6
 8000496:	0038      	movs	r0, r7
 8000498:	f002 f91a 	bl	80026d0 <__clzsi2>
 800049c:	003b      	movs	r3, r7
 800049e:	3805      	subs	r0, #5
 80004a0:	4083      	lsls	r3, r0
 80004a2:	2501      	movs	r5, #1
 80004a4:	2220      	movs	r2, #32
 80004a6:	1b40      	subs	r0, r0, r5
 80004a8:	3001      	adds	r0, #1
 80004aa:	1a12      	subs	r2, r2, r0
 80004ac:	0019      	movs	r1, r3
 80004ae:	4093      	lsls	r3, r2
 80004b0:	40c1      	lsrs	r1, r0
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	4193      	sbcs	r3, r2
 80004b6:	4319      	orrs	r1, r3
 80004b8:	468c      	mov	ip, r1
 80004ba:	1e0b      	subs	r3, r1, #0
 80004bc:	d0e1      	beq.n	8000482 <__aeabi_fsub+0x1aa>
 80004be:	075b      	lsls	r3, r3, #29
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fsub+0x1ec>
 80004c2:	e152      	b.n	800076a <__aeabi_fsub+0x492>
 80004c4:	230f      	movs	r3, #15
 80004c6:	2500      	movs	r5, #0
 80004c8:	400b      	ands	r3, r1
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d000      	beq.n	80004d0 <__aeabi_fsub+0x1f8>
 80004ce:	e752      	b.n	8000376 <__aeabi_fsub+0x9e>
 80004d0:	2001      	movs	r0, #1
 80004d2:	014a      	lsls	r2, r1, #5
 80004d4:	d400      	bmi.n	80004d8 <__aeabi_fsub+0x200>
 80004d6:	e092      	b.n	80005fe <__aeabi_fsub+0x326>
 80004d8:	b2c0      	uxtb	r0, r0
 80004da:	4663      	mov	r3, ip
 80004dc:	019a      	lsls	r2, r3, #6
 80004de:	0a52      	lsrs	r2, r2, #9
 80004e0:	e756      	b.n	8000390 <__aeabi_fsub+0xb8>
 80004e2:	4663      	mov	r3, ip
 80004e4:	075b      	lsls	r3, r3, #29
 80004e6:	d005      	beq.n	80004f4 <__aeabi_fsub+0x21c>
 80004e8:	230f      	movs	r3, #15
 80004ea:	4662      	mov	r2, ip
 80004ec:	4013      	ands	r3, r2
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fsub+0x21c>
 80004f2:	e740      	b.n	8000376 <__aeabi_fsub+0x9e>
 80004f4:	002b      	movs	r3, r5
 80004f6:	e765      	b.n	80003c4 <__aeabi_fsub+0xec>
 80004f8:	0007      	movs	r7, r0
 80004fa:	2f00      	cmp	r7, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fsub+0x228>
 80004fe:	e745      	b.n	800038c <__aeabi_fsub+0xb4>
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	03d2      	lsls	r2, r2, #15
 8000504:	433a      	orrs	r2, r7
 8000506:	0252      	lsls	r2, r2, #9
 8000508:	20ff      	movs	r0, #255	@ 0xff
 800050a:	0a52      	lsrs	r2, r2, #9
 800050c:	e740      	b.n	8000390 <__aeabi_fsub+0xb8>
 800050e:	2b00      	cmp	r3, #0
 8000510:	d179      	bne.n	8000606 <__aeabi_fsub+0x32e>
 8000512:	22fe      	movs	r2, #254	@ 0xfe
 8000514:	1c6b      	adds	r3, r5, #1
 8000516:	421a      	tst	r2, r3
 8000518:	d1aa      	bne.n	8000470 <__aeabi_fsub+0x198>
 800051a:	4663      	mov	r3, ip
 800051c:	2b00      	cmp	r3, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_fsub+0x24a>
 8000520:	e0f5      	b.n	800070e <__aeabi_fsub+0x436>
 8000522:	2900      	cmp	r1, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_fsub+0x250>
 8000526:	e0d1      	b.n	80006cc <__aeabi_fsub+0x3f4>
 8000528:	1a5f      	subs	r7, r3, r1
 800052a:	2380      	movs	r3, #128	@ 0x80
 800052c:	04db      	lsls	r3, r3, #19
 800052e:	421f      	tst	r7, r3
 8000530:	d100      	bne.n	8000534 <__aeabi_fsub+0x25c>
 8000532:	e10e      	b.n	8000752 <__aeabi_fsub+0x47a>
 8000534:	4662      	mov	r2, ip
 8000536:	2401      	movs	r4, #1
 8000538:	1a8a      	subs	r2, r1, r2
 800053a:	4694      	mov	ip, r2
 800053c:	2000      	movs	r0, #0
 800053e:	4034      	ands	r4, r6
 8000540:	2a00      	cmp	r2, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fsub+0x26e>
 8000544:	e724      	b.n	8000390 <__aeabi_fsub+0xb8>
 8000546:	2001      	movs	r0, #1
 8000548:	421a      	tst	r2, r3
 800054a:	d1c6      	bne.n	80004da <__aeabi_fsub+0x202>
 800054c:	2300      	movs	r3, #0
 800054e:	08d7      	lsrs	r7, r2, #3
 8000550:	e73d      	b.n	80003ce <__aeabi_fsub+0xf6>
 8000552:	2b00      	cmp	r3, #0
 8000554:	d017      	beq.n	8000586 <__aeabi_fsub+0x2ae>
 8000556:	2d00      	cmp	r5, #0
 8000558:	d000      	beq.n	800055c <__aeabi_fsub+0x284>
 800055a:	e0af      	b.n	80006bc <__aeabi_fsub+0x3e4>
 800055c:	23ff      	movs	r3, #255	@ 0xff
 800055e:	4665      	mov	r5, ip
 8000560:	2d00      	cmp	r5, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_fsub+0x28e>
 8000564:	e0ad      	b.n	80006c2 <__aeabi_fsub+0x3ea>
 8000566:	1e5e      	subs	r6, r3, #1
 8000568:	2b01      	cmp	r3, #1
 800056a:	d100      	bne.n	800056e <__aeabi_fsub+0x296>
 800056c:	e089      	b.n	8000682 <__aeabi_fsub+0x3aa>
 800056e:	2bff      	cmp	r3, #255	@ 0xff
 8000570:	d0c2      	beq.n	80004f8 <__aeabi_fsub+0x220>
 8000572:	2e1b      	cmp	r6, #27
 8000574:	dc00      	bgt.n	8000578 <__aeabi_fsub+0x2a0>
 8000576:	e0ab      	b.n	80006d0 <__aeabi_fsub+0x3f8>
 8000578:	1d4b      	adds	r3, r1, #5
 800057a:	469c      	mov	ip, r3
 800057c:	0013      	movs	r3, r2
 800057e:	e721      	b.n	80003c4 <__aeabi_fsub+0xec>
 8000580:	464b      	mov	r3, r9
 8000582:	2b00      	cmp	r3, #0
 8000584:	d170      	bne.n	8000668 <__aeabi_fsub+0x390>
 8000586:	22fe      	movs	r2, #254	@ 0xfe
 8000588:	1c6b      	adds	r3, r5, #1
 800058a:	421a      	tst	r2, r3
 800058c:	d15e      	bne.n	800064c <__aeabi_fsub+0x374>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d000      	beq.n	8000594 <__aeabi_fsub+0x2bc>
 8000592:	e0c3      	b.n	800071c <__aeabi_fsub+0x444>
 8000594:	4663      	mov	r3, ip
 8000596:	2b00      	cmp	r3, #0
 8000598:	d100      	bne.n	800059c <__aeabi_fsub+0x2c4>
 800059a:	e0d0      	b.n	800073e <__aeabi_fsub+0x466>
 800059c:	2900      	cmp	r1, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fsub+0x2ca>
 80005a0:	e094      	b.n	80006cc <__aeabi_fsub+0x3f4>
 80005a2:	000a      	movs	r2, r1
 80005a4:	4462      	add	r2, ip
 80005a6:	0153      	lsls	r3, r2, #5
 80005a8:	d400      	bmi.n	80005ac <__aeabi_fsub+0x2d4>
 80005aa:	e0d8      	b.n	800075e <__aeabi_fsub+0x486>
 80005ac:	0192      	lsls	r2, r2, #6
 80005ae:	2001      	movs	r0, #1
 80005b0:	0a52      	lsrs	r2, r2, #9
 80005b2:	e6ed      	b.n	8000390 <__aeabi_fsub+0xb8>
 80005b4:	0008      	movs	r0, r1
 80005b6:	2220      	movs	r2, #32
 80005b8:	40d8      	lsrs	r0, r3
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	4099      	lsls	r1, r3
 80005be:	000b      	movs	r3, r1
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	4193      	sbcs	r3, r2
 80005c4:	4303      	orrs	r3, r0
 80005c6:	449c      	add	ip, r3
 80005c8:	4663      	mov	r3, ip
 80005ca:	015b      	lsls	r3, r3, #5
 80005cc:	d589      	bpl.n	80004e2 <__aeabi_fsub+0x20a>
 80005ce:	3501      	adds	r5, #1
 80005d0:	2dff      	cmp	r5, #255	@ 0xff
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fsub+0x2fe>
 80005d4:	e6da      	b.n	800038c <__aeabi_fsub+0xb4>
 80005d6:	4662      	mov	r2, ip
 80005d8:	2301      	movs	r3, #1
 80005da:	4919      	ldr	r1, [pc, #100]	@ (8000640 <__aeabi_fsub+0x368>)
 80005dc:	4013      	ands	r3, r2
 80005de:	0852      	lsrs	r2, r2, #1
 80005e0:	400a      	ands	r2, r1
 80005e2:	431a      	orrs	r2, r3
 80005e4:	0013      	movs	r3, r2
 80005e6:	4694      	mov	ip, r2
 80005e8:	075b      	lsls	r3, r3, #29
 80005ea:	d004      	beq.n	80005f6 <__aeabi_fsub+0x31e>
 80005ec:	230f      	movs	r3, #15
 80005ee:	4013      	ands	r3, r2
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fsub+0x31e>
 80005f4:	e6bf      	b.n	8000376 <__aeabi_fsub+0x9e>
 80005f6:	4663      	mov	r3, ip
 80005f8:	015b      	lsls	r3, r3, #5
 80005fa:	d500      	bpl.n	80005fe <__aeabi_fsub+0x326>
 80005fc:	e6c2      	b.n	8000384 <__aeabi_fsub+0xac>
 80005fe:	4663      	mov	r3, ip
 8000600:	08df      	lsrs	r7, r3, #3
 8000602:	002b      	movs	r3, r5
 8000604:	e6e3      	b.n	80003ce <__aeabi_fsub+0xf6>
 8000606:	1b53      	subs	r3, r2, r5
 8000608:	2d00      	cmp	r5, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fsub+0x336>
 800060c:	e6f4      	b.n	80003f8 <__aeabi_fsub+0x120>
 800060e:	2080      	movs	r0, #128	@ 0x80
 8000610:	4664      	mov	r4, ip
 8000612:	04c0      	lsls	r0, r0, #19
 8000614:	4304      	orrs	r4, r0
 8000616:	46a4      	mov	ip, r4
 8000618:	0034      	movs	r4, r6
 800061a:	2001      	movs	r0, #1
 800061c:	2b1b      	cmp	r3, #27
 800061e:	dc09      	bgt.n	8000634 <__aeabi_fsub+0x35c>
 8000620:	2520      	movs	r5, #32
 8000622:	4660      	mov	r0, ip
 8000624:	40d8      	lsrs	r0, r3
 8000626:	1aeb      	subs	r3, r5, r3
 8000628:	4665      	mov	r5, ip
 800062a:	409d      	lsls	r5, r3
 800062c:	002b      	movs	r3, r5
 800062e:	1e5d      	subs	r5, r3, #1
 8000630:	41ab      	sbcs	r3, r5
 8000632:	4318      	orrs	r0, r3
 8000634:	1a0b      	subs	r3, r1, r0
 8000636:	469c      	mov	ip, r3
 8000638:	0015      	movs	r5, r2
 800063a:	e680      	b.n	800033e <__aeabi_fsub+0x66>
 800063c:	fbffffff 	.word	0xfbffffff
 8000640:	7dffffff 	.word	0x7dffffff
 8000644:	22fe      	movs	r2, #254	@ 0xfe
 8000646:	1c6b      	adds	r3, r5, #1
 8000648:	4213      	tst	r3, r2
 800064a:	d0a3      	beq.n	8000594 <__aeabi_fsub+0x2bc>
 800064c:	2bff      	cmp	r3, #255	@ 0xff
 800064e:	d100      	bne.n	8000652 <__aeabi_fsub+0x37a>
 8000650:	e69c      	b.n	800038c <__aeabi_fsub+0xb4>
 8000652:	4461      	add	r1, ip
 8000654:	0849      	lsrs	r1, r1, #1
 8000656:	074a      	lsls	r2, r1, #29
 8000658:	d049      	beq.n	80006ee <__aeabi_fsub+0x416>
 800065a:	220f      	movs	r2, #15
 800065c:	400a      	ands	r2, r1
 800065e:	2a04      	cmp	r2, #4
 8000660:	d045      	beq.n	80006ee <__aeabi_fsub+0x416>
 8000662:	1d0a      	adds	r2, r1, #4
 8000664:	4694      	mov	ip, r2
 8000666:	e6ad      	b.n	80003c4 <__aeabi_fsub+0xec>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fsub+0x396>
 800066c:	e776      	b.n	800055c <__aeabi_fsub+0x284>
 800066e:	e68d      	b.n	800038c <__aeabi_fsub+0xb4>
 8000670:	0034      	movs	r4, r6
 8000672:	20ff      	movs	r0, #255	@ 0xff
 8000674:	2200      	movs	r2, #0
 8000676:	e68b      	b.n	8000390 <__aeabi_fsub+0xb8>
 8000678:	4663      	mov	r3, ip
 800067a:	2401      	movs	r4, #1
 800067c:	1acf      	subs	r7, r1, r3
 800067e:	4034      	ands	r4, r6
 8000680:	e664      	b.n	800034c <__aeabi_fsub+0x74>
 8000682:	4461      	add	r1, ip
 8000684:	014b      	lsls	r3, r1, #5
 8000686:	d56d      	bpl.n	8000764 <__aeabi_fsub+0x48c>
 8000688:	0848      	lsrs	r0, r1, #1
 800068a:	4944      	ldr	r1, [pc, #272]	@ (800079c <__aeabi_fsub+0x4c4>)
 800068c:	4001      	ands	r1, r0
 800068e:	0743      	lsls	r3, r0, #29
 8000690:	d02c      	beq.n	80006ec <__aeabi_fsub+0x414>
 8000692:	230f      	movs	r3, #15
 8000694:	4003      	ands	r3, r0
 8000696:	2b04      	cmp	r3, #4
 8000698:	d028      	beq.n	80006ec <__aeabi_fsub+0x414>
 800069a:	1d0b      	adds	r3, r1, #4
 800069c:	469c      	mov	ip, r3
 800069e:	2302      	movs	r3, #2
 80006a0:	e690      	b.n	80003c4 <__aeabi_fsub+0xec>
 80006a2:	2900      	cmp	r1, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fsub+0x3d0>
 80006a6:	e72b      	b.n	8000500 <__aeabi_fsub+0x228>
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	03db      	lsls	r3, r3, #15
 80006ac:	429f      	cmp	r7, r3
 80006ae:	d200      	bcs.n	80006b2 <__aeabi_fsub+0x3da>
 80006b0:	e726      	b.n	8000500 <__aeabi_fsub+0x228>
 80006b2:	4298      	cmp	r0, r3
 80006b4:	d300      	bcc.n	80006b8 <__aeabi_fsub+0x3e0>
 80006b6:	e723      	b.n	8000500 <__aeabi_fsub+0x228>
 80006b8:	2401      	movs	r4, #1
 80006ba:	4034      	ands	r4, r6
 80006bc:	0007      	movs	r7, r0
 80006be:	e71f      	b.n	8000500 <__aeabi_fsub+0x228>
 80006c0:	0034      	movs	r4, r6
 80006c2:	468c      	mov	ip, r1
 80006c4:	e67e      	b.n	80003c4 <__aeabi_fsub+0xec>
 80006c6:	2301      	movs	r3, #1
 80006c8:	08cf      	lsrs	r7, r1, #3
 80006ca:	e680      	b.n	80003ce <__aeabi_fsub+0xf6>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e67e      	b.n	80003ce <__aeabi_fsub+0xf6>
 80006d0:	2020      	movs	r0, #32
 80006d2:	4665      	mov	r5, ip
 80006d4:	1b80      	subs	r0, r0, r6
 80006d6:	4085      	lsls	r5, r0
 80006d8:	4663      	mov	r3, ip
 80006da:	0028      	movs	r0, r5
 80006dc:	40f3      	lsrs	r3, r6
 80006de:	1e45      	subs	r5, r0, #1
 80006e0:	41a8      	sbcs	r0, r5
 80006e2:	4303      	orrs	r3, r0
 80006e4:	469c      	mov	ip, r3
 80006e6:	0015      	movs	r5, r2
 80006e8:	448c      	add	ip, r1
 80006ea:	e76d      	b.n	80005c8 <__aeabi_fsub+0x2f0>
 80006ec:	2302      	movs	r3, #2
 80006ee:	08cf      	lsrs	r7, r1, #3
 80006f0:	e66d      	b.n	80003ce <__aeabi_fsub+0xf6>
 80006f2:	1b0f      	subs	r7, r1, r4
 80006f4:	017b      	lsls	r3, r7, #5
 80006f6:	d528      	bpl.n	800074a <__aeabi_fsub+0x472>
 80006f8:	01bf      	lsls	r7, r7, #6
 80006fa:	09bf      	lsrs	r7, r7, #6
 80006fc:	0038      	movs	r0, r7
 80006fe:	f001 ffe7 	bl	80026d0 <__clzsi2>
 8000702:	003b      	movs	r3, r7
 8000704:	3805      	subs	r0, #5
 8000706:	4083      	lsls	r3, r0
 8000708:	0034      	movs	r4, r6
 800070a:	2501      	movs	r5, #1
 800070c:	e6ca      	b.n	80004a4 <__aeabi_fsub+0x1cc>
 800070e:	2900      	cmp	r1, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fsub+0x43c>
 8000712:	e6b5      	b.n	8000480 <__aeabi_fsub+0x1a8>
 8000714:	2401      	movs	r4, #1
 8000716:	0007      	movs	r7, r0
 8000718:	4034      	ands	r4, r6
 800071a:	e658      	b.n	80003ce <__aeabi_fsub+0xf6>
 800071c:	4663      	mov	r3, ip
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fsub+0x44c>
 8000722:	e6e9      	b.n	80004f8 <__aeabi_fsub+0x220>
 8000724:	2900      	cmp	r1, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fsub+0x452>
 8000728:	e6ea      	b.n	8000500 <__aeabi_fsub+0x228>
 800072a:	2380      	movs	r3, #128	@ 0x80
 800072c:	03db      	lsls	r3, r3, #15
 800072e:	429f      	cmp	r7, r3
 8000730:	d200      	bcs.n	8000734 <__aeabi_fsub+0x45c>
 8000732:	e6e5      	b.n	8000500 <__aeabi_fsub+0x228>
 8000734:	4298      	cmp	r0, r3
 8000736:	d300      	bcc.n	800073a <__aeabi_fsub+0x462>
 8000738:	e6e2      	b.n	8000500 <__aeabi_fsub+0x228>
 800073a:	0007      	movs	r7, r0
 800073c:	e6e0      	b.n	8000500 <__aeabi_fsub+0x228>
 800073e:	2900      	cmp	r1, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0x46c>
 8000742:	e69e      	b.n	8000482 <__aeabi_fsub+0x1aa>
 8000744:	2300      	movs	r3, #0
 8000746:	08cf      	lsrs	r7, r1, #3
 8000748:	e641      	b.n	80003ce <__aeabi_fsub+0xf6>
 800074a:	0034      	movs	r4, r6
 800074c:	2301      	movs	r3, #1
 800074e:	08ff      	lsrs	r7, r7, #3
 8000750:	e63d      	b.n	80003ce <__aeabi_fsub+0xf6>
 8000752:	2f00      	cmp	r7, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fsub+0x480>
 8000756:	e693      	b.n	8000480 <__aeabi_fsub+0x1a8>
 8000758:	2300      	movs	r3, #0
 800075a:	08ff      	lsrs	r7, r7, #3
 800075c:	e637      	b.n	80003ce <__aeabi_fsub+0xf6>
 800075e:	2300      	movs	r3, #0
 8000760:	08d7      	lsrs	r7, r2, #3
 8000762:	e634      	b.n	80003ce <__aeabi_fsub+0xf6>
 8000764:	2301      	movs	r3, #1
 8000766:	08cf      	lsrs	r7, r1, #3
 8000768:	e631      	b.n	80003ce <__aeabi_fsub+0xf6>
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	000b      	movs	r3, r1
 800076e:	04d2      	lsls	r2, r2, #19
 8000770:	2001      	movs	r0, #1
 8000772:	4013      	ands	r3, r2
 8000774:	4211      	tst	r1, r2
 8000776:	d000      	beq.n	800077a <__aeabi_fsub+0x4a2>
 8000778:	e6ae      	b.n	80004d8 <__aeabi_fsub+0x200>
 800077a:	08cf      	lsrs	r7, r1, #3
 800077c:	e627      	b.n	80003ce <__aeabi_fsub+0xf6>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x4ac>
 8000782:	e75f      	b.n	8000644 <__aeabi_fsub+0x36c>
 8000784:	1b56      	subs	r6, r2, r5
 8000786:	2d00      	cmp	r5, #0
 8000788:	d101      	bne.n	800078e <__aeabi_fsub+0x4b6>
 800078a:	0033      	movs	r3, r6
 800078c:	e6e7      	b.n	800055e <__aeabi_fsub+0x286>
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	4660      	mov	r0, ip
 8000792:	04db      	lsls	r3, r3, #19
 8000794:	4318      	orrs	r0, r3
 8000796:	4684      	mov	ip, r0
 8000798:	e6eb      	b.n	8000572 <__aeabi_fsub+0x29a>
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	7dffffff 	.word	0x7dffffff

080007a0 <__aeabi_dadd>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	464f      	mov	r7, r9
 80007a4:	4646      	mov	r6, r8
 80007a6:	46d6      	mov	lr, sl
 80007a8:	b5c0      	push	{r6, r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	9000      	str	r0, [sp, #0]
 80007ae:	9101      	str	r1, [sp, #4]
 80007b0:	030e      	lsls	r6, r1, #12
 80007b2:	004c      	lsls	r4, r1, #1
 80007b4:	0fcd      	lsrs	r5, r1, #31
 80007b6:	0a71      	lsrs	r1, r6, #9
 80007b8:	9e00      	ldr	r6, [sp, #0]
 80007ba:	005f      	lsls	r7, r3, #1
 80007bc:	0f76      	lsrs	r6, r6, #29
 80007be:	430e      	orrs	r6, r1
 80007c0:	9900      	ldr	r1, [sp, #0]
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	00c9      	lsls	r1, r1, #3
 80007c8:	4689      	mov	r9, r1
 80007ca:	0319      	lsls	r1, r3, #12
 80007cc:	0d7b      	lsrs	r3, r7, #21
 80007ce:	4698      	mov	r8, r3
 80007d0:	9b01      	ldr	r3, [sp, #4]
 80007d2:	0a49      	lsrs	r1, r1, #9
 80007d4:	0fdb      	lsrs	r3, r3, #31
 80007d6:	469c      	mov	ip, r3
 80007d8:	9b00      	ldr	r3, [sp, #0]
 80007da:	9a00      	ldr	r2, [sp, #0]
 80007dc:	0f5b      	lsrs	r3, r3, #29
 80007de:	430b      	orrs	r3, r1
 80007e0:	4641      	mov	r1, r8
 80007e2:	0d64      	lsrs	r4, r4, #21
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	1a61      	subs	r1, r4, r1
 80007e8:	4565      	cmp	r5, ip
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x4e>
 80007ec:	e0a6      	b.n	800093c <__aeabi_dadd+0x19c>
 80007ee:	2900      	cmp	r1, #0
 80007f0:	dd72      	ble.n	80008d8 <__aeabi_dadd+0x138>
 80007f2:	4647      	mov	r7, r8
 80007f4:	2f00      	cmp	r7, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x5a>
 80007f8:	e0dd      	b.n	80009b6 <__aeabi_dadd+0x216>
 80007fa:	4fcc      	ldr	r7, [pc, #816]	@ (8000b2c <__aeabi_dadd+0x38c>)
 80007fc:	42bc      	cmp	r4, r7
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x62>
 8000800:	e19a      	b.n	8000b38 <__aeabi_dadd+0x398>
 8000802:	2701      	movs	r7, #1
 8000804:	2938      	cmp	r1, #56	@ 0x38
 8000806:	dc17      	bgt.n	8000838 <__aeabi_dadd+0x98>
 8000808:	2780      	movs	r7, #128	@ 0x80
 800080a:	043f      	lsls	r7, r7, #16
 800080c:	433b      	orrs	r3, r7
 800080e:	291f      	cmp	r1, #31
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x74>
 8000812:	e1dd      	b.n	8000bd0 <__aeabi_dadd+0x430>
 8000814:	2720      	movs	r7, #32
 8000816:	1a78      	subs	r0, r7, r1
 8000818:	001f      	movs	r7, r3
 800081a:	4087      	lsls	r7, r0
 800081c:	46ba      	mov	sl, r7
 800081e:	0017      	movs	r7, r2
 8000820:	40cf      	lsrs	r7, r1
 8000822:	4684      	mov	ip, r0
 8000824:	0038      	movs	r0, r7
 8000826:	4657      	mov	r7, sl
 8000828:	4307      	orrs	r7, r0
 800082a:	4660      	mov	r0, ip
 800082c:	4082      	lsls	r2, r0
 800082e:	40cb      	lsrs	r3, r1
 8000830:	1e50      	subs	r0, r2, #1
 8000832:	4182      	sbcs	r2, r0
 8000834:	1af6      	subs	r6, r6, r3
 8000836:	4317      	orrs	r7, r2
 8000838:	464b      	mov	r3, r9
 800083a:	1bdf      	subs	r7, r3, r7
 800083c:	45b9      	cmp	r9, r7
 800083e:	4180      	sbcs	r0, r0
 8000840:	4240      	negs	r0, r0
 8000842:	1a36      	subs	r6, r6, r0
 8000844:	0233      	lsls	r3, r6, #8
 8000846:	d400      	bmi.n	800084a <__aeabi_dadd+0xaa>
 8000848:	e0ff      	b.n	8000a4a <__aeabi_dadd+0x2aa>
 800084a:	0276      	lsls	r6, r6, #9
 800084c:	0a76      	lsrs	r6, r6, #9
 800084e:	2e00      	cmp	r6, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0xb4>
 8000852:	e13c      	b.n	8000ace <__aeabi_dadd+0x32e>
 8000854:	0030      	movs	r0, r6
 8000856:	f001 ff3b 	bl	80026d0 <__clzsi2>
 800085a:	0003      	movs	r3, r0
 800085c:	3b08      	subs	r3, #8
 800085e:	2120      	movs	r1, #32
 8000860:	0038      	movs	r0, r7
 8000862:	1aca      	subs	r2, r1, r3
 8000864:	40d0      	lsrs	r0, r2
 8000866:	409e      	lsls	r6, r3
 8000868:	0002      	movs	r2, r0
 800086a:	409f      	lsls	r7, r3
 800086c:	4332      	orrs	r2, r6
 800086e:	429c      	cmp	r4, r3
 8000870:	dd00      	ble.n	8000874 <__aeabi_dadd+0xd4>
 8000872:	e1a6      	b.n	8000bc2 <__aeabi_dadd+0x422>
 8000874:	1b18      	subs	r0, r3, r4
 8000876:	3001      	adds	r0, #1
 8000878:	1a09      	subs	r1, r1, r0
 800087a:	003e      	movs	r6, r7
 800087c:	408f      	lsls	r7, r1
 800087e:	40c6      	lsrs	r6, r0
 8000880:	1e7b      	subs	r3, r7, #1
 8000882:	419f      	sbcs	r7, r3
 8000884:	0013      	movs	r3, r2
 8000886:	408b      	lsls	r3, r1
 8000888:	4337      	orrs	r7, r6
 800088a:	431f      	orrs	r7, r3
 800088c:	40c2      	lsrs	r2, r0
 800088e:	003b      	movs	r3, r7
 8000890:	0016      	movs	r6, r2
 8000892:	2400      	movs	r4, #0
 8000894:	4313      	orrs	r3, r2
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0xfa>
 8000898:	e1df      	b.n	8000c5a <__aeabi_dadd+0x4ba>
 800089a:	077b      	lsls	r3, r7, #29
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x100>
 800089e:	e332      	b.n	8000f06 <__aeabi_dadd+0x766>
 80008a0:	230f      	movs	r3, #15
 80008a2:	003a      	movs	r2, r7
 80008a4:	403b      	ands	r3, r7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d004      	beq.n	80008b4 <__aeabi_dadd+0x114>
 80008aa:	1d3a      	adds	r2, r7, #4
 80008ac:	42ba      	cmp	r2, r7
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	19f6      	adds	r6, r6, r7
 80008b4:	0233      	lsls	r3, r6, #8
 80008b6:	d400      	bmi.n	80008ba <__aeabi_dadd+0x11a>
 80008b8:	e323      	b.n	8000f02 <__aeabi_dadd+0x762>
 80008ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000b2c <__aeabi_dadd+0x38c>)
 80008bc:	3401      	adds	r4, #1
 80008be:	429c      	cmp	r4, r3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x124>
 80008c2:	e0b4      	b.n	8000a2e <__aeabi_dadd+0x28e>
 80008c4:	4b9a      	ldr	r3, [pc, #616]	@ (8000b30 <__aeabi_dadd+0x390>)
 80008c6:	0564      	lsls	r4, r4, #21
 80008c8:	401e      	ands	r6, r3
 80008ca:	0d64      	lsrs	r4, r4, #21
 80008cc:	0777      	lsls	r7, r6, #29
 80008ce:	08d2      	lsrs	r2, r2, #3
 80008d0:	0276      	lsls	r6, r6, #9
 80008d2:	4317      	orrs	r7, r2
 80008d4:	0b36      	lsrs	r6, r6, #12
 80008d6:	e0ac      	b.n	8000a32 <__aeabi_dadd+0x292>
 80008d8:	2900      	cmp	r1, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x13e>
 80008dc:	e07e      	b.n	80009dc <__aeabi_dadd+0x23c>
 80008de:	4641      	mov	r1, r8
 80008e0:	1b09      	subs	r1, r1, r4
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x148>
 80008e6:	e160      	b.n	8000baa <__aeabi_dadd+0x40a>
 80008e8:	0034      	movs	r4, r6
 80008ea:	4648      	mov	r0, r9
 80008ec:	4304      	orrs	r4, r0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x152>
 80008f0:	e1c9      	b.n	8000c86 <__aeabi_dadd+0x4e6>
 80008f2:	1e4c      	subs	r4, r1, #1
 80008f4:	2901      	cmp	r1, #1
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x15a>
 80008f8:	e22e      	b.n	8000d58 <__aeabi_dadd+0x5b8>
 80008fa:	4d8c      	ldr	r5, [pc, #560]	@ (8000b2c <__aeabi_dadd+0x38c>)
 80008fc:	42a9      	cmp	r1, r5
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x162>
 8000900:	e224      	b.n	8000d4c <__aeabi_dadd+0x5ac>
 8000902:	2701      	movs	r7, #1
 8000904:	2c38      	cmp	r4, #56	@ 0x38
 8000906:	dc11      	bgt.n	800092c <__aeabi_dadd+0x18c>
 8000908:	0021      	movs	r1, r4
 800090a:	291f      	cmp	r1, #31
 800090c:	dd00      	ble.n	8000910 <__aeabi_dadd+0x170>
 800090e:	e20b      	b.n	8000d28 <__aeabi_dadd+0x588>
 8000910:	2420      	movs	r4, #32
 8000912:	0037      	movs	r7, r6
 8000914:	4648      	mov	r0, r9
 8000916:	1a64      	subs	r4, r4, r1
 8000918:	40a7      	lsls	r7, r4
 800091a:	40c8      	lsrs	r0, r1
 800091c:	4307      	orrs	r7, r0
 800091e:	4648      	mov	r0, r9
 8000920:	40a0      	lsls	r0, r4
 8000922:	40ce      	lsrs	r6, r1
 8000924:	1e44      	subs	r4, r0, #1
 8000926:	41a0      	sbcs	r0, r4
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	4307      	orrs	r7, r0
 800092c:	1bd7      	subs	r7, r2, r7
 800092e:	42ba      	cmp	r2, r7
 8000930:	4192      	sbcs	r2, r2
 8000932:	4252      	negs	r2, r2
 8000934:	4665      	mov	r5, ip
 8000936:	4644      	mov	r4, r8
 8000938:	1a9e      	subs	r6, r3, r2
 800093a:	e783      	b.n	8000844 <__aeabi_dadd+0xa4>
 800093c:	2900      	cmp	r1, #0
 800093e:	dc00      	bgt.n	8000942 <__aeabi_dadd+0x1a2>
 8000940:	e09c      	b.n	8000a7c <__aeabi_dadd+0x2dc>
 8000942:	4647      	mov	r7, r8
 8000944:	2f00      	cmp	r7, #0
 8000946:	d167      	bne.n	8000a18 <__aeabi_dadd+0x278>
 8000948:	001f      	movs	r7, r3
 800094a:	4317      	orrs	r7, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x1b0>
 800094e:	e0e4      	b.n	8000b1a <__aeabi_dadd+0x37a>
 8000950:	1e48      	subs	r0, r1, #1
 8000952:	2901      	cmp	r1, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x1b8>
 8000956:	e19b      	b.n	8000c90 <__aeabi_dadd+0x4f0>
 8000958:	4f74      	ldr	r7, [pc, #464]	@ (8000b2c <__aeabi_dadd+0x38c>)
 800095a:	42b9      	cmp	r1, r7
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x1c0>
 800095e:	e0eb      	b.n	8000b38 <__aeabi_dadd+0x398>
 8000960:	2701      	movs	r7, #1
 8000962:	0001      	movs	r1, r0
 8000964:	2838      	cmp	r0, #56	@ 0x38
 8000966:	dc11      	bgt.n	800098c <__aeabi_dadd+0x1ec>
 8000968:	291f      	cmp	r1, #31
 800096a:	dd00      	ble.n	800096e <__aeabi_dadd+0x1ce>
 800096c:	e1c7      	b.n	8000cfe <__aeabi_dadd+0x55e>
 800096e:	2720      	movs	r7, #32
 8000970:	1a78      	subs	r0, r7, r1
 8000972:	001f      	movs	r7, r3
 8000974:	4684      	mov	ip, r0
 8000976:	4087      	lsls	r7, r0
 8000978:	0010      	movs	r0, r2
 800097a:	40c8      	lsrs	r0, r1
 800097c:	4307      	orrs	r7, r0
 800097e:	4660      	mov	r0, ip
 8000980:	4082      	lsls	r2, r0
 8000982:	40cb      	lsrs	r3, r1
 8000984:	1e50      	subs	r0, r2, #1
 8000986:	4182      	sbcs	r2, r0
 8000988:	18f6      	adds	r6, r6, r3
 800098a:	4317      	orrs	r7, r2
 800098c:	444f      	add	r7, r9
 800098e:	454f      	cmp	r7, r9
 8000990:	4180      	sbcs	r0, r0
 8000992:	4240      	negs	r0, r0
 8000994:	1836      	adds	r6, r6, r0
 8000996:	0233      	lsls	r3, r6, #8
 8000998:	d557      	bpl.n	8000a4a <__aeabi_dadd+0x2aa>
 800099a:	4b64      	ldr	r3, [pc, #400]	@ (8000b2c <__aeabi_dadd+0x38c>)
 800099c:	3401      	adds	r4, #1
 800099e:	429c      	cmp	r4, r3
 80009a0:	d045      	beq.n	8000a2e <__aeabi_dadd+0x28e>
 80009a2:	2101      	movs	r1, #1
 80009a4:	4b62      	ldr	r3, [pc, #392]	@ (8000b30 <__aeabi_dadd+0x390>)
 80009a6:	087a      	lsrs	r2, r7, #1
 80009a8:	401e      	ands	r6, r3
 80009aa:	4039      	ands	r1, r7
 80009ac:	430a      	orrs	r2, r1
 80009ae:	07f7      	lsls	r7, r6, #31
 80009b0:	4317      	orrs	r7, r2
 80009b2:	0876      	lsrs	r6, r6, #1
 80009b4:	e771      	b.n	800089a <__aeabi_dadd+0xfa>
 80009b6:	001f      	movs	r7, r3
 80009b8:	4317      	orrs	r7, r2
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x21e>
 80009bc:	e0ad      	b.n	8000b1a <__aeabi_dadd+0x37a>
 80009be:	1e4f      	subs	r7, r1, #1
 80009c0:	46bc      	mov	ip, r7
 80009c2:	2901      	cmp	r1, #1
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x228>
 80009c6:	e182      	b.n	8000cce <__aeabi_dadd+0x52e>
 80009c8:	4f58      	ldr	r7, [pc, #352]	@ (8000b2c <__aeabi_dadd+0x38c>)
 80009ca:	42b9      	cmp	r1, r7
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x230>
 80009ce:	e190      	b.n	8000cf2 <__aeabi_dadd+0x552>
 80009d0:	4661      	mov	r1, ip
 80009d2:	2701      	movs	r7, #1
 80009d4:	2938      	cmp	r1, #56	@ 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x23a>
 80009d8:	e72e      	b.n	8000838 <__aeabi_dadd+0x98>
 80009da:	e718      	b.n	800080e <__aeabi_dadd+0x6e>
 80009dc:	4f55      	ldr	r7, [pc, #340]	@ (8000b34 <__aeabi_dadd+0x394>)
 80009de:	1c61      	adds	r1, r4, #1
 80009e0:	4239      	tst	r1, r7
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x246>
 80009e4:	e0d0      	b.n	8000b88 <__aeabi_dadd+0x3e8>
 80009e6:	0031      	movs	r1, r6
 80009e8:	4648      	mov	r0, r9
 80009ea:	001f      	movs	r7, r3
 80009ec:	4301      	orrs	r1, r0
 80009ee:	4317      	orrs	r7, r2
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dadd+0x256>
 80009f4:	e13d      	b.n	8000c72 <__aeabi_dadd+0x4d2>
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x25c>
 80009fa:	e1bc      	b.n	8000d76 <__aeabi_dadd+0x5d6>
 80009fc:	2f00      	cmp	r7, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_dadd+0x262>
 8000a00:	e1bf      	b.n	8000d82 <__aeabi_dadd+0x5e2>
 8000a02:	464b      	mov	r3, r9
 8000a04:	2100      	movs	r1, #0
 8000a06:	08d8      	lsrs	r0, r3, #3
 8000a08:	0777      	lsls	r7, r6, #29
 8000a0a:	4307      	orrs	r7, r0
 8000a0c:	08f0      	lsrs	r0, r6, #3
 8000a0e:	0306      	lsls	r6, r0, #12
 8000a10:	054c      	lsls	r4, r1, #21
 8000a12:	0b36      	lsrs	r6, r6, #12
 8000a14:	0d64      	lsrs	r4, r4, #21
 8000a16:	e00c      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000a18:	4f44      	ldr	r7, [pc, #272]	@ (8000b2c <__aeabi_dadd+0x38c>)
 8000a1a:	42bc      	cmp	r4, r7
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x280>
 8000a1e:	e08b      	b.n	8000b38 <__aeabi_dadd+0x398>
 8000a20:	2701      	movs	r7, #1
 8000a22:	2938      	cmp	r1, #56	@ 0x38
 8000a24:	dcb2      	bgt.n	800098c <__aeabi_dadd+0x1ec>
 8000a26:	2780      	movs	r7, #128	@ 0x80
 8000a28:	043f      	lsls	r7, r7, #16
 8000a2a:	433b      	orrs	r3, r7
 8000a2c:	e79c      	b.n	8000968 <__aeabi_dadd+0x1c8>
 8000a2e:	2600      	movs	r6, #0
 8000a30:	2700      	movs	r7, #0
 8000a32:	0524      	lsls	r4, r4, #20
 8000a34:	4334      	orrs	r4, r6
 8000a36:	07ed      	lsls	r5, r5, #31
 8000a38:	432c      	orrs	r4, r5
 8000a3a:	0038      	movs	r0, r7
 8000a3c:	0021      	movs	r1, r4
 8000a3e:	b002      	add	sp, #8
 8000a40:	bce0      	pop	{r5, r6, r7}
 8000a42:	46ba      	mov	sl, r7
 8000a44:	46b1      	mov	r9, r6
 8000a46:	46a8      	mov	r8, r5
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	077b      	lsls	r3, r7, #29
 8000a4c:	d004      	beq.n	8000a58 <__aeabi_dadd+0x2b8>
 8000a4e:	230f      	movs	r3, #15
 8000a50:	403b      	ands	r3, r7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dadd+0x2b8>
 8000a56:	e728      	b.n	80008aa <__aeabi_dadd+0x10a>
 8000a58:	08f8      	lsrs	r0, r7, #3
 8000a5a:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <__aeabi_dadd+0x38c>)
 8000a5c:	0777      	lsls	r7, r6, #29
 8000a5e:	4307      	orrs	r7, r0
 8000a60:	08f0      	lsrs	r0, r6, #3
 8000a62:	429c      	cmp	r4, r3
 8000a64:	d000      	beq.n	8000a68 <__aeabi_dadd+0x2c8>
 8000a66:	e24a      	b.n	8000efe <__aeabi_dadd+0x75e>
 8000a68:	003b      	movs	r3, r7
 8000a6a:	4303      	orrs	r3, r0
 8000a6c:	d059      	beq.n	8000b22 <__aeabi_dadd+0x382>
 8000a6e:	2680      	movs	r6, #128	@ 0x80
 8000a70:	0336      	lsls	r6, r6, #12
 8000a72:	4306      	orrs	r6, r0
 8000a74:	0336      	lsls	r6, r6, #12
 8000a76:	4c2d      	ldr	r4, [pc, #180]	@ (8000b2c <__aeabi_dadd+0x38c>)
 8000a78:	0b36      	lsrs	r6, r6, #12
 8000a7a:	e7da      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d061      	beq.n	8000b44 <__aeabi_dadd+0x3a4>
 8000a80:	4641      	mov	r1, r8
 8000a82:	1b09      	subs	r1, r1, r4
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x2ea>
 8000a88:	e0b9      	b.n	8000bfe <__aeabi_dadd+0x45e>
 8000a8a:	4c28      	ldr	r4, [pc, #160]	@ (8000b2c <__aeabi_dadd+0x38c>)
 8000a8c:	45a0      	cmp	r8, r4
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x2f2>
 8000a90:	e1a5      	b.n	8000dde <__aeabi_dadd+0x63e>
 8000a92:	2701      	movs	r7, #1
 8000a94:	2938      	cmp	r1, #56	@ 0x38
 8000a96:	dc13      	bgt.n	8000ac0 <__aeabi_dadd+0x320>
 8000a98:	2480      	movs	r4, #128	@ 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4326      	orrs	r6, r4
 8000a9e:	291f      	cmp	r1, #31
 8000aa0:	dd00      	ble.n	8000aa4 <__aeabi_dadd+0x304>
 8000aa2:	e1c8      	b.n	8000e36 <__aeabi_dadd+0x696>
 8000aa4:	2420      	movs	r4, #32
 8000aa6:	0037      	movs	r7, r6
 8000aa8:	4648      	mov	r0, r9
 8000aaa:	1a64      	subs	r4, r4, r1
 8000aac:	40a7      	lsls	r7, r4
 8000aae:	40c8      	lsrs	r0, r1
 8000ab0:	4307      	orrs	r7, r0
 8000ab2:	4648      	mov	r0, r9
 8000ab4:	40a0      	lsls	r0, r4
 8000ab6:	40ce      	lsrs	r6, r1
 8000ab8:	1e44      	subs	r4, r0, #1
 8000aba:	41a0      	sbcs	r0, r4
 8000abc:	199b      	adds	r3, r3, r6
 8000abe:	4307      	orrs	r7, r0
 8000ac0:	18bf      	adds	r7, r7, r2
 8000ac2:	4297      	cmp	r7, r2
 8000ac4:	4192      	sbcs	r2, r2
 8000ac6:	4252      	negs	r2, r2
 8000ac8:	4644      	mov	r4, r8
 8000aca:	18d6      	adds	r6, r2, r3
 8000acc:	e763      	b.n	8000996 <__aeabi_dadd+0x1f6>
 8000ace:	0038      	movs	r0, r7
 8000ad0:	f001 fdfe 	bl	80026d0 <__clzsi2>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	2b1f      	cmp	r3, #31
 8000ada:	dc00      	bgt.n	8000ade <__aeabi_dadd+0x33e>
 8000adc:	e6bf      	b.n	800085e <__aeabi_dadd+0xbe>
 8000ade:	003a      	movs	r2, r7
 8000ae0:	3808      	subs	r0, #8
 8000ae2:	4082      	lsls	r2, r0
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x34a>
 8000ae8:	e083      	b.n	8000bf2 <__aeabi_dadd+0x452>
 8000aea:	1b1b      	subs	r3, r3, r4
 8000aec:	1c58      	adds	r0, r3, #1
 8000aee:	281f      	cmp	r0, #31
 8000af0:	dc00      	bgt.n	8000af4 <__aeabi_dadd+0x354>
 8000af2:	e1b4      	b.n	8000e5e <__aeabi_dadd+0x6be>
 8000af4:	0017      	movs	r7, r2
 8000af6:	3b1f      	subs	r3, #31
 8000af8:	40df      	lsrs	r7, r3
 8000afa:	2820      	cmp	r0, #32
 8000afc:	d005      	beq.n	8000b0a <__aeabi_dadd+0x36a>
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	1a1b      	subs	r3, r3, r0
 8000b02:	409a      	lsls	r2, r3
 8000b04:	1e53      	subs	r3, r2, #1
 8000b06:	419a      	sbcs	r2, r3
 8000b08:	4317      	orrs	r7, r2
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	2f00      	cmp	r7, #0
 8000b0e:	d00a      	beq.n	8000b26 <__aeabi_dadd+0x386>
 8000b10:	077b      	lsls	r3, r7, #29
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x376>
 8000b14:	e6c4      	b.n	80008a0 <__aeabi_dadd+0x100>
 8000b16:	0026      	movs	r6, r4
 8000b18:	e79e      	b.n	8000a58 <__aeabi_dadd+0x2b8>
 8000b1a:	464b      	mov	r3, r9
 8000b1c:	000c      	movs	r4, r1
 8000b1e:	08d8      	lsrs	r0, r3, #3
 8000b20:	e79b      	b.n	8000a5a <__aeabi_dadd+0x2ba>
 8000b22:	2700      	movs	r7, #0
 8000b24:	4c01      	ldr	r4, [pc, #4]	@ (8000b2c <__aeabi_dadd+0x38c>)
 8000b26:	2600      	movs	r6, #0
 8000b28:	e783      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	000007ff 	.word	0x000007ff
 8000b30:	ff7fffff 	.word	0xff7fffff
 8000b34:	000007fe 	.word	0x000007fe
 8000b38:	464b      	mov	r3, r9
 8000b3a:	0777      	lsls	r7, r6, #29
 8000b3c:	08d8      	lsrs	r0, r3, #3
 8000b3e:	4307      	orrs	r7, r0
 8000b40:	08f0      	lsrs	r0, r6, #3
 8000b42:	e791      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000b44:	4fcd      	ldr	r7, [pc, #820]	@ (8000e7c <__aeabi_dadd+0x6dc>)
 8000b46:	1c61      	adds	r1, r4, #1
 8000b48:	4239      	tst	r1, r7
 8000b4a:	d16b      	bne.n	8000c24 <__aeabi_dadd+0x484>
 8000b4c:	0031      	movs	r1, r6
 8000b4e:	4648      	mov	r0, r9
 8000b50:	4301      	orrs	r1, r0
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d000      	beq.n	8000b58 <__aeabi_dadd+0x3b8>
 8000b56:	e14b      	b.n	8000df0 <__aeabi_dadd+0x650>
 8000b58:	001f      	movs	r7, r3
 8000b5a:	4317      	orrs	r7, r2
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x3c2>
 8000b60:	e181      	b.n	8000e66 <__aeabi_dadd+0x6c6>
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x3c8>
 8000b66:	e74c      	b.n	8000a02 <__aeabi_dadd+0x262>
 8000b68:	444a      	add	r2, r9
 8000b6a:	454a      	cmp	r2, r9
 8000b6c:	4180      	sbcs	r0, r0
 8000b6e:	18f6      	adds	r6, r6, r3
 8000b70:	4240      	negs	r0, r0
 8000b72:	1836      	adds	r6, r6, r0
 8000b74:	0233      	lsls	r3, r6, #8
 8000b76:	d500      	bpl.n	8000b7a <__aeabi_dadd+0x3da>
 8000b78:	e1b0      	b.n	8000edc <__aeabi_dadd+0x73c>
 8000b7a:	0017      	movs	r7, r2
 8000b7c:	4691      	mov	r9, r2
 8000b7e:	4337      	orrs	r7, r6
 8000b80:	d000      	beq.n	8000b84 <__aeabi_dadd+0x3e4>
 8000b82:	e73e      	b.n	8000a02 <__aeabi_dadd+0x262>
 8000b84:	2600      	movs	r6, #0
 8000b86:	e754      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000b88:	4649      	mov	r1, r9
 8000b8a:	1a89      	subs	r1, r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	45c1      	cmp	r9, r8
 8000b90:	41bf      	sbcs	r7, r7
 8000b92:	1af1      	subs	r1, r6, r3
 8000b94:	427f      	negs	r7, r7
 8000b96:	1bc9      	subs	r1, r1, r7
 8000b98:	020f      	lsls	r7, r1, #8
 8000b9a:	d461      	bmi.n	8000c60 <__aeabi_dadd+0x4c0>
 8000b9c:	4647      	mov	r7, r8
 8000b9e:	430f      	orrs	r7, r1
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x404>
 8000ba2:	e0bd      	b.n	8000d20 <__aeabi_dadd+0x580>
 8000ba4:	000e      	movs	r6, r1
 8000ba6:	4647      	mov	r7, r8
 8000ba8:	e651      	b.n	800084e <__aeabi_dadd+0xae>
 8000baa:	4cb5      	ldr	r4, [pc, #724]	@ (8000e80 <__aeabi_dadd+0x6e0>)
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x412>
 8000bb0:	e100      	b.n	8000db4 <__aeabi_dadd+0x614>
 8000bb2:	2701      	movs	r7, #1
 8000bb4:	2938      	cmp	r1, #56	@ 0x38
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0x41a>
 8000bb8:	e6b8      	b.n	800092c <__aeabi_dadd+0x18c>
 8000bba:	2480      	movs	r4, #128	@ 0x80
 8000bbc:	0424      	lsls	r4, r4, #16
 8000bbe:	4326      	orrs	r6, r4
 8000bc0:	e6a3      	b.n	800090a <__aeabi_dadd+0x16a>
 8000bc2:	4eb0      	ldr	r6, [pc, #704]	@ (8000e84 <__aeabi_dadd+0x6e4>)
 8000bc4:	1ae4      	subs	r4, r4, r3
 8000bc6:	4016      	ands	r6, r2
 8000bc8:	077b      	lsls	r3, r7, #29
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x42e>
 8000bcc:	e73f      	b.n	8000a4e <__aeabi_dadd+0x2ae>
 8000bce:	e743      	b.n	8000a58 <__aeabi_dadd+0x2b8>
 8000bd0:	000f      	movs	r7, r1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	3f20      	subs	r7, #32
 8000bd6:	40f8      	lsrs	r0, r7
 8000bd8:	4684      	mov	ip, r0
 8000bda:	2920      	cmp	r1, #32
 8000bdc:	d003      	beq.n	8000be6 <__aeabi_dadd+0x446>
 8000bde:	2740      	movs	r7, #64	@ 0x40
 8000be0:	1a79      	subs	r1, r7, r1
 8000be2:	408b      	lsls	r3, r1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	1e53      	subs	r3, r2, #1
 8000be8:	419a      	sbcs	r2, r3
 8000bea:	4663      	mov	r3, ip
 8000bec:	0017      	movs	r7, r2
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	e622      	b.n	8000838 <__aeabi_dadd+0x98>
 8000bf2:	48a4      	ldr	r0, [pc, #656]	@ (8000e84 <__aeabi_dadd+0x6e4>)
 8000bf4:	1ae1      	subs	r1, r4, r3
 8000bf6:	4010      	ands	r0, r2
 8000bf8:	0747      	lsls	r7, r0, #29
 8000bfa:	08c0      	lsrs	r0, r0, #3
 8000bfc:	e707      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000bfe:	0034      	movs	r4, r6
 8000c00:	4648      	mov	r0, r9
 8000c02:	4304      	orrs	r4, r0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x468>
 8000c06:	e0fa      	b.n	8000dfe <__aeabi_dadd+0x65e>
 8000c08:	1e4c      	subs	r4, r1, #1
 8000c0a:	2901      	cmp	r1, #1
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dadd+0x470>
 8000c0e:	e0d7      	b.n	8000dc0 <__aeabi_dadd+0x620>
 8000c10:	4f9b      	ldr	r7, [pc, #620]	@ (8000e80 <__aeabi_dadd+0x6e0>)
 8000c12:	42b9      	cmp	r1, r7
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x478>
 8000c16:	e0e2      	b.n	8000dde <__aeabi_dadd+0x63e>
 8000c18:	2701      	movs	r7, #1
 8000c1a:	2c38      	cmp	r4, #56	@ 0x38
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_dadd+0x480>
 8000c1e:	e74f      	b.n	8000ac0 <__aeabi_dadd+0x320>
 8000c20:	0021      	movs	r1, r4
 8000c22:	e73c      	b.n	8000a9e <__aeabi_dadd+0x2fe>
 8000c24:	4c96      	ldr	r4, [pc, #600]	@ (8000e80 <__aeabi_dadd+0x6e0>)
 8000c26:	42a1      	cmp	r1, r4
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x48c>
 8000c2a:	e0dd      	b.n	8000de8 <__aeabi_dadd+0x648>
 8000c2c:	444a      	add	r2, r9
 8000c2e:	454a      	cmp	r2, r9
 8000c30:	4180      	sbcs	r0, r0
 8000c32:	18f3      	adds	r3, r6, r3
 8000c34:	4240      	negs	r0, r0
 8000c36:	1818      	adds	r0, r3, r0
 8000c38:	07c7      	lsls	r7, r0, #31
 8000c3a:	0852      	lsrs	r2, r2, #1
 8000c3c:	4317      	orrs	r7, r2
 8000c3e:	0846      	lsrs	r6, r0, #1
 8000c40:	0752      	lsls	r2, r2, #29
 8000c42:	d005      	beq.n	8000c50 <__aeabi_dadd+0x4b0>
 8000c44:	220f      	movs	r2, #15
 8000c46:	000c      	movs	r4, r1
 8000c48:	403a      	ands	r2, r7
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dadd+0x4b0>
 8000c4e:	e62c      	b.n	80008aa <__aeabi_dadd+0x10a>
 8000c50:	0776      	lsls	r6, r6, #29
 8000c52:	08ff      	lsrs	r7, r7, #3
 8000c54:	4337      	orrs	r7, r6
 8000c56:	0900      	lsrs	r0, r0, #4
 8000c58:	e6d9      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e6e8      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000c60:	4649      	mov	r1, r9
 8000c62:	1a57      	subs	r7, r2, r1
 8000c64:	42ba      	cmp	r2, r7
 8000c66:	4192      	sbcs	r2, r2
 8000c68:	1b9e      	subs	r6, r3, r6
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	4665      	mov	r5, ip
 8000c6e:	1ab6      	subs	r6, r6, r2
 8000c70:	e5ed      	b.n	800084e <__aeabi_dadd+0xae>
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_dadd+0x4d8>
 8000c76:	e0c6      	b.n	8000e06 <__aeabi_dadd+0x666>
 8000c78:	2f00      	cmp	r7, #0
 8000c7a:	d167      	bne.n	8000d4c <__aeabi_dadd+0x5ac>
 8000c7c:	2680      	movs	r6, #128	@ 0x80
 8000c7e:	2500      	movs	r5, #0
 8000c80:	4c7f      	ldr	r4, [pc, #508]	@ (8000e80 <__aeabi_dadd+0x6e0>)
 8000c82:	0336      	lsls	r6, r6, #12
 8000c84:	e6d5      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000c86:	4665      	mov	r5, ip
 8000c88:	000c      	movs	r4, r1
 8000c8a:	001e      	movs	r6, r3
 8000c8c:	08d0      	lsrs	r0, r2, #3
 8000c8e:	e6e4      	b.n	8000a5a <__aeabi_dadd+0x2ba>
 8000c90:	444a      	add	r2, r9
 8000c92:	454a      	cmp	r2, r9
 8000c94:	4180      	sbcs	r0, r0
 8000c96:	18f3      	adds	r3, r6, r3
 8000c98:	4240      	negs	r0, r0
 8000c9a:	1818      	adds	r0, r3, r0
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0203      	lsls	r3, r0, #8
 8000ca0:	d400      	bmi.n	8000ca4 <__aeabi_dadd+0x504>
 8000ca2:	e096      	b.n	8000dd2 <__aeabi_dadd+0x632>
 8000ca4:	4b77      	ldr	r3, [pc, #476]	@ (8000e84 <__aeabi_dadd+0x6e4>)
 8000ca6:	0849      	lsrs	r1, r1, #1
 8000ca8:	4018      	ands	r0, r3
 8000caa:	07c3      	lsls	r3, r0, #31
 8000cac:	430b      	orrs	r3, r1
 8000cae:	0844      	lsrs	r4, r0, #1
 8000cb0:	0749      	lsls	r1, r1, #29
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x516>
 8000cb4:	e129      	b.n	8000f0a <__aeabi_dadd+0x76a>
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	401a      	ands	r2, r3
 8000cba:	2a04      	cmp	r2, #4
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x520>
 8000cbe:	e0ea      	b.n	8000e96 <__aeabi_dadd+0x6f6>
 8000cc0:	1d1f      	adds	r7, r3, #4
 8000cc2:	429f      	cmp	r7, r3
 8000cc4:	41b6      	sbcs	r6, r6
 8000cc6:	4276      	negs	r6, r6
 8000cc8:	1936      	adds	r6, r6, r4
 8000cca:	2402      	movs	r4, #2
 8000ccc:	e6c4      	b.n	8000a58 <__aeabi_dadd+0x2b8>
 8000cce:	4649      	mov	r1, r9
 8000cd0:	1a8f      	subs	r7, r1, r2
 8000cd2:	45b9      	cmp	r9, r7
 8000cd4:	4180      	sbcs	r0, r0
 8000cd6:	1af6      	subs	r6, r6, r3
 8000cd8:	4240      	negs	r0, r0
 8000cda:	1a36      	subs	r6, r6, r0
 8000cdc:	0233      	lsls	r3, r6, #8
 8000cde:	d406      	bmi.n	8000cee <__aeabi_dadd+0x54e>
 8000ce0:	0773      	lsls	r3, r6, #29
 8000ce2:	08ff      	lsrs	r7, r7, #3
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	08f0      	lsrs	r0, r6, #3
 8000cea:	e690      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000cec:	4665      	mov	r5, ip
 8000cee:	2401      	movs	r4, #1
 8000cf0:	e5ab      	b.n	800084a <__aeabi_dadd+0xaa>
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	0777      	lsls	r7, r6, #29
 8000cf6:	08d8      	lsrs	r0, r3, #3
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	08f0      	lsrs	r0, r6, #3
 8000cfc:	e6b4      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000cfe:	000f      	movs	r7, r1
 8000d00:	0018      	movs	r0, r3
 8000d02:	3f20      	subs	r7, #32
 8000d04:	40f8      	lsrs	r0, r7
 8000d06:	4684      	mov	ip, r0
 8000d08:	2920      	cmp	r1, #32
 8000d0a:	d003      	beq.n	8000d14 <__aeabi_dadd+0x574>
 8000d0c:	2740      	movs	r7, #64	@ 0x40
 8000d0e:	1a79      	subs	r1, r7, r1
 8000d10:	408b      	lsls	r3, r1
 8000d12:	431a      	orrs	r2, r3
 8000d14:	1e53      	subs	r3, r2, #1
 8000d16:	419a      	sbcs	r2, r3
 8000d18:	4663      	mov	r3, ip
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	431f      	orrs	r7, r3
 8000d1e:	e635      	b.n	800098c <__aeabi_dadd+0x1ec>
 8000d20:	2500      	movs	r5, #0
 8000d22:	2400      	movs	r4, #0
 8000d24:	2600      	movs	r6, #0
 8000d26:	e684      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000d28:	000c      	movs	r4, r1
 8000d2a:	0035      	movs	r5, r6
 8000d2c:	3c20      	subs	r4, #32
 8000d2e:	40e5      	lsrs	r5, r4
 8000d30:	2920      	cmp	r1, #32
 8000d32:	d005      	beq.n	8000d40 <__aeabi_dadd+0x5a0>
 8000d34:	2440      	movs	r4, #64	@ 0x40
 8000d36:	1a61      	subs	r1, r4, r1
 8000d38:	408e      	lsls	r6, r1
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4331      	orrs	r1, r6
 8000d3e:	4689      	mov	r9, r1
 8000d40:	4648      	mov	r0, r9
 8000d42:	1e41      	subs	r1, r0, #1
 8000d44:	4188      	sbcs	r0, r1
 8000d46:	0007      	movs	r7, r0
 8000d48:	432f      	orrs	r7, r5
 8000d4a:	e5ef      	b.n	800092c <__aeabi_dadd+0x18c>
 8000d4c:	08d2      	lsrs	r2, r2, #3
 8000d4e:	075f      	lsls	r7, r3, #29
 8000d50:	4665      	mov	r5, ip
 8000d52:	4317      	orrs	r7, r2
 8000d54:	08d8      	lsrs	r0, r3, #3
 8000d56:	e687      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000d58:	1a17      	subs	r7, r2, r0
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	4192      	sbcs	r2, r2
 8000d5e:	1b9e      	subs	r6, r3, r6
 8000d60:	4252      	negs	r2, r2
 8000d62:	1ab6      	subs	r6, r6, r2
 8000d64:	0233      	lsls	r3, r6, #8
 8000d66:	d4c1      	bmi.n	8000cec <__aeabi_dadd+0x54c>
 8000d68:	0773      	lsls	r3, r6, #29
 8000d6a:	08ff      	lsrs	r7, r7, #3
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	2101      	movs	r1, #1
 8000d70:	431f      	orrs	r7, r3
 8000d72:	08f0      	lsrs	r0, r6, #3
 8000d74:	e64b      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000d76:	2f00      	cmp	r7, #0
 8000d78:	d07b      	beq.n	8000e72 <__aeabi_dadd+0x6d2>
 8000d7a:	4665      	mov	r5, ip
 8000d7c:	001e      	movs	r6, r3
 8000d7e:	4691      	mov	r9, r2
 8000d80:	e63f      	b.n	8000a02 <__aeabi_dadd+0x262>
 8000d82:	1a81      	subs	r1, r0, r2
 8000d84:	4688      	mov	r8, r1
 8000d86:	45c1      	cmp	r9, r8
 8000d88:	41a4      	sbcs	r4, r4
 8000d8a:	1af1      	subs	r1, r6, r3
 8000d8c:	4264      	negs	r4, r4
 8000d8e:	1b09      	subs	r1, r1, r4
 8000d90:	2480      	movs	r4, #128	@ 0x80
 8000d92:	0424      	lsls	r4, r4, #16
 8000d94:	4221      	tst	r1, r4
 8000d96:	d077      	beq.n	8000e88 <__aeabi_dadd+0x6e8>
 8000d98:	1a10      	subs	r0, r2, r0
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	4192      	sbcs	r2, r2
 8000d9e:	0007      	movs	r7, r0
 8000da0:	1b9e      	subs	r6, r3, r6
 8000da2:	4252      	negs	r2, r2
 8000da4:	1ab6      	subs	r6, r6, r2
 8000da6:	4337      	orrs	r7, r6
 8000da8:	d000      	beq.n	8000dac <__aeabi_dadd+0x60c>
 8000daa:	e0a0      	b.n	8000eee <__aeabi_dadd+0x74e>
 8000dac:	4665      	mov	r5, ip
 8000dae:	2400      	movs	r4, #0
 8000db0:	2600      	movs	r6, #0
 8000db2:	e63e      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000db4:	075f      	lsls	r7, r3, #29
 8000db6:	08d2      	lsrs	r2, r2, #3
 8000db8:	4665      	mov	r5, ip
 8000dba:	4317      	orrs	r7, r2
 8000dbc:	08d8      	lsrs	r0, r3, #3
 8000dbe:	e653      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000dc0:	1881      	adds	r1, r0, r2
 8000dc2:	4291      	cmp	r1, r2
 8000dc4:	4192      	sbcs	r2, r2
 8000dc6:	18f0      	adds	r0, r6, r3
 8000dc8:	4252      	negs	r2, r2
 8000dca:	1880      	adds	r0, r0, r2
 8000dcc:	0203      	lsls	r3, r0, #8
 8000dce:	d500      	bpl.n	8000dd2 <__aeabi_dadd+0x632>
 8000dd0:	e768      	b.n	8000ca4 <__aeabi_dadd+0x504>
 8000dd2:	0747      	lsls	r7, r0, #29
 8000dd4:	08c9      	lsrs	r1, r1, #3
 8000dd6:	430f      	orrs	r7, r1
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	e617      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000dde:	08d2      	lsrs	r2, r2, #3
 8000de0:	075f      	lsls	r7, r3, #29
 8000de2:	4317      	orrs	r7, r2
 8000de4:	08d8      	lsrs	r0, r3, #3
 8000de6:	e63f      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000de8:	000c      	movs	r4, r1
 8000dea:	2600      	movs	r6, #0
 8000dec:	2700      	movs	r7, #0
 8000dee:	e620      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	d156      	bne.n	8000ea2 <__aeabi_dadd+0x702>
 8000df4:	075f      	lsls	r7, r3, #29
 8000df6:	08d2      	lsrs	r2, r2, #3
 8000df8:	4317      	orrs	r7, r2
 8000dfa:	08d8      	lsrs	r0, r3, #3
 8000dfc:	e634      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000dfe:	000c      	movs	r4, r1
 8000e00:	001e      	movs	r6, r3
 8000e02:	08d0      	lsrs	r0, r2, #3
 8000e04:	e629      	b.n	8000a5a <__aeabi_dadd+0x2ba>
 8000e06:	08c1      	lsrs	r1, r0, #3
 8000e08:	0770      	lsls	r0, r6, #29
 8000e0a:	4301      	orrs	r1, r0
 8000e0c:	08f0      	lsrs	r0, r6, #3
 8000e0e:	2f00      	cmp	r7, #0
 8000e10:	d062      	beq.n	8000ed8 <__aeabi_dadd+0x738>
 8000e12:	2480      	movs	r4, #128	@ 0x80
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	4220      	tst	r0, r4
 8000e18:	d007      	beq.n	8000e2a <__aeabi_dadd+0x68a>
 8000e1a:	08de      	lsrs	r6, r3, #3
 8000e1c:	4226      	tst	r6, r4
 8000e1e:	d104      	bne.n	8000e2a <__aeabi_dadd+0x68a>
 8000e20:	4665      	mov	r5, ip
 8000e22:	0030      	movs	r0, r6
 8000e24:	08d1      	lsrs	r1, r2, #3
 8000e26:	075b      	lsls	r3, r3, #29
 8000e28:	4319      	orrs	r1, r3
 8000e2a:	0f4f      	lsrs	r7, r1, #29
 8000e2c:	00c9      	lsls	r1, r1, #3
 8000e2e:	08c9      	lsrs	r1, r1, #3
 8000e30:	077f      	lsls	r7, r7, #29
 8000e32:	430f      	orrs	r7, r1
 8000e34:	e618      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000e36:	000c      	movs	r4, r1
 8000e38:	0030      	movs	r0, r6
 8000e3a:	3c20      	subs	r4, #32
 8000e3c:	40e0      	lsrs	r0, r4
 8000e3e:	4684      	mov	ip, r0
 8000e40:	2920      	cmp	r1, #32
 8000e42:	d005      	beq.n	8000e50 <__aeabi_dadd+0x6b0>
 8000e44:	2440      	movs	r4, #64	@ 0x40
 8000e46:	1a61      	subs	r1, r4, r1
 8000e48:	408e      	lsls	r6, r1
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	4331      	orrs	r1, r6
 8000e4e:	4689      	mov	r9, r1
 8000e50:	4648      	mov	r0, r9
 8000e52:	1e41      	subs	r1, r0, #1
 8000e54:	4188      	sbcs	r0, r1
 8000e56:	4661      	mov	r1, ip
 8000e58:	0007      	movs	r7, r0
 8000e5a:	430f      	orrs	r7, r1
 8000e5c:	e630      	b.n	8000ac0 <__aeabi_dadd+0x320>
 8000e5e:	2120      	movs	r1, #32
 8000e60:	2700      	movs	r7, #0
 8000e62:	1a09      	subs	r1, r1, r0
 8000e64:	e50e      	b.n	8000884 <__aeabi_dadd+0xe4>
 8000e66:	001e      	movs	r6, r3
 8000e68:	2f00      	cmp	r7, #0
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_dadd+0x6ce>
 8000e6c:	e522      	b.n	80008b4 <__aeabi_dadd+0x114>
 8000e6e:	2400      	movs	r4, #0
 8000e70:	e758      	b.n	8000d24 <__aeabi_dadd+0x584>
 8000e72:	2500      	movs	r5, #0
 8000e74:	2400      	movs	r4, #0
 8000e76:	2600      	movs	r6, #0
 8000e78:	e5db      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	000007fe 	.word	0x000007fe
 8000e80:	000007ff 	.word	0x000007ff
 8000e84:	ff7fffff 	.word	0xff7fffff
 8000e88:	4647      	mov	r7, r8
 8000e8a:	430f      	orrs	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x6f0>
 8000e8e:	e747      	b.n	8000d20 <__aeabi_dadd+0x580>
 8000e90:	000e      	movs	r6, r1
 8000e92:	46c1      	mov	r9, r8
 8000e94:	e5b5      	b.n	8000a02 <__aeabi_dadd+0x262>
 8000e96:	08df      	lsrs	r7, r3, #3
 8000e98:	0764      	lsls	r4, r4, #29
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4327      	orrs	r7, r4
 8000e9e:	0900      	lsrs	r0, r0, #4
 8000ea0:	e5b5      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	08c0      	lsrs	r0, r0, #3
 8000ea6:	0777      	lsls	r7, r6, #29
 8000ea8:	4307      	orrs	r7, r0
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	08f0      	lsrs	r0, r6, #3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x714>
 8000eb2:	e5d9      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0309      	lsls	r1, r1, #12
 8000eb8:	4208      	tst	r0, r1
 8000eba:	d007      	beq.n	8000ecc <__aeabi_dadd+0x72c>
 8000ebc:	08dc      	lsrs	r4, r3, #3
 8000ebe:	420c      	tst	r4, r1
 8000ec0:	d104      	bne.n	8000ecc <__aeabi_dadd+0x72c>
 8000ec2:	08d2      	lsrs	r2, r2, #3
 8000ec4:	075b      	lsls	r3, r3, #29
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	0017      	movs	r7, r2
 8000eca:	0020      	movs	r0, r4
 8000ecc:	0f7b      	lsrs	r3, r7, #29
 8000ece:	00ff      	lsls	r7, r7, #3
 8000ed0:	08ff      	lsrs	r7, r7, #3
 8000ed2:	075b      	lsls	r3, r3, #29
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e5c7      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000ed8:	000f      	movs	r7, r1
 8000eda:	e5c5      	b.n	8000a68 <__aeabi_dadd+0x2c8>
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <__aeabi_dadd+0x788>)
 8000ede:	08d2      	lsrs	r2, r2, #3
 8000ee0:	4033      	ands	r3, r6
 8000ee2:	075f      	lsls	r7, r3, #29
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	2401      	movs	r4, #1
 8000ee8:	4317      	orrs	r7, r2
 8000eea:	0b1e      	lsrs	r6, r3, #12
 8000eec:	e5a1      	b.n	8000a32 <__aeabi_dadd+0x292>
 8000eee:	4226      	tst	r6, r4
 8000ef0:	d012      	beq.n	8000f18 <__aeabi_dadd+0x778>
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <__aeabi_dadd+0x788>)
 8000ef4:	4665      	mov	r5, ip
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	2401      	movs	r4, #1
 8000efa:	401e      	ands	r6, r3
 8000efc:	e4e6      	b.n	80008cc <__aeabi_dadd+0x12c>
 8000efe:	0021      	movs	r1, r4
 8000f00:	e585      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000f02:	0017      	movs	r7, r2
 8000f04:	e5a8      	b.n	8000a58 <__aeabi_dadd+0x2b8>
 8000f06:	003a      	movs	r2, r7
 8000f08:	e4d4      	b.n	80008b4 <__aeabi_dadd+0x114>
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	0764      	lsls	r4, r4, #29
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	0027      	movs	r7, r4
 8000f12:	2102      	movs	r1, #2
 8000f14:	0900      	lsrs	r0, r0, #4
 8000f16:	e57a      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000f18:	08c0      	lsrs	r0, r0, #3
 8000f1a:	0777      	lsls	r7, r6, #29
 8000f1c:	4307      	orrs	r7, r0
 8000f1e:	4665      	mov	r5, ip
 8000f20:	2100      	movs	r1, #0
 8000f22:	08f0      	lsrs	r0, r6, #3
 8000f24:	e573      	b.n	8000a0e <__aeabi_dadd+0x26e>
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	ff7fffff 	.word	0xff7fffff

08000f2c <__aeabi_ddiv>:
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	46de      	mov	lr, fp
 8000f30:	4645      	mov	r5, r8
 8000f32:	4657      	mov	r7, sl
 8000f34:	464e      	mov	r6, r9
 8000f36:	b5e0      	push	{r5, r6, r7, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	030b      	lsls	r3, r1, #12
 8000f40:	0b1b      	lsrs	r3, r3, #12
 8000f42:	469b      	mov	fp, r3
 8000f44:	0fca      	lsrs	r2, r1, #31
 8000f46:	004b      	lsls	r3, r1, #1
 8000f48:	0004      	movs	r4, r0
 8000f4a:	4680      	mov	r8, r0
 8000f4c:	0d5b      	lsrs	r3, r3, #21
 8000f4e:	9202      	str	r2, [sp, #8]
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x28>
 8000f52:	e098      	b.n	8001086 <__aeabi_ddiv+0x15a>
 8000f54:	4a7c      	ldr	r2, [pc, #496]	@ (8001148 <__aeabi_ddiv+0x21c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d037      	beq.n	8000fca <__aeabi_ddiv+0x9e>
 8000f5a:	4659      	mov	r1, fp
 8000f5c:	0f42      	lsrs	r2, r0, #29
 8000f5e:	00c9      	lsls	r1, r1, #3
 8000f60:	430a      	orrs	r2, r1
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0409      	lsls	r1, r1, #16
 8000f66:	4311      	orrs	r1, r2
 8000f68:	00c2      	lsls	r2, r0, #3
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	4a77      	ldr	r2, [pc, #476]	@ (800114c <__aeabi_ddiv+0x220>)
 8000f6e:	4689      	mov	r9, r1
 8000f70:	4692      	mov	sl, r2
 8000f72:	449a      	add	sl, r3
 8000f74:	2300      	movs	r3, #0
 8000f76:	2400      	movs	r4, #0
 8000f78:	9303      	str	r3, [sp, #12]
 8000f7a:	9e00      	ldr	r6, [sp, #0]
 8000f7c:	9f01      	ldr	r7, [sp, #4]
 8000f7e:	033b      	lsls	r3, r7, #12
 8000f80:	0b1b      	lsrs	r3, r3, #12
 8000f82:	469b      	mov	fp, r3
 8000f84:	007b      	lsls	r3, r7, #1
 8000f86:	0030      	movs	r0, r6
 8000f88:	0d5b      	lsrs	r3, r3, #21
 8000f8a:	0ffd      	lsrs	r5, r7, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d059      	beq.n	8001044 <__aeabi_ddiv+0x118>
 8000f90:	4a6d      	ldr	r2, [pc, #436]	@ (8001148 <__aeabi_ddiv+0x21c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d048      	beq.n	8001028 <__aeabi_ddiv+0xfc>
 8000f96:	4659      	mov	r1, fp
 8000f98:	0f72      	lsrs	r2, r6, #29
 8000f9a:	00c9      	lsls	r1, r1, #3
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	2180      	movs	r1, #128	@ 0x80
 8000fa0:	0409      	lsls	r1, r1, #16
 8000fa2:	4311      	orrs	r1, r2
 8000fa4:	468b      	mov	fp, r1
 8000fa6:	4969      	ldr	r1, [pc, #420]	@ (800114c <__aeabi_ddiv+0x220>)
 8000fa8:	00f2      	lsls	r2, r6, #3
 8000faa:	468c      	mov	ip, r1
 8000fac:	4651      	mov	r1, sl
 8000fae:	4463      	add	r3, ip
 8000fb0:	1acb      	subs	r3, r1, r3
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	9e02      	ldr	r6, [sp, #8]
 8000fb8:	406e      	eors	r6, r5
 8000fba:	b2f6      	uxtb	r6, r6
 8000fbc:	2c0f      	cmp	r4, #15
 8000fbe:	d900      	bls.n	8000fc2 <__aeabi_ddiv+0x96>
 8000fc0:	e0ce      	b.n	8001160 <__aeabi_ddiv+0x234>
 8000fc2:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <__aeabi_ddiv+0x224>)
 8000fc4:	00a4      	lsls	r4, r4, #2
 8000fc6:	591b      	ldr	r3, [r3, r4]
 8000fc8:	469f      	mov	pc, r3
 8000fca:	465a      	mov	r2, fp
 8000fcc:	4302      	orrs	r2, r0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	d000      	beq.n	8000fd4 <__aeabi_ddiv+0xa8>
 8000fd2:	e090      	b.n	80010f6 <__aeabi_ddiv+0x1ca>
 8000fd4:	469a      	mov	sl, r3
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	4690      	mov	r8, r2
 8000fda:	2408      	movs	r4, #8
 8000fdc:	9303      	str	r3, [sp, #12]
 8000fde:	e7cc      	b.n	8000f7a <__aeabi_ddiv+0x4e>
 8000fe0:	46cb      	mov	fp, r9
 8000fe2:	4642      	mov	r2, r8
 8000fe4:	9d02      	ldr	r5, [sp, #8]
 8000fe6:	9903      	ldr	r1, [sp, #12]
 8000fe8:	2902      	cmp	r1, #2
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0xc2>
 8000fec:	e1de      	b.n	80013ac <__aeabi_ddiv+0x480>
 8000fee:	2903      	cmp	r1, #3
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0xc8>
 8000ff2:	e08d      	b.n	8001110 <__aeabi_ddiv+0x1e4>
 8000ff4:	2901      	cmp	r1, #1
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_ddiv+0xce>
 8000ff8:	e179      	b.n	80012ee <__aeabi_ddiv+0x3c2>
 8000ffa:	002e      	movs	r6, r5
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2300      	movs	r3, #0
 8001000:	2400      	movs	r4, #0
 8001002:	4690      	mov	r8, r2
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	4323      	orrs	r3, r4
 8001008:	07f6      	lsls	r6, r6, #31
 800100a:	4333      	orrs	r3, r6
 800100c:	4640      	mov	r0, r8
 800100e:	0019      	movs	r1, r3
 8001010:	b007      	add	sp, #28
 8001012:	bcf0      	pop	{r4, r5, r6, r7}
 8001014:	46bb      	mov	fp, r7
 8001016:	46b2      	mov	sl, r6
 8001018:	46a9      	mov	r9, r5
 800101a:	46a0      	mov	r8, r4
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101e:	2200      	movs	r2, #0
 8001020:	2400      	movs	r4, #0
 8001022:	4690      	mov	r8, r2
 8001024:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <__aeabi_ddiv+0x21c>)
 8001026:	e7ed      	b.n	8001004 <__aeabi_ddiv+0xd8>
 8001028:	465a      	mov	r2, fp
 800102a:	9b00      	ldr	r3, [sp, #0]
 800102c:	431a      	orrs	r2, r3
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <__aeabi_ddiv+0x228>)
 8001030:	469c      	mov	ip, r3
 8001032:	44e2      	add	sl, ip
 8001034:	2a00      	cmp	r2, #0
 8001036:	d159      	bne.n	80010ec <__aeabi_ddiv+0x1c0>
 8001038:	2302      	movs	r3, #2
 800103a:	431c      	orrs	r4, r3
 800103c:	2300      	movs	r3, #0
 800103e:	2102      	movs	r1, #2
 8001040:	469b      	mov	fp, r3
 8001042:	e7b8      	b.n	8000fb6 <__aeabi_ddiv+0x8a>
 8001044:	465a      	mov	r2, fp
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	431a      	orrs	r2, r3
 800104a:	d049      	beq.n	80010e0 <__aeabi_ddiv+0x1b4>
 800104c:	465b      	mov	r3, fp
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x128>
 8001052:	e19c      	b.n	800138e <__aeabi_ddiv+0x462>
 8001054:	4658      	mov	r0, fp
 8001056:	f001 fb3b 	bl	80026d0 <__clzsi2>
 800105a:	0002      	movs	r2, r0
 800105c:	0003      	movs	r3, r0
 800105e:	3a0b      	subs	r2, #11
 8001060:	271d      	movs	r7, #29
 8001062:	9e00      	ldr	r6, [sp, #0]
 8001064:	1aba      	subs	r2, r7, r2
 8001066:	0019      	movs	r1, r3
 8001068:	4658      	mov	r0, fp
 800106a:	40d6      	lsrs	r6, r2
 800106c:	3908      	subs	r1, #8
 800106e:	4088      	lsls	r0, r1
 8001070:	0032      	movs	r2, r6
 8001072:	4302      	orrs	r2, r0
 8001074:	4693      	mov	fp, r2
 8001076:	9a00      	ldr	r2, [sp, #0]
 8001078:	408a      	lsls	r2, r1
 800107a:	4937      	ldr	r1, [pc, #220]	@ (8001158 <__aeabi_ddiv+0x22c>)
 800107c:	4453      	add	r3, sl
 800107e:	468a      	mov	sl, r1
 8001080:	2100      	movs	r1, #0
 8001082:	449a      	add	sl, r3
 8001084:	e797      	b.n	8000fb6 <__aeabi_ddiv+0x8a>
 8001086:	465b      	mov	r3, fp
 8001088:	4303      	orrs	r3, r0
 800108a:	4699      	mov	r9, r3
 800108c:	d021      	beq.n	80010d2 <__aeabi_ddiv+0x1a6>
 800108e:	465b      	mov	r3, fp
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x16a>
 8001094:	e169      	b.n	800136a <__aeabi_ddiv+0x43e>
 8001096:	4658      	mov	r0, fp
 8001098:	f001 fb1a 	bl	80026d0 <__clzsi2>
 800109c:	230b      	movs	r3, #11
 800109e:	425b      	negs	r3, r3
 80010a0:	469c      	mov	ip, r3
 80010a2:	0002      	movs	r2, r0
 80010a4:	4484      	add	ip, r0
 80010a6:	4666      	mov	r6, ip
 80010a8:	231d      	movs	r3, #29
 80010aa:	1b9b      	subs	r3, r3, r6
 80010ac:	0026      	movs	r6, r4
 80010ae:	0011      	movs	r1, r2
 80010b0:	4658      	mov	r0, fp
 80010b2:	40de      	lsrs	r6, r3
 80010b4:	3908      	subs	r1, #8
 80010b6:	4088      	lsls	r0, r1
 80010b8:	0033      	movs	r3, r6
 80010ba:	4303      	orrs	r3, r0
 80010bc:	4699      	mov	r9, r3
 80010be:	0023      	movs	r3, r4
 80010c0:	408b      	lsls	r3, r1
 80010c2:	4698      	mov	r8, r3
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <__aeabi_ddiv+0x230>)
 80010c6:	2400      	movs	r4, #0
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	469a      	mov	sl, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	e753      	b.n	8000f7a <__aeabi_ddiv+0x4e>
 80010d2:	2300      	movs	r3, #0
 80010d4:	4698      	mov	r8, r3
 80010d6:	469a      	mov	sl, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	2404      	movs	r4, #4
 80010dc:	9303      	str	r3, [sp, #12]
 80010de:	e74c      	b.n	8000f7a <__aeabi_ddiv+0x4e>
 80010e0:	2301      	movs	r3, #1
 80010e2:	431c      	orrs	r4, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	469b      	mov	fp, r3
 80010ea:	e764      	b.n	8000fb6 <__aeabi_ddiv+0x8a>
 80010ec:	2303      	movs	r3, #3
 80010ee:	0032      	movs	r2, r6
 80010f0:	2103      	movs	r1, #3
 80010f2:	431c      	orrs	r4, r3
 80010f4:	e75f      	b.n	8000fb6 <__aeabi_ddiv+0x8a>
 80010f6:	469a      	mov	sl, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	46d9      	mov	r9, fp
 80010fc:	240c      	movs	r4, #12
 80010fe:	9303      	str	r3, [sp, #12]
 8001100:	e73b      	b.n	8000f7a <__aeabi_ddiv+0x4e>
 8001102:	2300      	movs	r3, #0
 8001104:	2480      	movs	r4, #128	@ 0x80
 8001106:	4698      	mov	r8, r3
 8001108:	2600      	movs	r6, #0
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <__aeabi_ddiv+0x21c>)
 800110c:	0324      	lsls	r4, r4, #12
 800110e:	e779      	b.n	8001004 <__aeabi_ddiv+0xd8>
 8001110:	2480      	movs	r4, #128	@ 0x80
 8001112:	465b      	mov	r3, fp
 8001114:	0324      	lsls	r4, r4, #12
 8001116:	431c      	orrs	r4, r3
 8001118:	0324      	lsls	r4, r4, #12
 800111a:	002e      	movs	r6, r5
 800111c:	4690      	mov	r8, r2
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <__aeabi_ddiv+0x21c>)
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	e76f      	b.n	8001004 <__aeabi_ddiv+0xd8>
 8001124:	2480      	movs	r4, #128	@ 0x80
 8001126:	464b      	mov	r3, r9
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	4223      	tst	r3, r4
 800112c:	d002      	beq.n	8001134 <__aeabi_ddiv+0x208>
 800112e:	465b      	mov	r3, fp
 8001130:	4223      	tst	r3, r4
 8001132:	d0f0      	beq.n	8001116 <__aeabi_ddiv+0x1ea>
 8001134:	2480      	movs	r4, #128	@ 0x80
 8001136:	464b      	mov	r3, r9
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	431c      	orrs	r4, r3
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	9e02      	ldr	r6, [sp, #8]
 8001140:	4b01      	ldr	r3, [pc, #4]	@ (8001148 <__aeabi_ddiv+0x21c>)
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	e75e      	b.n	8001004 <__aeabi_ddiv+0xd8>
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	000007ff 	.word	0x000007ff
 800114c:	fffffc01 	.word	0xfffffc01
 8001150:	0800441c 	.word	0x0800441c
 8001154:	fffff801 	.word	0xfffff801
 8001158:	000003f3 	.word	0x000003f3
 800115c:	fffffc0d 	.word	0xfffffc0d
 8001160:	45cb      	cmp	fp, r9
 8001162:	d200      	bcs.n	8001166 <__aeabi_ddiv+0x23a>
 8001164:	e0f8      	b.n	8001358 <__aeabi_ddiv+0x42c>
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x23e>
 8001168:	e0f3      	b.n	8001352 <__aeabi_ddiv+0x426>
 800116a:	2301      	movs	r3, #1
 800116c:	425b      	negs	r3, r3
 800116e:	469c      	mov	ip, r3
 8001170:	4644      	mov	r4, r8
 8001172:	4648      	mov	r0, r9
 8001174:	2500      	movs	r5, #0
 8001176:	44e2      	add	sl, ip
 8001178:	465b      	mov	r3, fp
 800117a:	0e17      	lsrs	r7, r2, #24
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	431f      	orrs	r7, r3
 8001180:	0c19      	lsrs	r1, r3, #16
 8001182:	043b      	lsls	r3, r7, #16
 8001184:	0212      	lsls	r2, r2, #8
 8001186:	9700      	str	r7, [sp, #0]
 8001188:	0c1f      	lsrs	r7, r3, #16
 800118a:	4691      	mov	r9, r2
 800118c:	9102      	str	r1, [sp, #8]
 800118e:	9703      	str	r7, [sp, #12]
 8001190:	f7ff f840 	bl	8000214 <__aeabi_uidivmod>
 8001194:	0002      	movs	r2, r0
 8001196:	437a      	muls	r2, r7
 8001198:	040b      	lsls	r3, r1, #16
 800119a:	0c21      	lsrs	r1, r4, #16
 800119c:	4680      	mov	r8, r0
 800119e:	4319      	orrs	r1, r3
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d909      	bls.n	80011b8 <__aeabi_ddiv+0x28c>
 80011a4:	9f00      	ldr	r7, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	46bc      	mov	ip, r7
 80011aa:	425b      	negs	r3, r3
 80011ac:	4461      	add	r1, ip
 80011ae:	469c      	mov	ip, r3
 80011b0:	44e0      	add	r8, ip
 80011b2:	428f      	cmp	r7, r1
 80011b4:	d800      	bhi.n	80011b8 <__aeabi_ddiv+0x28c>
 80011b6:	e15c      	b.n	8001472 <__aeabi_ddiv+0x546>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	9902      	ldr	r1, [sp, #8]
 80011bc:	f7ff f82a 	bl	8000214 <__aeabi_uidivmod>
 80011c0:	9a03      	ldr	r2, [sp, #12]
 80011c2:	0424      	lsls	r4, r4, #16
 80011c4:	4342      	muls	r2, r0
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c24      	lsrs	r4, r4, #16
 80011ca:	0003      	movs	r3, r0
 80011cc:	430c      	orrs	r4, r1
 80011ce:	42a2      	cmp	r2, r4
 80011d0:	d906      	bls.n	80011e0 <__aeabi_ddiv+0x2b4>
 80011d2:	9900      	ldr	r1, [sp, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	468c      	mov	ip, r1
 80011d8:	4464      	add	r4, ip
 80011da:	42a1      	cmp	r1, r4
 80011dc:	d800      	bhi.n	80011e0 <__aeabi_ddiv+0x2b4>
 80011de:	e142      	b.n	8001466 <__aeabi_ddiv+0x53a>
 80011e0:	1aa0      	subs	r0, r4, r2
 80011e2:	4642      	mov	r2, r8
 80011e4:	0412      	lsls	r2, r2, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	4693      	mov	fp, r2
 80011ea:	464b      	mov	r3, r9
 80011ec:	4659      	mov	r1, fp
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	001f      	movs	r7, r3
 80011f2:	9304      	str	r3, [sp, #16]
 80011f4:	040b      	lsls	r3, r1, #16
 80011f6:	4649      	mov	r1, r9
 80011f8:	0409      	lsls	r1, r1, #16
 80011fa:	0c09      	lsrs	r1, r1, #16
 80011fc:	000c      	movs	r4, r1
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	435c      	muls	r4, r3
 8001202:	0c12      	lsrs	r2, r2, #16
 8001204:	437b      	muls	r3, r7
 8001206:	4688      	mov	r8, r1
 8001208:	4351      	muls	r1, r2
 800120a:	437a      	muls	r2, r7
 800120c:	0c27      	lsrs	r7, r4, #16
 800120e:	46bc      	mov	ip, r7
 8001210:	185b      	adds	r3, r3, r1
 8001212:	4463      	add	r3, ip
 8001214:	4299      	cmp	r1, r3
 8001216:	d903      	bls.n	8001220 <__aeabi_ddiv+0x2f4>
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0249      	lsls	r1, r1, #9
 800121c:	468c      	mov	ip, r1
 800121e:	4462      	add	r2, ip
 8001220:	0c19      	lsrs	r1, r3, #16
 8001222:	0424      	lsls	r4, r4, #16
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	0c24      	lsrs	r4, r4, #16
 8001228:	188a      	adds	r2, r1, r2
 800122a:	191c      	adds	r4, r3, r4
 800122c:	4290      	cmp	r0, r2
 800122e:	d302      	bcc.n	8001236 <__aeabi_ddiv+0x30a>
 8001230:	d116      	bne.n	8001260 <__aeabi_ddiv+0x334>
 8001232:	42a5      	cmp	r5, r4
 8001234:	d214      	bcs.n	8001260 <__aeabi_ddiv+0x334>
 8001236:	465b      	mov	r3, fp
 8001238:	9f00      	ldr	r7, [sp, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	444d      	add	r5, r9
 800123e:	9305      	str	r3, [sp, #20]
 8001240:	454d      	cmp	r5, r9
 8001242:	419b      	sbcs	r3, r3
 8001244:	46bc      	mov	ip, r7
 8001246:	425b      	negs	r3, r3
 8001248:	4463      	add	r3, ip
 800124a:	18c0      	adds	r0, r0, r3
 800124c:	4287      	cmp	r7, r0
 800124e:	d300      	bcc.n	8001252 <__aeabi_ddiv+0x326>
 8001250:	e102      	b.n	8001458 <__aeabi_ddiv+0x52c>
 8001252:	4282      	cmp	r2, r0
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x32c>
 8001256:	e129      	b.n	80014ac <__aeabi_ddiv+0x580>
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0x330>
 800125a:	e124      	b.n	80014a6 <__aeabi_ddiv+0x57a>
 800125c:	9b05      	ldr	r3, [sp, #20]
 800125e:	469b      	mov	fp, r3
 8001260:	1b2c      	subs	r4, r5, r4
 8001262:	42a5      	cmp	r5, r4
 8001264:	41ad      	sbcs	r5, r5
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	1a80      	subs	r0, r0, r2
 800126a:	426d      	negs	r5, r5
 800126c:	1b40      	subs	r0, r0, r5
 800126e:	4283      	cmp	r3, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_ddiv+0x348>
 8001272:	e10f      	b.n	8001494 <__aeabi_ddiv+0x568>
 8001274:	9902      	ldr	r1, [sp, #8]
 8001276:	f7fe ffcd 	bl	8000214 <__aeabi_uidivmod>
 800127a:	9a03      	ldr	r2, [sp, #12]
 800127c:	040b      	lsls	r3, r1, #16
 800127e:	4342      	muls	r2, r0
 8001280:	0c21      	lsrs	r1, r4, #16
 8001282:	0005      	movs	r5, r0
 8001284:	4319      	orrs	r1, r3
 8001286:	428a      	cmp	r2, r1
 8001288:	d900      	bls.n	800128c <__aeabi_ddiv+0x360>
 800128a:	e0cb      	b.n	8001424 <__aeabi_ddiv+0x4f8>
 800128c:	1a88      	subs	r0, r1, r2
 800128e:	9902      	ldr	r1, [sp, #8]
 8001290:	f7fe ffc0 	bl	8000214 <__aeabi_uidivmod>
 8001294:	9a03      	ldr	r2, [sp, #12]
 8001296:	0424      	lsls	r4, r4, #16
 8001298:	4342      	muls	r2, r0
 800129a:	0409      	lsls	r1, r1, #16
 800129c:	0c24      	lsrs	r4, r4, #16
 800129e:	0003      	movs	r3, r0
 80012a0:	430c      	orrs	r4, r1
 80012a2:	42a2      	cmp	r2, r4
 80012a4:	d900      	bls.n	80012a8 <__aeabi_ddiv+0x37c>
 80012a6:	e0ca      	b.n	800143e <__aeabi_ddiv+0x512>
 80012a8:	4641      	mov	r1, r8
 80012aa:	1aa4      	subs	r4, r4, r2
 80012ac:	042a      	lsls	r2, r5, #16
 80012ae:	431a      	orrs	r2, r3
 80012b0:	9f04      	ldr	r7, [sp, #16]
 80012b2:	0413      	lsls	r3, r2, #16
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	4359      	muls	r1, r3
 80012b8:	4640      	mov	r0, r8
 80012ba:	437b      	muls	r3, r7
 80012bc:	469c      	mov	ip, r3
 80012be:	0c15      	lsrs	r5, r2, #16
 80012c0:	4368      	muls	r0, r5
 80012c2:	0c0b      	lsrs	r3, r1, #16
 80012c4:	4484      	add	ip, r0
 80012c6:	4463      	add	r3, ip
 80012c8:	437d      	muls	r5, r7
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d903      	bls.n	80012d6 <__aeabi_ddiv+0x3aa>
 80012ce:	2080      	movs	r0, #128	@ 0x80
 80012d0:	0240      	lsls	r0, r0, #9
 80012d2:	4684      	mov	ip, r0
 80012d4:	4465      	add	r5, ip
 80012d6:	0c18      	lsrs	r0, r3, #16
 80012d8:	0409      	lsls	r1, r1, #16
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	0c09      	lsrs	r1, r1, #16
 80012de:	1940      	adds	r0, r0, r5
 80012e0:	185b      	adds	r3, r3, r1
 80012e2:	4284      	cmp	r4, r0
 80012e4:	d327      	bcc.n	8001336 <__aeabi_ddiv+0x40a>
 80012e6:	d023      	beq.n	8001330 <__aeabi_ddiv+0x404>
 80012e8:	2301      	movs	r3, #1
 80012ea:	0035      	movs	r5, r6
 80012ec:	431a      	orrs	r2, r3
 80012ee:	4b94      	ldr	r3, [pc, #592]	@ (8001540 <__aeabi_ddiv+0x614>)
 80012f0:	4453      	add	r3, sl
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dd60      	ble.n	80013b8 <__aeabi_ddiv+0x48c>
 80012f6:	0751      	lsls	r1, r2, #29
 80012f8:	d000      	beq.n	80012fc <__aeabi_ddiv+0x3d0>
 80012fa:	e086      	b.n	800140a <__aeabi_ddiv+0x4de>
 80012fc:	002e      	movs	r6, r5
 80012fe:	08d1      	lsrs	r1, r2, #3
 8001300:	465a      	mov	r2, fp
 8001302:	01d2      	lsls	r2, r2, #7
 8001304:	d506      	bpl.n	8001314 <__aeabi_ddiv+0x3e8>
 8001306:	465a      	mov	r2, fp
 8001308:	4b8e      	ldr	r3, [pc, #568]	@ (8001544 <__aeabi_ddiv+0x618>)
 800130a:	401a      	ands	r2, r3
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	4693      	mov	fp, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4453      	add	r3, sl
 8001314:	4a8c      	ldr	r2, [pc, #560]	@ (8001548 <__aeabi_ddiv+0x61c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	dd00      	ble.n	800131c <__aeabi_ddiv+0x3f0>
 800131a:	e680      	b.n	800101e <__aeabi_ddiv+0xf2>
 800131c:	465a      	mov	r2, fp
 800131e:	0752      	lsls	r2, r2, #29
 8001320:	430a      	orrs	r2, r1
 8001322:	4690      	mov	r8, r2
 8001324:	465a      	mov	r2, fp
 8001326:	055b      	lsls	r3, r3, #21
 8001328:	0254      	lsls	r4, r2, #9
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	0d5b      	lsrs	r3, r3, #21
 800132e:	e669      	b.n	8001004 <__aeabi_ddiv+0xd8>
 8001330:	0035      	movs	r5, r6
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0db      	beq.n	80012ee <__aeabi_ddiv+0x3c2>
 8001336:	9d00      	ldr	r5, [sp, #0]
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	46ac      	mov	ip, r5
 800133c:	4464      	add	r4, ip
 800133e:	42ac      	cmp	r4, r5
 8001340:	d200      	bcs.n	8001344 <__aeabi_ddiv+0x418>
 8001342:	e09e      	b.n	8001482 <__aeabi_ddiv+0x556>
 8001344:	4284      	cmp	r4, r0
 8001346:	d200      	bcs.n	800134a <__aeabi_ddiv+0x41e>
 8001348:	e0e1      	b.n	800150e <__aeabi_ddiv+0x5e2>
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x422>
 800134c:	e0ee      	b.n	800152c <__aeabi_ddiv+0x600>
 800134e:	000a      	movs	r2, r1
 8001350:	e7ca      	b.n	80012e8 <__aeabi_ddiv+0x3bc>
 8001352:	4542      	cmp	r2, r8
 8001354:	d900      	bls.n	8001358 <__aeabi_ddiv+0x42c>
 8001356:	e708      	b.n	800116a <__aeabi_ddiv+0x23e>
 8001358:	464b      	mov	r3, r9
 800135a:	07dc      	lsls	r4, r3, #31
 800135c:	0858      	lsrs	r0, r3, #1
 800135e:	4643      	mov	r3, r8
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	431c      	orrs	r4, r3
 8001364:	4643      	mov	r3, r8
 8001366:	07dd      	lsls	r5, r3, #31
 8001368:	e706      	b.n	8001178 <__aeabi_ddiv+0x24c>
 800136a:	f001 f9b1 	bl	80026d0 <__clzsi2>
 800136e:	2315      	movs	r3, #21
 8001370:	469c      	mov	ip, r3
 8001372:	4484      	add	ip, r0
 8001374:	0002      	movs	r2, r0
 8001376:	4663      	mov	r3, ip
 8001378:	3220      	adds	r2, #32
 800137a:	2b1c      	cmp	r3, #28
 800137c:	dc00      	bgt.n	8001380 <__aeabi_ddiv+0x454>
 800137e:	e692      	b.n	80010a6 <__aeabi_ddiv+0x17a>
 8001380:	0023      	movs	r3, r4
 8001382:	3808      	subs	r0, #8
 8001384:	4083      	lsls	r3, r0
 8001386:	4699      	mov	r9, r3
 8001388:	2300      	movs	r3, #0
 800138a:	4698      	mov	r8, r3
 800138c:	e69a      	b.n	80010c4 <__aeabi_ddiv+0x198>
 800138e:	f001 f99f 	bl	80026d0 <__clzsi2>
 8001392:	0002      	movs	r2, r0
 8001394:	0003      	movs	r3, r0
 8001396:	3215      	adds	r2, #21
 8001398:	3320      	adds	r3, #32
 800139a:	2a1c      	cmp	r2, #28
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_ddiv+0x474>
 800139e:	e65f      	b.n	8001060 <__aeabi_ddiv+0x134>
 80013a0:	9900      	ldr	r1, [sp, #0]
 80013a2:	3808      	subs	r0, #8
 80013a4:	4081      	lsls	r1, r0
 80013a6:	2200      	movs	r2, #0
 80013a8:	468b      	mov	fp, r1
 80013aa:	e666      	b.n	800107a <__aeabi_ddiv+0x14e>
 80013ac:	2200      	movs	r2, #0
 80013ae:	002e      	movs	r6, r5
 80013b0:	2400      	movs	r4, #0
 80013b2:	4690      	mov	r8, r2
 80013b4:	4b65      	ldr	r3, [pc, #404]	@ (800154c <__aeabi_ddiv+0x620>)
 80013b6:	e625      	b.n	8001004 <__aeabi_ddiv+0xd8>
 80013b8:	002e      	movs	r6, r5
 80013ba:	2101      	movs	r1, #1
 80013bc:	1ac9      	subs	r1, r1, r3
 80013be:	2938      	cmp	r1, #56	@ 0x38
 80013c0:	dd00      	ble.n	80013c4 <__aeabi_ddiv+0x498>
 80013c2:	e61b      	b.n	8000ffc <__aeabi_ddiv+0xd0>
 80013c4:	291f      	cmp	r1, #31
 80013c6:	dc7e      	bgt.n	80014c6 <__aeabi_ddiv+0x59a>
 80013c8:	4861      	ldr	r0, [pc, #388]	@ (8001550 <__aeabi_ddiv+0x624>)
 80013ca:	0014      	movs	r4, r2
 80013cc:	4450      	add	r0, sl
 80013ce:	465b      	mov	r3, fp
 80013d0:	4082      	lsls	r2, r0
 80013d2:	4083      	lsls	r3, r0
 80013d4:	40cc      	lsrs	r4, r1
 80013d6:	1e50      	subs	r0, r2, #1
 80013d8:	4182      	sbcs	r2, r0
 80013da:	4323      	orrs	r3, r4
 80013dc:	431a      	orrs	r2, r3
 80013de:	465b      	mov	r3, fp
 80013e0:	40cb      	lsrs	r3, r1
 80013e2:	0751      	lsls	r1, r2, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ddiv+0x4ce>
 80013e6:	210f      	movs	r1, #15
 80013e8:	4011      	ands	r1, r2
 80013ea:	2904      	cmp	r1, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ddiv+0x4ce>
 80013ee:	1d11      	adds	r1, r2, #4
 80013f0:	4291      	cmp	r1, r2
 80013f2:	4192      	sbcs	r2, r2
 80013f4:	4252      	negs	r2, r2
 80013f6:	189b      	adds	r3, r3, r2
 80013f8:	000a      	movs	r2, r1
 80013fa:	0219      	lsls	r1, r3, #8
 80013fc:	d400      	bmi.n	8001400 <__aeabi_ddiv+0x4d4>
 80013fe:	e09b      	b.n	8001538 <__aeabi_ddiv+0x60c>
 8001400:	2200      	movs	r2, #0
 8001402:	2301      	movs	r3, #1
 8001404:	2400      	movs	r4, #0
 8001406:	4690      	mov	r8, r2
 8001408:	e5fc      	b.n	8001004 <__aeabi_ddiv+0xd8>
 800140a:	210f      	movs	r1, #15
 800140c:	4011      	ands	r1, r2
 800140e:	2904      	cmp	r1, #4
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x4e8>
 8001412:	e773      	b.n	80012fc <__aeabi_ddiv+0x3d0>
 8001414:	1d11      	adds	r1, r2, #4
 8001416:	4291      	cmp	r1, r2
 8001418:	4192      	sbcs	r2, r2
 800141a:	4252      	negs	r2, r2
 800141c:	002e      	movs	r6, r5
 800141e:	08c9      	lsrs	r1, r1, #3
 8001420:	4493      	add	fp, r2
 8001422:	e76d      	b.n	8001300 <__aeabi_ddiv+0x3d4>
 8001424:	9b00      	ldr	r3, [sp, #0]
 8001426:	3d01      	subs	r5, #1
 8001428:	469c      	mov	ip, r3
 800142a:	4461      	add	r1, ip
 800142c:	428b      	cmp	r3, r1
 800142e:	d900      	bls.n	8001432 <__aeabi_ddiv+0x506>
 8001430:	e72c      	b.n	800128c <__aeabi_ddiv+0x360>
 8001432:	428a      	cmp	r2, r1
 8001434:	d800      	bhi.n	8001438 <__aeabi_ddiv+0x50c>
 8001436:	e729      	b.n	800128c <__aeabi_ddiv+0x360>
 8001438:	1e85      	subs	r5, r0, #2
 800143a:	4461      	add	r1, ip
 800143c:	e726      	b.n	800128c <__aeabi_ddiv+0x360>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	468c      	mov	ip, r1
 8001444:	4464      	add	r4, ip
 8001446:	42a1      	cmp	r1, r4
 8001448:	d900      	bls.n	800144c <__aeabi_ddiv+0x520>
 800144a:	e72d      	b.n	80012a8 <__aeabi_ddiv+0x37c>
 800144c:	42a2      	cmp	r2, r4
 800144e:	d800      	bhi.n	8001452 <__aeabi_ddiv+0x526>
 8001450:	e72a      	b.n	80012a8 <__aeabi_ddiv+0x37c>
 8001452:	1e83      	subs	r3, r0, #2
 8001454:	4464      	add	r4, ip
 8001456:	e727      	b.n	80012a8 <__aeabi_ddiv+0x37c>
 8001458:	4287      	cmp	r7, r0
 800145a:	d000      	beq.n	800145e <__aeabi_ddiv+0x532>
 800145c:	e6fe      	b.n	800125c <__aeabi_ddiv+0x330>
 800145e:	45a9      	cmp	r9, r5
 8001460:	d900      	bls.n	8001464 <__aeabi_ddiv+0x538>
 8001462:	e6fb      	b.n	800125c <__aeabi_ddiv+0x330>
 8001464:	e6f5      	b.n	8001252 <__aeabi_ddiv+0x326>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d800      	bhi.n	800146c <__aeabi_ddiv+0x540>
 800146a:	e6b9      	b.n	80011e0 <__aeabi_ddiv+0x2b4>
 800146c:	1e83      	subs	r3, r0, #2
 800146e:	4464      	add	r4, ip
 8001470:	e6b6      	b.n	80011e0 <__aeabi_ddiv+0x2b4>
 8001472:	428a      	cmp	r2, r1
 8001474:	d800      	bhi.n	8001478 <__aeabi_ddiv+0x54c>
 8001476:	e69f      	b.n	80011b8 <__aeabi_ddiv+0x28c>
 8001478:	46bc      	mov	ip, r7
 800147a:	1e83      	subs	r3, r0, #2
 800147c:	4698      	mov	r8, r3
 800147e:	4461      	add	r1, ip
 8001480:	e69a      	b.n	80011b8 <__aeabi_ddiv+0x28c>
 8001482:	000a      	movs	r2, r1
 8001484:	4284      	cmp	r4, r0
 8001486:	d000      	beq.n	800148a <__aeabi_ddiv+0x55e>
 8001488:	e72e      	b.n	80012e8 <__aeabi_ddiv+0x3bc>
 800148a:	454b      	cmp	r3, r9
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x564>
 800148e:	e72b      	b.n	80012e8 <__aeabi_ddiv+0x3bc>
 8001490:	0035      	movs	r5, r6
 8001492:	e72c      	b.n	80012ee <__aeabi_ddiv+0x3c2>
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <__aeabi_ddiv+0x614>)
 8001496:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <__aeabi_ddiv+0x628>)
 8001498:	4453      	add	r3, sl
 800149a:	4592      	cmp	sl, r2
 800149c:	db43      	blt.n	8001526 <__aeabi_ddiv+0x5fa>
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	4493      	add	fp, r2
 80014a4:	e72c      	b.n	8001300 <__aeabi_ddiv+0x3d4>
 80014a6:	42ac      	cmp	r4, r5
 80014a8:	d800      	bhi.n	80014ac <__aeabi_ddiv+0x580>
 80014aa:	e6d7      	b.n	800125c <__aeabi_ddiv+0x330>
 80014ac:	2302      	movs	r3, #2
 80014ae:	425b      	negs	r3, r3
 80014b0:	469c      	mov	ip, r3
 80014b2:	9900      	ldr	r1, [sp, #0]
 80014b4:	444d      	add	r5, r9
 80014b6:	454d      	cmp	r5, r9
 80014b8:	419b      	sbcs	r3, r3
 80014ba:	44e3      	add	fp, ip
 80014bc:	468c      	mov	ip, r1
 80014be:	425b      	negs	r3, r3
 80014c0:	4463      	add	r3, ip
 80014c2:	18c0      	adds	r0, r0, r3
 80014c4:	e6cc      	b.n	8001260 <__aeabi_ddiv+0x334>
 80014c6:	201f      	movs	r0, #31
 80014c8:	4240      	negs	r0, r0
 80014ca:	1ac3      	subs	r3, r0, r3
 80014cc:	4658      	mov	r0, fp
 80014ce:	40d8      	lsrs	r0, r3
 80014d0:	2920      	cmp	r1, #32
 80014d2:	d004      	beq.n	80014de <__aeabi_ddiv+0x5b2>
 80014d4:	4659      	mov	r1, fp
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <__aeabi_ddiv+0x62c>)
 80014d8:	4453      	add	r3, sl
 80014da:	4099      	lsls	r1, r3
 80014dc:	430a      	orrs	r2, r1
 80014de:	1e53      	subs	r3, r2, #1
 80014e0:	419a      	sbcs	r2, r3
 80014e2:	2307      	movs	r3, #7
 80014e4:	0019      	movs	r1, r3
 80014e6:	4302      	orrs	r2, r0
 80014e8:	2400      	movs	r4, #0
 80014ea:	4011      	ands	r1, r2
 80014ec:	4213      	tst	r3, r2
 80014ee:	d009      	beq.n	8001504 <__aeabi_ddiv+0x5d8>
 80014f0:	3308      	adds	r3, #8
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d01d      	beq.n	8001534 <__aeabi_ddiv+0x608>
 80014f8:	1d13      	adds	r3, r2, #4
 80014fa:	4293      	cmp	r3, r2
 80014fc:	4189      	sbcs	r1, r1
 80014fe:	001a      	movs	r2, r3
 8001500:	4249      	negs	r1, r1
 8001502:	0749      	lsls	r1, r1, #29
 8001504:	08d2      	lsrs	r2, r2, #3
 8001506:	430a      	orrs	r2, r1
 8001508:	4690      	mov	r8, r2
 800150a:	2300      	movs	r3, #0
 800150c:	e57a      	b.n	8001004 <__aeabi_ddiv+0xd8>
 800150e:	4649      	mov	r1, r9
 8001510:	9f00      	ldr	r7, [sp, #0]
 8001512:	004d      	lsls	r5, r1, #1
 8001514:	454d      	cmp	r5, r9
 8001516:	4189      	sbcs	r1, r1
 8001518:	46bc      	mov	ip, r7
 800151a:	4249      	negs	r1, r1
 800151c:	4461      	add	r1, ip
 800151e:	46a9      	mov	r9, r5
 8001520:	3a02      	subs	r2, #2
 8001522:	1864      	adds	r4, r4, r1
 8001524:	e7ae      	b.n	8001484 <__aeabi_ddiv+0x558>
 8001526:	2201      	movs	r2, #1
 8001528:	4252      	negs	r2, r2
 800152a:	e746      	b.n	80013ba <__aeabi_ddiv+0x48e>
 800152c:	4599      	cmp	r9, r3
 800152e:	d3ee      	bcc.n	800150e <__aeabi_ddiv+0x5e2>
 8001530:	000a      	movs	r2, r1
 8001532:	e7aa      	b.n	800148a <__aeabi_ddiv+0x55e>
 8001534:	2100      	movs	r1, #0
 8001536:	e7e5      	b.n	8001504 <__aeabi_ddiv+0x5d8>
 8001538:	0759      	lsls	r1, r3, #29
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	0b1c      	lsrs	r4, r3, #12
 800153e:	e7e1      	b.n	8001504 <__aeabi_ddiv+0x5d8>
 8001540:	000003ff 	.word	0x000003ff
 8001544:	feffffff 	.word	0xfeffffff
 8001548:	000007fe 	.word	0x000007fe
 800154c:	000007ff 	.word	0x000007ff
 8001550:	0000041e 	.word	0x0000041e
 8001554:	fffffc02 	.word	0xfffffc02
 8001558:	0000043e 	.word	0x0000043e

0800155c <__eqdf2>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	46de      	mov	lr, fp
 8001562:	464e      	mov	r6, r9
 8001564:	4645      	mov	r5, r8
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	000d      	movs	r5, r1
 800156a:	0004      	movs	r4, r0
 800156c:	0fe8      	lsrs	r0, r5, #31
 800156e:	4683      	mov	fp, r0
 8001570:	0309      	lsls	r1, r1, #12
 8001572:	0fd8      	lsrs	r0, r3, #31
 8001574:	0b09      	lsrs	r1, r1, #12
 8001576:	4682      	mov	sl, r0
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <__eqdf2+0x84>)
 800157a:	468c      	mov	ip, r1
 800157c:	031f      	lsls	r7, r3, #12
 800157e:	0069      	lsls	r1, r5, #1
 8001580:	005e      	lsls	r6, r3, #1
 8001582:	0d49      	lsrs	r1, r1, #21
 8001584:	0b3f      	lsrs	r7, r7, #12
 8001586:	0d76      	lsrs	r6, r6, #21
 8001588:	4281      	cmp	r1, r0
 800158a:	d018      	beq.n	80015be <__eqdf2+0x62>
 800158c:	4286      	cmp	r6, r0
 800158e:	d00f      	beq.n	80015b0 <__eqdf2+0x54>
 8001590:	2001      	movs	r0, #1
 8001592:	42b1      	cmp	r1, r6
 8001594:	d10d      	bne.n	80015b2 <__eqdf2+0x56>
 8001596:	45bc      	cmp	ip, r7
 8001598:	d10b      	bne.n	80015b2 <__eqdf2+0x56>
 800159a:	4294      	cmp	r4, r2
 800159c:	d109      	bne.n	80015b2 <__eqdf2+0x56>
 800159e:	45d3      	cmp	fp, sl
 80015a0:	d01c      	beq.n	80015dc <__eqdf2+0x80>
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d105      	bne.n	80015b2 <__eqdf2+0x56>
 80015a6:	4660      	mov	r0, ip
 80015a8:	4320      	orrs	r0, r4
 80015aa:	1e43      	subs	r3, r0, #1
 80015ac:	4198      	sbcs	r0, r3
 80015ae:	e000      	b.n	80015b2 <__eqdf2+0x56>
 80015b0:	2001      	movs	r0, #1
 80015b2:	bcf0      	pop	{r4, r5, r6, r7}
 80015b4:	46bb      	mov	fp, r7
 80015b6:	46b2      	mov	sl, r6
 80015b8:	46a9      	mov	r9, r5
 80015ba:	46a0      	mov	r8, r4
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	2001      	movs	r0, #1
 80015c0:	428e      	cmp	r6, r1
 80015c2:	d1f6      	bne.n	80015b2 <__eqdf2+0x56>
 80015c4:	4661      	mov	r1, ip
 80015c6:	4339      	orrs	r1, r7
 80015c8:	000f      	movs	r7, r1
 80015ca:	4317      	orrs	r7, r2
 80015cc:	4327      	orrs	r7, r4
 80015ce:	d1f0      	bne.n	80015b2 <__eqdf2+0x56>
 80015d0:	465b      	mov	r3, fp
 80015d2:	4652      	mov	r2, sl
 80015d4:	1a98      	subs	r0, r3, r2
 80015d6:	1e43      	subs	r3, r0, #1
 80015d8:	4198      	sbcs	r0, r3
 80015da:	e7ea      	b.n	80015b2 <__eqdf2+0x56>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7e8      	b.n	80015b2 <__eqdf2+0x56>
 80015e0:	000007ff 	.word	0x000007ff

080015e4 <__gedf2>:
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	4657      	mov	r7, sl
 80015e8:	464e      	mov	r6, r9
 80015ea:	4645      	mov	r5, r8
 80015ec:	46de      	mov	lr, fp
 80015ee:	b5e0      	push	{r5, r6, r7, lr}
 80015f0:	000d      	movs	r5, r1
 80015f2:	030e      	lsls	r6, r1, #12
 80015f4:	0049      	lsls	r1, r1, #1
 80015f6:	0d49      	lsrs	r1, r1, #21
 80015f8:	468a      	mov	sl, r1
 80015fa:	0fdf      	lsrs	r7, r3, #31
 80015fc:	0fe9      	lsrs	r1, r5, #31
 80015fe:	46bc      	mov	ip, r7
 8001600:	b083      	sub	sp, #12
 8001602:	4f2f      	ldr	r7, [pc, #188]	@ (80016c0 <__gedf2+0xdc>)
 8001604:	0004      	movs	r4, r0
 8001606:	4680      	mov	r8, r0
 8001608:	9101      	str	r1, [sp, #4]
 800160a:	0058      	lsls	r0, r3, #1
 800160c:	0319      	lsls	r1, r3, #12
 800160e:	4691      	mov	r9, r2
 8001610:	0b36      	lsrs	r6, r6, #12
 8001612:	0b09      	lsrs	r1, r1, #12
 8001614:	0d40      	lsrs	r0, r0, #21
 8001616:	45ba      	cmp	sl, r7
 8001618:	d01d      	beq.n	8001656 <__gedf2+0x72>
 800161a:	42b8      	cmp	r0, r7
 800161c:	d00d      	beq.n	800163a <__gedf2+0x56>
 800161e:	4657      	mov	r7, sl
 8001620:	2f00      	cmp	r7, #0
 8001622:	d12a      	bne.n	800167a <__gedf2+0x96>
 8001624:	4334      	orrs	r4, r6
 8001626:	2800      	cmp	r0, #0
 8001628:	d124      	bne.n	8001674 <__gedf2+0x90>
 800162a:	430a      	orrs	r2, r1
 800162c:	d036      	beq.n	800169c <__gedf2+0xb8>
 800162e:	2c00      	cmp	r4, #0
 8001630:	d141      	bne.n	80016b6 <__gedf2+0xd2>
 8001632:	4663      	mov	r3, ip
 8001634:	0058      	lsls	r0, r3, #1
 8001636:	3801      	subs	r0, #1
 8001638:	e015      	b.n	8001666 <__gedf2+0x82>
 800163a:	4311      	orrs	r1, r2
 800163c:	d138      	bne.n	80016b0 <__gedf2+0xcc>
 800163e:	4653      	mov	r3, sl
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <__gedf2+0x64>
 8001644:	4326      	orrs	r6, r4
 8001646:	d0f4      	beq.n	8001632 <__gedf2+0x4e>
 8001648:	9b01      	ldr	r3, [sp, #4]
 800164a:	4563      	cmp	r3, ip
 800164c:	d107      	bne.n	800165e <__gedf2+0x7a>
 800164e:	9b01      	ldr	r3, [sp, #4]
 8001650:	0058      	lsls	r0, r3, #1
 8001652:	3801      	subs	r0, #1
 8001654:	e007      	b.n	8001666 <__gedf2+0x82>
 8001656:	4326      	orrs	r6, r4
 8001658:	d12a      	bne.n	80016b0 <__gedf2+0xcc>
 800165a:	4550      	cmp	r0, sl
 800165c:	d021      	beq.n	80016a2 <__gedf2+0xbe>
 800165e:	2001      	movs	r0, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	425f      	negs	r7, r3
 8001664:	4338      	orrs	r0, r7
 8001666:	b003      	add	sp, #12
 8001668:	bcf0      	pop	{r4, r5, r6, r7}
 800166a:	46bb      	mov	fp, r7
 800166c:	46b2      	mov	sl, r6
 800166e:	46a9      	mov	r9, r5
 8001670:	46a0      	mov	r8, r4
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001674:	2c00      	cmp	r4, #0
 8001676:	d0dc      	beq.n	8001632 <__gedf2+0x4e>
 8001678:	e7e6      	b.n	8001648 <__gedf2+0x64>
 800167a:	2800      	cmp	r0, #0
 800167c:	d0ef      	beq.n	800165e <__gedf2+0x7a>
 800167e:	9b01      	ldr	r3, [sp, #4]
 8001680:	4563      	cmp	r3, ip
 8001682:	d1ec      	bne.n	800165e <__gedf2+0x7a>
 8001684:	4582      	cmp	sl, r0
 8001686:	dcea      	bgt.n	800165e <__gedf2+0x7a>
 8001688:	dbe1      	blt.n	800164e <__gedf2+0x6a>
 800168a:	428e      	cmp	r6, r1
 800168c:	d8e7      	bhi.n	800165e <__gedf2+0x7a>
 800168e:	d1de      	bne.n	800164e <__gedf2+0x6a>
 8001690:	45c8      	cmp	r8, r9
 8001692:	d8e4      	bhi.n	800165e <__gedf2+0x7a>
 8001694:	2000      	movs	r0, #0
 8001696:	45c8      	cmp	r8, r9
 8001698:	d2e5      	bcs.n	8001666 <__gedf2+0x82>
 800169a:	e7d8      	b.n	800164e <__gedf2+0x6a>
 800169c:	2c00      	cmp	r4, #0
 800169e:	d0e2      	beq.n	8001666 <__gedf2+0x82>
 80016a0:	e7dd      	b.n	800165e <__gedf2+0x7a>
 80016a2:	4311      	orrs	r1, r2
 80016a4:	d104      	bne.n	80016b0 <__gedf2+0xcc>
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	4563      	cmp	r3, ip
 80016aa:	d1d8      	bne.n	800165e <__gedf2+0x7a>
 80016ac:	2000      	movs	r0, #0
 80016ae:	e7da      	b.n	8001666 <__gedf2+0x82>
 80016b0:	2002      	movs	r0, #2
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7d7      	b.n	8001666 <__gedf2+0x82>
 80016b6:	9b01      	ldr	r3, [sp, #4]
 80016b8:	4563      	cmp	r3, ip
 80016ba:	d0e6      	beq.n	800168a <__gedf2+0xa6>
 80016bc:	e7cf      	b.n	800165e <__gedf2+0x7a>
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	000007ff 	.word	0x000007ff

080016c4 <__ledf2>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	4657      	mov	r7, sl
 80016c8:	464e      	mov	r6, r9
 80016ca:	4645      	mov	r5, r8
 80016cc:	46de      	mov	lr, fp
 80016ce:	b5e0      	push	{r5, r6, r7, lr}
 80016d0:	000d      	movs	r5, r1
 80016d2:	030e      	lsls	r6, r1, #12
 80016d4:	0049      	lsls	r1, r1, #1
 80016d6:	0d49      	lsrs	r1, r1, #21
 80016d8:	468a      	mov	sl, r1
 80016da:	0fdf      	lsrs	r7, r3, #31
 80016dc:	0fe9      	lsrs	r1, r5, #31
 80016de:	46bc      	mov	ip, r7
 80016e0:	b083      	sub	sp, #12
 80016e2:	4f2e      	ldr	r7, [pc, #184]	@ (800179c <__ledf2+0xd8>)
 80016e4:	0004      	movs	r4, r0
 80016e6:	4680      	mov	r8, r0
 80016e8:	9101      	str	r1, [sp, #4]
 80016ea:	0058      	lsls	r0, r3, #1
 80016ec:	0319      	lsls	r1, r3, #12
 80016ee:	4691      	mov	r9, r2
 80016f0:	0b36      	lsrs	r6, r6, #12
 80016f2:	0b09      	lsrs	r1, r1, #12
 80016f4:	0d40      	lsrs	r0, r0, #21
 80016f6:	45ba      	cmp	sl, r7
 80016f8:	d01e      	beq.n	8001738 <__ledf2+0x74>
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	d00d      	beq.n	800171a <__ledf2+0x56>
 80016fe:	4657      	mov	r7, sl
 8001700:	2f00      	cmp	r7, #0
 8001702:	d127      	bne.n	8001754 <__ledf2+0x90>
 8001704:	4334      	orrs	r4, r6
 8001706:	2800      	cmp	r0, #0
 8001708:	d133      	bne.n	8001772 <__ledf2+0xae>
 800170a:	430a      	orrs	r2, r1
 800170c:	d034      	beq.n	8001778 <__ledf2+0xb4>
 800170e:	2c00      	cmp	r4, #0
 8001710:	d140      	bne.n	8001794 <__ledf2+0xd0>
 8001712:	4663      	mov	r3, ip
 8001714:	0058      	lsls	r0, r3, #1
 8001716:	3801      	subs	r0, #1
 8001718:	e015      	b.n	8001746 <__ledf2+0x82>
 800171a:	4311      	orrs	r1, r2
 800171c:	d112      	bne.n	8001744 <__ledf2+0x80>
 800171e:	4653      	mov	r3, sl
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <__ledf2+0x64>
 8001724:	4326      	orrs	r6, r4
 8001726:	d0f4      	beq.n	8001712 <__ledf2+0x4e>
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	4563      	cmp	r3, ip
 800172c:	d01d      	beq.n	800176a <__ledf2+0xa6>
 800172e:	2001      	movs	r0, #1
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	425f      	negs	r7, r3
 8001734:	4338      	orrs	r0, r7
 8001736:	e006      	b.n	8001746 <__ledf2+0x82>
 8001738:	4326      	orrs	r6, r4
 800173a:	d103      	bne.n	8001744 <__ledf2+0x80>
 800173c:	4550      	cmp	r0, sl
 800173e:	d1f6      	bne.n	800172e <__ledf2+0x6a>
 8001740:	4311      	orrs	r1, r2
 8001742:	d01c      	beq.n	800177e <__ledf2+0xba>
 8001744:	2002      	movs	r0, #2
 8001746:	b003      	add	sp, #12
 8001748:	bcf0      	pop	{r4, r5, r6, r7}
 800174a:	46bb      	mov	fp, r7
 800174c:	46b2      	mov	sl, r6
 800174e:	46a9      	mov	r9, r5
 8001750:	46a0      	mov	r8, r4
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	2800      	cmp	r0, #0
 8001756:	d0ea      	beq.n	800172e <__ledf2+0x6a>
 8001758:	9b01      	ldr	r3, [sp, #4]
 800175a:	4563      	cmp	r3, ip
 800175c:	d1e7      	bne.n	800172e <__ledf2+0x6a>
 800175e:	4582      	cmp	sl, r0
 8001760:	dce5      	bgt.n	800172e <__ledf2+0x6a>
 8001762:	db02      	blt.n	800176a <__ledf2+0xa6>
 8001764:	428e      	cmp	r6, r1
 8001766:	d8e2      	bhi.n	800172e <__ledf2+0x6a>
 8001768:	d00e      	beq.n	8001788 <__ledf2+0xc4>
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	0058      	lsls	r0, r3, #1
 800176e:	3801      	subs	r0, #1
 8001770:	e7e9      	b.n	8001746 <__ledf2+0x82>
 8001772:	2c00      	cmp	r4, #0
 8001774:	d0cd      	beq.n	8001712 <__ledf2+0x4e>
 8001776:	e7d7      	b.n	8001728 <__ledf2+0x64>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d0e4      	beq.n	8001746 <__ledf2+0x82>
 800177c:	e7d7      	b.n	800172e <__ledf2+0x6a>
 800177e:	9b01      	ldr	r3, [sp, #4]
 8001780:	2000      	movs	r0, #0
 8001782:	4563      	cmp	r3, ip
 8001784:	d0df      	beq.n	8001746 <__ledf2+0x82>
 8001786:	e7d2      	b.n	800172e <__ledf2+0x6a>
 8001788:	45c8      	cmp	r8, r9
 800178a:	d8d0      	bhi.n	800172e <__ledf2+0x6a>
 800178c:	2000      	movs	r0, #0
 800178e:	45c8      	cmp	r8, r9
 8001790:	d2d9      	bcs.n	8001746 <__ledf2+0x82>
 8001792:	e7ea      	b.n	800176a <__ledf2+0xa6>
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	4563      	cmp	r3, ip
 8001798:	d0e4      	beq.n	8001764 <__ledf2+0xa0>
 800179a:	e7c8      	b.n	800172e <__ledf2+0x6a>
 800179c:	000007ff 	.word	0x000007ff

080017a0 <__aeabi_dmul>:
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	4657      	mov	r7, sl
 80017a4:	464e      	mov	r6, r9
 80017a6:	46de      	mov	lr, fp
 80017a8:	4645      	mov	r5, r8
 80017aa:	b5e0      	push	{r5, r6, r7, lr}
 80017ac:	001f      	movs	r7, r3
 80017ae:	030b      	lsls	r3, r1, #12
 80017b0:	0b1b      	lsrs	r3, r3, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	469a      	mov	sl, r3
 80017b6:	0fca      	lsrs	r2, r1, #31
 80017b8:	004b      	lsls	r3, r1, #1
 80017ba:	0004      	movs	r4, r0
 80017bc:	4691      	mov	r9, r2
 80017be:	b085      	sub	sp, #20
 80017c0:	0d5b      	lsrs	r3, r3, #21
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dmul+0x26>
 80017c4:	e1cf      	b.n	8001b66 <__aeabi_dmul+0x3c6>
 80017c6:	4acd      	ldr	r2, [pc, #820]	@ (8001afc <__aeabi_dmul+0x35c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d055      	beq.n	8001878 <__aeabi_dmul+0xd8>
 80017cc:	4651      	mov	r1, sl
 80017ce:	0f42      	lsrs	r2, r0, #29
 80017d0:	00c9      	lsls	r1, r1, #3
 80017d2:	430a      	orrs	r2, r1
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	0409      	lsls	r1, r1, #16
 80017d8:	4311      	orrs	r1, r2
 80017da:	00c2      	lsls	r2, r0, #3
 80017dc:	4690      	mov	r8, r2
 80017de:	4ac8      	ldr	r2, [pc, #800]	@ (8001b00 <__aeabi_dmul+0x360>)
 80017e0:	468a      	mov	sl, r1
 80017e2:	4693      	mov	fp, r2
 80017e4:	449b      	add	fp, r3
 80017e6:	2300      	movs	r3, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	033c      	lsls	r4, r7, #12
 80017ee:	007b      	lsls	r3, r7, #1
 80017f0:	0ffa      	lsrs	r2, r7, #31
 80017f2:	9601      	str	r6, [sp, #4]
 80017f4:	0b24      	lsrs	r4, r4, #12
 80017f6:	0d5b      	lsrs	r3, r3, #21
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	d100      	bne.n	80017fe <__aeabi_dmul+0x5e>
 80017fc:	e188      	b.n	8001b10 <__aeabi_dmul+0x370>
 80017fe:	4abf      	ldr	r2, [pc, #764]	@ (8001afc <__aeabi_dmul+0x35c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x66>
 8001804:	e092      	b.n	800192c <__aeabi_dmul+0x18c>
 8001806:	4abe      	ldr	r2, [pc, #760]	@ (8001b00 <__aeabi_dmul+0x360>)
 8001808:	4694      	mov	ip, r2
 800180a:	4463      	add	r3, ip
 800180c:	449b      	add	fp, r3
 800180e:	2d0a      	cmp	r5, #10
 8001810:	dc42      	bgt.n	8001898 <__aeabi_dmul+0xf8>
 8001812:	00e4      	lsls	r4, r4, #3
 8001814:	0f73      	lsrs	r3, r6, #29
 8001816:	4323      	orrs	r3, r4
 8001818:	2480      	movs	r4, #128	@ 0x80
 800181a:	4649      	mov	r1, r9
 800181c:	0424      	lsls	r4, r4, #16
 800181e:	431c      	orrs	r4, r3
 8001820:	00f3      	lsls	r3, r6, #3
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	2000      	movs	r0, #0
 8001828:	4059      	eors	r1, r3
 800182a:	b2cb      	uxtb	r3, r1
 800182c:	9303      	str	r3, [sp, #12]
 800182e:	2d02      	cmp	r5, #2
 8001830:	dc00      	bgt.n	8001834 <__aeabi_dmul+0x94>
 8001832:	e094      	b.n	800195e <__aeabi_dmul+0x1be>
 8001834:	2301      	movs	r3, #1
 8001836:	40ab      	lsls	r3, r5
 8001838:	001d      	movs	r5, r3
 800183a:	23a6      	movs	r3, #166	@ 0xa6
 800183c:	002a      	movs	r2, r5
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	401a      	ands	r2, r3
 8001842:	421d      	tst	r5, r3
 8001844:	d000      	beq.n	8001848 <__aeabi_dmul+0xa8>
 8001846:	e229      	b.n	8001c9c <__aeabi_dmul+0x4fc>
 8001848:	2390      	movs	r3, #144	@ 0x90
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	421d      	tst	r5, r3
 800184e:	d100      	bne.n	8001852 <__aeabi_dmul+0xb2>
 8001850:	e24d      	b.n	8001cee <__aeabi_dmul+0x54e>
 8001852:	2300      	movs	r3, #0
 8001854:	2480      	movs	r4, #128	@ 0x80
 8001856:	4699      	mov	r9, r3
 8001858:	0324      	lsls	r4, r4, #12
 800185a:	4ba8      	ldr	r3, [pc, #672]	@ (8001afc <__aeabi_dmul+0x35c>)
 800185c:	0010      	movs	r0, r2
 800185e:	464a      	mov	r2, r9
 8001860:	051b      	lsls	r3, r3, #20
 8001862:	4323      	orrs	r3, r4
 8001864:	07d2      	lsls	r2, r2, #31
 8001866:	4313      	orrs	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	b005      	add	sp, #20
 800186c:	bcf0      	pop	{r4, r5, r6, r7}
 800186e:	46bb      	mov	fp, r7
 8001870:	46b2      	mov	sl, r6
 8001872:	46a9      	mov	r9, r5
 8001874:	46a0      	mov	r8, r4
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	4652      	mov	r2, sl
 800187a:	4302      	orrs	r2, r0
 800187c:	4690      	mov	r8, r2
 800187e:	d000      	beq.n	8001882 <__aeabi_dmul+0xe2>
 8001880:	e1ac      	b.n	8001bdc <__aeabi_dmul+0x43c>
 8001882:	469b      	mov	fp, r3
 8001884:	2302      	movs	r3, #2
 8001886:	4692      	mov	sl, r2
 8001888:	2508      	movs	r5, #8
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	e7ae      	b.n	80017ec <__aeabi_dmul+0x4c>
 800188e:	9b00      	ldr	r3, [sp, #0]
 8001890:	46a2      	mov	sl, r4
 8001892:	4699      	mov	r9, r3
 8001894:	9b01      	ldr	r3, [sp, #4]
 8001896:	4698      	mov	r8, r3
 8001898:	9b02      	ldr	r3, [sp, #8]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d100      	bne.n	80018a0 <__aeabi_dmul+0x100>
 800189e:	e1ca      	b.n	8001c36 <__aeabi_dmul+0x496>
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dmul+0x106>
 80018a4:	e192      	b.n	8001bcc <__aeabi_dmul+0x42c>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d110      	bne.n	80018cc <__aeabi_dmul+0x12c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2400      	movs	r4, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	e7d4      	b.n	800185c <__aeabi_dmul+0xbc>
 80018b2:	2201      	movs	r2, #1
 80018b4:	087b      	lsrs	r3, r7, #1
 80018b6:	403a      	ands	r2, r7
 80018b8:	4313      	orrs	r3, r2
 80018ba:	4652      	mov	r2, sl
 80018bc:	07d2      	lsls	r2, r2, #31
 80018be:	4313      	orrs	r3, r2
 80018c0:	4698      	mov	r8, r3
 80018c2:	4653      	mov	r3, sl
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	469a      	mov	sl, r3
 80018c8:	9b03      	ldr	r3, [sp, #12]
 80018ca:	4699      	mov	r9, r3
 80018cc:	465b      	mov	r3, fp
 80018ce:	1c58      	adds	r0, r3, #1
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	445b      	add	r3, fp
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dc00      	bgt.n	80018dc <__aeabi_dmul+0x13c>
 80018da:	e1b1      	b.n	8001c40 <__aeabi_dmul+0x4a0>
 80018dc:	4642      	mov	r2, r8
 80018de:	0752      	lsls	r2, r2, #29
 80018e0:	d00b      	beq.n	80018fa <__aeabi_dmul+0x15a>
 80018e2:	220f      	movs	r2, #15
 80018e4:	4641      	mov	r1, r8
 80018e6:	400a      	ands	r2, r1
 80018e8:	2a04      	cmp	r2, #4
 80018ea:	d006      	beq.n	80018fa <__aeabi_dmul+0x15a>
 80018ec:	4642      	mov	r2, r8
 80018ee:	1d11      	adds	r1, r2, #4
 80018f0:	4541      	cmp	r1, r8
 80018f2:	4192      	sbcs	r2, r2
 80018f4:	4688      	mov	r8, r1
 80018f6:	4252      	negs	r2, r2
 80018f8:	4492      	add	sl, r2
 80018fa:	4652      	mov	r2, sl
 80018fc:	01d2      	lsls	r2, r2, #7
 80018fe:	d506      	bpl.n	800190e <__aeabi_dmul+0x16e>
 8001900:	4652      	mov	r2, sl
 8001902:	4b80      	ldr	r3, [pc, #512]	@ (8001b04 <__aeabi_dmul+0x364>)
 8001904:	401a      	ands	r2, r3
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	4692      	mov	sl, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	18c3      	adds	r3, r0, r3
 800190e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b08 <__aeabi_dmul+0x368>)
 8001910:	4293      	cmp	r3, r2
 8001912:	dd00      	ble.n	8001916 <__aeabi_dmul+0x176>
 8001914:	e18f      	b.n	8001c36 <__aeabi_dmul+0x496>
 8001916:	4642      	mov	r2, r8
 8001918:	08d1      	lsrs	r1, r2, #3
 800191a:	4652      	mov	r2, sl
 800191c:	0752      	lsls	r2, r2, #29
 800191e:	430a      	orrs	r2, r1
 8001920:	4651      	mov	r1, sl
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	024c      	lsls	r4, r1, #9
 8001926:	0b24      	lsrs	r4, r4, #12
 8001928:	0d5b      	lsrs	r3, r3, #21
 800192a:	e797      	b.n	800185c <__aeabi_dmul+0xbc>
 800192c:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <__aeabi_dmul+0x35c>)
 800192e:	4326      	orrs	r6, r4
 8001930:	469c      	mov	ip, r3
 8001932:	44e3      	add	fp, ip
 8001934:	2e00      	cmp	r6, #0
 8001936:	d100      	bne.n	800193a <__aeabi_dmul+0x19a>
 8001938:	e16f      	b.n	8001c1a <__aeabi_dmul+0x47a>
 800193a:	2303      	movs	r3, #3
 800193c:	4649      	mov	r1, r9
 800193e:	431d      	orrs	r5, r3
 8001940:	9b00      	ldr	r3, [sp, #0]
 8001942:	4059      	eors	r1, r3
 8001944:	b2cb      	uxtb	r3, r1
 8001946:	9303      	str	r3, [sp, #12]
 8001948:	2d0a      	cmp	r5, #10
 800194a:	dd00      	ble.n	800194e <__aeabi_dmul+0x1ae>
 800194c:	e133      	b.n	8001bb6 <__aeabi_dmul+0x416>
 800194e:	2301      	movs	r3, #1
 8001950:	40ab      	lsls	r3, r5
 8001952:	001d      	movs	r5, r3
 8001954:	2303      	movs	r3, #3
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2288      	movs	r2, #136	@ 0x88
 800195a:	422a      	tst	r2, r5
 800195c:	d197      	bne.n	800188e <__aeabi_dmul+0xee>
 800195e:	4642      	mov	r2, r8
 8001960:	4643      	mov	r3, r8
 8001962:	0412      	lsls	r2, r2, #16
 8001964:	0c12      	lsrs	r2, r2, #16
 8001966:	0016      	movs	r6, r2
 8001968:	9801      	ldr	r0, [sp, #4]
 800196a:	0c1d      	lsrs	r5, r3, #16
 800196c:	0c03      	lsrs	r3, r0, #16
 800196e:	0400      	lsls	r0, r0, #16
 8001970:	0c00      	lsrs	r0, r0, #16
 8001972:	4346      	muls	r6, r0
 8001974:	46b4      	mov	ip, r6
 8001976:	001e      	movs	r6, r3
 8001978:	436e      	muls	r6, r5
 800197a:	9600      	str	r6, [sp, #0]
 800197c:	0016      	movs	r6, r2
 800197e:	0007      	movs	r7, r0
 8001980:	435e      	muls	r6, r3
 8001982:	4661      	mov	r1, ip
 8001984:	46b0      	mov	r8, r6
 8001986:	436f      	muls	r7, r5
 8001988:	0c0e      	lsrs	r6, r1, #16
 800198a:	44b8      	add	r8, r7
 800198c:	4446      	add	r6, r8
 800198e:	42b7      	cmp	r7, r6
 8001990:	d905      	bls.n	800199e <__aeabi_dmul+0x1fe>
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	0249      	lsls	r1, r1, #9
 8001996:	4688      	mov	r8, r1
 8001998:	9f00      	ldr	r7, [sp, #0]
 800199a:	4447      	add	r7, r8
 800199c:	9700      	str	r7, [sp, #0]
 800199e:	4661      	mov	r1, ip
 80019a0:	0409      	lsls	r1, r1, #16
 80019a2:	0c09      	lsrs	r1, r1, #16
 80019a4:	0c37      	lsrs	r7, r6, #16
 80019a6:	0436      	lsls	r6, r6, #16
 80019a8:	468c      	mov	ip, r1
 80019aa:	0031      	movs	r1, r6
 80019ac:	4461      	add	r1, ip
 80019ae:	9101      	str	r1, [sp, #4]
 80019b0:	0011      	movs	r1, r2
 80019b2:	0c26      	lsrs	r6, r4, #16
 80019b4:	0424      	lsls	r4, r4, #16
 80019b6:	0c24      	lsrs	r4, r4, #16
 80019b8:	4361      	muls	r1, r4
 80019ba:	468c      	mov	ip, r1
 80019bc:	0021      	movs	r1, r4
 80019be:	4369      	muls	r1, r5
 80019c0:	4689      	mov	r9, r1
 80019c2:	4661      	mov	r1, ip
 80019c4:	0c09      	lsrs	r1, r1, #16
 80019c6:	4688      	mov	r8, r1
 80019c8:	4372      	muls	r2, r6
 80019ca:	444a      	add	r2, r9
 80019cc:	4442      	add	r2, r8
 80019ce:	4375      	muls	r5, r6
 80019d0:	4591      	cmp	r9, r2
 80019d2:	d903      	bls.n	80019dc <__aeabi_dmul+0x23c>
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0249      	lsls	r1, r1, #9
 80019d8:	4688      	mov	r8, r1
 80019da:	4445      	add	r5, r8
 80019dc:	0c11      	lsrs	r1, r2, #16
 80019de:	4688      	mov	r8, r1
 80019e0:	4661      	mov	r1, ip
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	0c09      	lsrs	r1, r1, #16
 80019e6:	468c      	mov	ip, r1
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	4462      	add	r2, ip
 80019ec:	18b9      	adds	r1, r7, r2
 80019ee:	9102      	str	r1, [sp, #8]
 80019f0:	4651      	mov	r1, sl
 80019f2:	0c09      	lsrs	r1, r1, #16
 80019f4:	468c      	mov	ip, r1
 80019f6:	4651      	mov	r1, sl
 80019f8:	040f      	lsls	r7, r1, #16
 80019fa:	0c3f      	lsrs	r7, r7, #16
 80019fc:	0039      	movs	r1, r7
 80019fe:	4341      	muls	r1, r0
 8001a00:	4445      	add	r5, r8
 8001a02:	4688      	mov	r8, r1
 8001a04:	4661      	mov	r1, ip
 8001a06:	4341      	muls	r1, r0
 8001a08:	468a      	mov	sl, r1
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	4660      	mov	r0, ip
 8001a0e:	0c09      	lsrs	r1, r1, #16
 8001a10:	4689      	mov	r9, r1
 8001a12:	4358      	muls	r0, r3
 8001a14:	437b      	muls	r3, r7
 8001a16:	4453      	add	r3, sl
 8001a18:	444b      	add	r3, r9
 8001a1a:	459a      	cmp	sl, r3
 8001a1c:	d903      	bls.n	8001a26 <__aeabi_dmul+0x286>
 8001a1e:	2180      	movs	r1, #128	@ 0x80
 8001a20:	0249      	lsls	r1, r1, #9
 8001a22:	4689      	mov	r9, r1
 8001a24:	4448      	add	r0, r9
 8001a26:	0c19      	lsrs	r1, r3, #16
 8001a28:	4689      	mov	r9, r1
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	0409      	lsls	r1, r1, #16
 8001a2e:	0c09      	lsrs	r1, r1, #16
 8001a30:	4688      	mov	r8, r1
 8001a32:	0039      	movs	r1, r7
 8001a34:	4361      	muls	r1, r4
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	4443      	add	r3, r8
 8001a3a:	4688      	mov	r8, r1
 8001a3c:	4661      	mov	r1, ip
 8001a3e:	434c      	muls	r4, r1
 8001a40:	4371      	muls	r1, r6
 8001a42:	468c      	mov	ip, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	4377      	muls	r7, r6
 8001a48:	0c0e      	lsrs	r6, r1, #16
 8001a4a:	193f      	adds	r7, r7, r4
 8001a4c:	19f6      	adds	r6, r6, r7
 8001a4e:	4448      	add	r0, r9
 8001a50:	42b4      	cmp	r4, r6
 8001a52:	d903      	bls.n	8001a5c <__aeabi_dmul+0x2bc>
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	0249      	lsls	r1, r1, #9
 8001a58:	4689      	mov	r9, r1
 8001a5a:	44cc      	add	ip, r9
 8001a5c:	9902      	ldr	r1, [sp, #8]
 8001a5e:	9f00      	ldr	r7, [sp, #0]
 8001a60:	4689      	mov	r9, r1
 8001a62:	0431      	lsls	r1, r6, #16
 8001a64:	444f      	add	r7, r9
 8001a66:	4689      	mov	r9, r1
 8001a68:	4641      	mov	r1, r8
 8001a6a:	4297      	cmp	r7, r2
 8001a6c:	4192      	sbcs	r2, r2
 8001a6e:	040c      	lsls	r4, r1, #16
 8001a70:	0c24      	lsrs	r4, r4, #16
 8001a72:	444c      	add	r4, r9
 8001a74:	18ff      	adds	r7, r7, r3
 8001a76:	4252      	negs	r2, r2
 8001a78:	1964      	adds	r4, r4, r5
 8001a7a:	18a1      	adds	r1, r4, r2
 8001a7c:	429f      	cmp	r7, r3
 8001a7e:	419b      	sbcs	r3, r3
 8001a80:	4688      	mov	r8, r1
 8001a82:	4682      	mov	sl, r0
 8001a84:	425b      	negs	r3, r3
 8001a86:	4699      	mov	r9, r3
 8001a88:	4590      	cmp	r8, r2
 8001a8a:	4192      	sbcs	r2, r2
 8001a8c:	42ac      	cmp	r4, r5
 8001a8e:	41a4      	sbcs	r4, r4
 8001a90:	44c2      	add	sl, r8
 8001a92:	44d1      	add	r9, sl
 8001a94:	4252      	negs	r2, r2
 8001a96:	4264      	negs	r4, r4
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4599      	cmp	r9, r3
 8001a9c:	419b      	sbcs	r3, r3
 8001a9e:	4582      	cmp	sl, r0
 8001aa0:	4192      	sbcs	r2, r2
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	4252      	negs	r2, r2
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	464a      	mov	r2, r9
 8001aaa:	0c36      	lsrs	r6, r6, #16
 8001aac:	19a4      	adds	r4, r4, r6
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	4463      	add	r3, ip
 8001ab2:	025b      	lsls	r3, r3, #9
 8001ab4:	0dd2      	lsrs	r2, r2, #23
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	9901      	ldr	r1, [sp, #4]
 8001aba:	4692      	mov	sl, r2
 8001abc:	027a      	lsls	r2, r7, #9
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	1e50      	subs	r0, r2, #1
 8001ac2:	4182      	sbcs	r2, r0
 8001ac4:	0dff      	lsrs	r7, r7, #23
 8001ac6:	4317      	orrs	r7, r2
 8001ac8:	464a      	mov	r2, r9
 8001aca:	0252      	lsls	r2, r2, #9
 8001acc:	4317      	orrs	r7, r2
 8001ace:	46b8      	mov	r8, r7
 8001ad0:	01db      	lsls	r3, r3, #7
 8001ad2:	d500      	bpl.n	8001ad6 <__aeabi_dmul+0x336>
 8001ad4:	e6ed      	b.n	80018b2 <__aeabi_dmul+0x112>
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <__aeabi_dmul+0x36c>)
 8001ad8:	9a03      	ldr	r2, [sp, #12]
 8001ada:	445b      	add	r3, fp
 8001adc:	4691      	mov	r9, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dc00      	bgt.n	8001ae4 <__aeabi_dmul+0x344>
 8001ae2:	e0ac      	b.n	8001c3e <__aeabi_dmul+0x49e>
 8001ae4:	003a      	movs	r2, r7
 8001ae6:	0752      	lsls	r2, r2, #29
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dmul+0x34c>
 8001aea:	e710      	b.n	800190e <__aeabi_dmul+0x16e>
 8001aec:	220f      	movs	r2, #15
 8001aee:	4658      	mov	r0, fp
 8001af0:	403a      	ands	r2, r7
 8001af2:	2a04      	cmp	r2, #4
 8001af4:	d000      	beq.n	8001af8 <__aeabi_dmul+0x358>
 8001af6:	e6f9      	b.n	80018ec <__aeabi_dmul+0x14c>
 8001af8:	e709      	b.n	800190e <__aeabi_dmul+0x16e>
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	000007ff 	.word	0x000007ff
 8001b00:	fffffc01 	.word	0xfffffc01
 8001b04:	feffffff 	.word	0xfeffffff
 8001b08:	000007fe 	.word	0x000007fe
 8001b0c:	000003ff 	.word	0x000003ff
 8001b10:	0022      	movs	r2, r4
 8001b12:	4332      	orrs	r2, r6
 8001b14:	d06f      	beq.n	8001bf6 <__aeabi_dmul+0x456>
 8001b16:	2c00      	cmp	r4, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dmul+0x37c>
 8001b1a:	e0c2      	b.n	8001ca2 <__aeabi_dmul+0x502>
 8001b1c:	0020      	movs	r0, r4
 8001b1e:	f000 fdd7 	bl	80026d0 <__clzsi2>
 8001b22:	0002      	movs	r2, r0
 8001b24:	0003      	movs	r3, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	201d      	movs	r0, #29
 8001b2a:	1a82      	subs	r2, r0, r2
 8001b2c:	0030      	movs	r0, r6
 8001b2e:	0019      	movs	r1, r3
 8001b30:	40d0      	lsrs	r0, r2
 8001b32:	3908      	subs	r1, #8
 8001b34:	408c      	lsls	r4, r1
 8001b36:	0002      	movs	r2, r0
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	0034      	movs	r4, r6
 8001b3c:	408c      	lsls	r4, r1
 8001b3e:	4659      	mov	r1, fp
 8001b40:	1acb      	subs	r3, r1, r3
 8001b42:	4986      	ldr	r1, [pc, #536]	@ (8001d5c <__aeabi_dmul+0x5bc>)
 8001b44:	468b      	mov	fp, r1
 8001b46:	449b      	add	fp, r3
 8001b48:	2d0a      	cmp	r5, #10
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dmul+0x3ae>
 8001b4c:	e6a4      	b.n	8001898 <__aeabi_dmul+0xf8>
 8001b4e:	4649      	mov	r1, r9
 8001b50:	9b00      	ldr	r3, [sp, #0]
 8001b52:	9401      	str	r4, [sp, #4]
 8001b54:	4059      	eors	r1, r3
 8001b56:	b2cb      	uxtb	r3, r1
 8001b58:	0014      	movs	r4, r2
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	9303      	str	r3, [sp, #12]
 8001b5e:	2d02      	cmp	r5, #2
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dmul+0x3c4>
 8001b62:	e667      	b.n	8001834 <__aeabi_dmul+0x94>
 8001b64:	e6fb      	b.n	800195e <__aeabi_dmul+0x1be>
 8001b66:	4653      	mov	r3, sl
 8001b68:	4303      	orrs	r3, r0
 8001b6a:	4698      	mov	r8, r3
 8001b6c:	d03c      	beq.n	8001be8 <__aeabi_dmul+0x448>
 8001b6e:	4653      	mov	r3, sl
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dmul+0x3d6>
 8001b74:	e0a3      	b.n	8001cbe <__aeabi_dmul+0x51e>
 8001b76:	4650      	mov	r0, sl
 8001b78:	f000 fdaa 	bl	80026d0 <__clzsi2>
 8001b7c:	230b      	movs	r3, #11
 8001b7e:	425b      	negs	r3, r3
 8001b80:	469c      	mov	ip, r3
 8001b82:	0002      	movs	r2, r0
 8001b84:	4484      	add	ip, r0
 8001b86:	0011      	movs	r1, r2
 8001b88:	4650      	mov	r0, sl
 8001b8a:	3908      	subs	r1, #8
 8001b8c:	4088      	lsls	r0, r1
 8001b8e:	231d      	movs	r3, #29
 8001b90:	4680      	mov	r8, r0
 8001b92:	4660      	mov	r0, ip
 8001b94:	1a1b      	subs	r3, r3, r0
 8001b96:	0020      	movs	r0, r4
 8001b98:	40d8      	lsrs	r0, r3
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	469a      	mov	sl, r3
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	4698      	mov	r8, r3
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d5c <__aeabi_dmul+0x5bc>)
 8001baa:	2500      	movs	r5, #0
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	469b      	mov	fp, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	e61a      	b.n	80017ec <__aeabi_dmul+0x4c>
 8001bb6:	2d0f      	cmp	r5, #15
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x41c>
 8001bba:	e0c9      	b.n	8001d50 <__aeabi_dmul+0x5b0>
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	421a      	tst	r2, r3
 8001bc4:	d002      	beq.n	8001bcc <__aeabi_dmul+0x42c>
 8001bc6:	421c      	tst	r4, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dmul+0x42c>
 8001bca:	e092      	b.n	8001cf2 <__aeabi_dmul+0x552>
 8001bcc:	2480      	movs	r4, #128	@ 0x80
 8001bce:	4653      	mov	r3, sl
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	431c      	orrs	r4, r3
 8001bd4:	0324      	lsls	r4, r4, #12
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e63e      	b.n	800185a <__aeabi_dmul+0xba>
 8001bdc:	469b      	mov	fp, r3
 8001bde:	2303      	movs	r3, #3
 8001be0:	4680      	mov	r8, r0
 8001be2:	250c      	movs	r5, #12
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	e601      	b.n	80017ec <__aeabi_dmul+0x4c>
 8001be8:	2300      	movs	r3, #0
 8001bea:	469a      	mov	sl, r3
 8001bec:	469b      	mov	fp, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	2504      	movs	r5, #4
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	e5fa      	b.n	80017ec <__aeabi_dmul+0x4c>
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430d      	orrs	r5, r1
 8001bfa:	2d0a      	cmp	r5, #10
 8001bfc:	dd00      	ble.n	8001c00 <__aeabi_dmul+0x460>
 8001bfe:	e64b      	b.n	8001898 <__aeabi_dmul+0xf8>
 8001c00:	4649      	mov	r1, r9
 8001c02:	9800      	ldr	r0, [sp, #0]
 8001c04:	4041      	eors	r1, r0
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	9103      	str	r1, [sp, #12]
 8001c0a:	2d02      	cmp	r5, #2
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dmul+0x470>
 8001c0e:	e096      	b.n	8001d3e <__aeabi_dmul+0x59e>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2400      	movs	r4, #0
 8001c14:	2001      	movs	r0, #1
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	e60c      	b.n	8001834 <__aeabi_dmul+0x94>
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9a00      	ldr	r2, [sp, #0]
 8001c20:	432b      	orrs	r3, r5
 8001c22:	4051      	eors	r1, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	9203      	str	r2, [sp, #12]
 8001c28:	2b0a      	cmp	r3, #10
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dmul+0x48e>
 8001c2c:	e634      	b.n	8001898 <__aeabi_dmul+0xf8>
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	d157      	bne.n	8001ce2 <__aeabi_dmul+0x542>
 8001c32:	9b03      	ldr	r3, [sp, #12]
 8001c34:	4699      	mov	r9, r3
 8001c36:	2400      	movs	r4, #0
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4b49      	ldr	r3, [pc, #292]	@ (8001d60 <__aeabi_dmul+0x5c0>)
 8001c3c:	e60e      	b.n	800185c <__aeabi_dmul+0xbc>
 8001c3e:	4658      	mov	r0, fp
 8001c40:	2101      	movs	r1, #1
 8001c42:	1ac9      	subs	r1, r1, r3
 8001c44:	2938      	cmp	r1, #56	@ 0x38
 8001c46:	dd00      	ble.n	8001c4a <__aeabi_dmul+0x4aa>
 8001c48:	e62f      	b.n	80018aa <__aeabi_dmul+0x10a>
 8001c4a:	291f      	cmp	r1, #31
 8001c4c:	dd56      	ble.n	8001cfc <__aeabi_dmul+0x55c>
 8001c4e:	221f      	movs	r2, #31
 8001c50:	4654      	mov	r4, sl
 8001c52:	4252      	negs	r2, r2
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	40dc      	lsrs	r4, r3
 8001c58:	2920      	cmp	r1, #32
 8001c5a:	d007      	beq.n	8001c6c <__aeabi_dmul+0x4cc>
 8001c5c:	4b41      	ldr	r3, [pc, #260]	@ (8001d64 <__aeabi_dmul+0x5c4>)
 8001c5e:	4642      	mov	r2, r8
 8001c60:	469c      	mov	ip, r3
 8001c62:	4653      	mov	r3, sl
 8001c64:	4460      	add	r0, ip
 8001c66:	4083      	lsls	r3, r0
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	2107      	movs	r1, #7
 8001c70:	1e53      	subs	r3, r2, #1
 8001c72:	419a      	sbcs	r2, r3
 8001c74:	000b      	movs	r3, r1
 8001c76:	4322      	orrs	r2, r4
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	4211      	tst	r1, r2
 8001c7e:	d009      	beq.n	8001c94 <__aeabi_dmul+0x4f4>
 8001c80:	230f      	movs	r3, #15
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d05d      	beq.n	8001d44 <__aeabi_dmul+0x5a4>
 8001c88:	1d11      	adds	r1, r2, #4
 8001c8a:	4291      	cmp	r1, r2
 8001c8c:	419b      	sbcs	r3, r3
 8001c8e:	000a      	movs	r2, r1
 8001c90:	425b      	negs	r3, r3
 8001c92:	075b      	lsls	r3, r3, #29
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	431a      	orrs	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e5df      	b.n	800185c <__aeabi_dmul+0xbc>
 8001c9c:	9b03      	ldr	r3, [sp, #12]
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	e5fa      	b.n	8001898 <__aeabi_dmul+0xf8>
 8001ca2:	9801      	ldr	r0, [sp, #4]
 8001ca4:	f000 fd14 	bl	80026d0 <__clzsi2>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	0003      	movs	r3, r0
 8001cac:	3215      	adds	r2, #21
 8001cae:	3320      	adds	r3, #32
 8001cb0:	2a1c      	cmp	r2, #28
 8001cb2:	dc00      	bgt.n	8001cb6 <__aeabi_dmul+0x516>
 8001cb4:	e738      	b.n	8001b28 <__aeabi_dmul+0x388>
 8001cb6:	9a01      	ldr	r2, [sp, #4]
 8001cb8:	3808      	subs	r0, #8
 8001cba:	4082      	lsls	r2, r0
 8001cbc:	e73f      	b.n	8001b3e <__aeabi_dmul+0x39e>
 8001cbe:	f000 fd07 	bl	80026d0 <__clzsi2>
 8001cc2:	2315      	movs	r3, #21
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4484      	add	ip, r0
 8001cc8:	0002      	movs	r2, r0
 8001cca:	4663      	mov	r3, ip
 8001ccc:	3220      	adds	r2, #32
 8001cce:	2b1c      	cmp	r3, #28
 8001cd0:	dc00      	bgt.n	8001cd4 <__aeabi_dmul+0x534>
 8001cd2:	e758      	b.n	8001b86 <__aeabi_dmul+0x3e6>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4698      	mov	r8, r3
 8001cd8:	0023      	movs	r3, r4
 8001cda:	3808      	subs	r0, #8
 8001cdc:	4083      	lsls	r3, r0
 8001cde:	469a      	mov	sl, r3
 8001ce0:	e762      	b.n	8001ba8 <__aeabi_dmul+0x408>
 8001ce2:	001d      	movs	r5, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2002      	movs	r0, #2
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	e5a2      	b.n	8001834 <__aeabi_dmul+0x94>
 8001cee:	9002      	str	r0, [sp, #8]
 8001cf0:	e632      	b.n	8001958 <__aeabi_dmul+0x1b8>
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	9a01      	ldr	r2, [sp, #4]
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	e5ae      	b.n	800185a <__aeabi_dmul+0xba>
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <__aeabi_dmul+0x5c8>)
 8001cfe:	4652      	mov	r2, sl
 8001d00:	18c3      	adds	r3, r0, r3
 8001d02:	4640      	mov	r0, r8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	40c8      	lsrs	r0, r1
 8001d08:	4302      	orrs	r2, r0
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4098      	lsls	r0, r3
 8001d0e:	0003      	movs	r3, r0
 8001d10:	1e58      	subs	r0, r3, #1
 8001d12:	4183      	sbcs	r3, r0
 8001d14:	4654      	mov	r4, sl
 8001d16:	431a      	orrs	r2, r3
 8001d18:	40cc      	lsrs	r4, r1
 8001d1a:	0753      	lsls	r3, r2, #29
 8001d1c:	d009      	beq.n	8001d32 <__aeabi_dmul+0x592>
 8001d1e:	230f      	movs	r3, #15
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d005      	beq.n	8001d32 <__aeabi_dmul+0x592>
 8001d26:	1d13      	adds	r3, r2, #4
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	4192      	sbcs	r2, r2
 8001d2c:	4252      	negs	r2, r2
 8001d2e:	18a4      	adds	r4, r4, r2
 8001d30:	001a      	movs	r2, r3
 8001d32:	0223      	lsls	r3, r4, #8
 8001d34:	d508      	bpl.n	8001d48 <__aeabi_dmul+0x5a8>
 8001d36:	2301      	movs	r3, #1
 8001d38:	2400      	movs	r4, #0
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	e58e      	b.n	800185c <__aeabi_dmul+0xbc>
 8001d3e:	4689      	mov	r9, r1
 8001d40:	2400      	movs	r4, #0
 8001d42:	e58b      	b.n	800185c <__aeabi_dmul+0xbc>
 8001d44:	2300      	movs	r3, #0
 8001d46:	e7a5      	b.n	8001c94 <__aeabi_dmul+0x4f4>
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	0264      	lsls	r4, r4, #9
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	e7a1      	b.n	8001c94 <__aeabi_dmul+0x4f4>
 8001d50:	9b00      	ldr	r3, [sp, #0]
 8001d52:	46a2      	mov	sl, r4
 8001d54:	4699      	mov	r9, r3
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	4698      	mov	r8, r3
 8001d5a:	e737      	b.n	8001bcc <__aeabi_dmul+0x42c>
 8001d5c:	fffffc0d 	.word	0xfffffc0d
 8001d60:	000007ff 	.word	0x000007ff
 8001d64:	0000043e 	.word	0x0000043e
 8001d68:	0000041e 	.word	0x0000041e

08001d6c <__aeabi_dsub>:
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	4657      	mov	r7, sl
 8001d70:	464e      	mov	r6, r9
 8001d72:	4645      	mov	r5, r8
 8001d74:	46de      	mov	lr, fp
 8001d76:	b5e0      	push	{r5, r6, r7, lr}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	9000      	str	r0, [sp, #0]
 8001d7c:	9101      	str	r1, [sp, #4]
 8001d7e:	030c      	lsls	r4, r1, #12
 8001d80:	004d      	lsls	r5, r1, #1
 8001d82:	0fce      	lsrs	r6, r1, #31
 8001d84:	0a61      	lsrs	r1, r4, #9
 8001d86:	9c00      	ldr	r4, [sp, #0]
 8001d88:	005f      	lsls	r7, r3, #1
 8001d8a:	0f64      	lsrs	r4, r4, #29
 8001d8c:	430c      	orrs	r4, r1
 8001d8e:	9900      	ldr	r1, [sp, #0]
 8001d90:	9200      	str	r2, [sp, #0]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	00c8      	lsls	r0, r1, #3
 8001d96:	0319      	lsls	r1, r3, #12
 8001d98:	0d7b      	lsrs	r3, r7, #21
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	9b01      	ldr	r3, [sp, #4]
 8001d9e:	4fcc      	ldr	r7, [pc, #816]	@ (80020d0 <__aeabi_dsub+0x364>)
 8001da0:	0fdb      	lsrs	r3, r3, #31
 8001da2:	469c      	mov	ip, r3
 8001da4:	0a4b      	lsrs	r3, r1, #9
 8001da6:	9900      	ldr	r1, [sp, #0]
 8001da8:	4680      	mov	r8, r0
 8001daa:	0f49      	lsrs	r1, r1, #29
 8001dac:	4319      	orrs	r1, r3
 8001dae:	9b00      	ldr	r3, [sp, #0]
 8001db0:	468b      	mov	fp, r1
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	4692      	mov	sl, r2
 8001db6:	0d6d      	lsrs	r5, r5, #21
 8001db8:	45b9      	cmp	r9, r7
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dsub+0x52>
 8001dbc:	e0bf      	b.n	8001f3e <__aeabi_dsub+0x1d2>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4661      	mov	r1, ip
 8001dc2:	4059      	eors	r1, r3
 8001dc4:	464b      	mov	r3, r9
 8001dc6:	468c      	mov	ip, r1
 8001dc8:	1aeb      	subs	r3, r5, r3
 8001dca:	428e      	cmp	r6, r1
 8001dcc:	d075      	beq.n	8001eba <__aeabi_dsub+0x14e>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dc00      	bgt.n	8001dd4 <__aeabi_dsub+0x68>
 8001dd2:	e2a3      	b.n	800231c <__aeabi_dsub+0x5b0>
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	2900      	cmp	r1, #0
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x70>
 8001dda:	e0ce      	b.n	8001f7a <__aeabi_dsub+0x20e>
 8001ddc:	42bd      	cmp	r5, r7
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x76>
 8001de0:	e200      	b.n	80021e4 <__aeabi_dsub+0x478>
 8001de2:	2701      	movs	r7, #1
 8001de4:	2b38      	cmp	r3, #56	@ 0x38
 8001de6:	dc19      	bgt.n	8001e1c <__aeabi_dsub+0xb0>
 8001de8:	2780      	movs	r7, #128	@ 0x80
 8001dea:	4659      	mov	r1, fp
 8001dec:	043f      	lsls	r7, r7, #16
 8001dee:	4339      	orrs	r1, r7
 8001df0:	468b      	mov	fp, r1
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_dsub+0x8c>
 8001df6:	e1fa      	b.n	80021ee <__aeabi_dsub+0x482>
 8001df8:	2720      	movs	r7, #32
 8001dfa:	1af9      	subs	r1, r7, r3
 8001dfc:	468c      	mov	ip, r1
 8001dfe:	4659      	mov	r1, fp
 8001e00:	4667      	mov	r7, ip
 8001e02:	40b9      	lsls	r1, r7
 8001e04:	000f      	movs	r7, r1
 8001e06:	0011      	movs	r1, r2
 8001e08:	40d9      	lsrs	r1, r3
 8001e0a:	430f      	orrs	r7, r1
 8001e0c:	4661      	mov	r1, ip
 8001e0e:	408a      	lsls	r2, r1
 8001e10:	1e51      	subs	r1, r2, #1
 8001e12:	418a      	sbcs	r2, r1
 8001e14:	4659      	mov	r1, fp
 8001e16:	40d9      	lsrs	r1, r3
 8001e18:	4317      	orrs	r7, r2
 8001e1a:	1a64      	subs	r4, r4, r1
 8001e1c:	1bc7      	subs	r7, r0, r7
 8001e1e:	42b8      	cmp	r0, r7
 8001e20:	4180      	sbcs	r0, r0
 8001e22:	4240      	negs	r0, r0
 8001e24:	1a24      	subs	r4, r4, r0
 8001e26:	0223      	lsls	r3, r4, #8
 8001e28:	d400      	bmi.n	8001e2c <__aeabi_dsub+0xc0>
 8001e2a:	e140      	b.n	80020ae <__aeabi_dsub+0x342>
 8001e2c:	0264      	lsls	r4, r4, #9
 8001e2e:	0a64      	lsrs	r4, r4, #9
 8001e30:	2c00      	cmp	r4, #0
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0xca>
 8001e34:	e154      	b.n	80020e0 <__aeabi_dsub+0x374>
 8001e36:	0020      	movs	r0, r4
 8001e38:	f000 fc4a 	bl	80026d0 <__clzsi2>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	3b08      	subs	r3, #8
 8001e40:	2120      	movs	r1, #32
 8001e42:	0038      	movs	r0, r7
 8001e44:	1aca      	subs	r2, r1, r3
 8001e46:	40d0      	lsrs	r0, r2
 8001e48:	409c      	lsls	r4, r3
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	409f      	lsls	r7, r3
 8001e4e:	4322      	orrs	r2, r4
 8001e50:	429d      	cmp	r5, r3
 8001e52:	dd00      	ble.n	8001e56 <__aeabi_dsub+0xea>
 8001e54:	e1a6      	b.n	80021a4 <__aeabi_dsub+0x438>
 8001e56:	1b58      	subs	r0, r3, r5
 8001e58:	3001      	adds	r0, #1
 8001e5a:	1a09      	subs	r1, r1, r0
 8001e5c:	003c      	movs	r4, r7
 8001e5e:	408f      	lsls	r7, r1
 8001e60:	40c4      	lsrs	r4, r0
 8001e62:	1e7b      	subs	r3, r7, #1
 8001e64:	419f      	sbcs	r7, r3
 8001e66:	0013      	movs	r3, r2
 8001e68:	408b      	lsls	r3, r1
 8001e6a:	4327      	orrs	r7, r4
 8001e6c:	431f      	orrs	r7, r3
 8001e6e:	40c2      	lsrs	r2, r0
 8001e70:	003b      	movs	r3, r7
 8001e72:	0014      	movs	r4, r2
 8001e74:	2500      	movs	r5, #0
 8001e76:	4313      	orrs	r3, r2
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x110>
 8001e7a:	e1f7      	b.n	800226c <__aeabi_dsub+0x500>
 8001e7c:	077b      	lsls	r3, r7, #29
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x116>
 8001e80:	e377      	b.n	8002572 <__aeabi_dsub+0x806>
 8001e82:	230f      	movs	r3, #15
 8001e84:	0038      	movs	r0, r7
 8001e86:	403b      	ands	r3, r7
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d004      	beq.n	8001e96 <__aeabi_dsub+0x12a>
 8001e8c:	1d38      	adds	r0, r7, #4
 8001e8e:	42b8      	cmp	r0, r7
 8001e90:	41bf      	sbcs	r7, r7
 8001e92:	427f      	negs	r7, r7
 8001e94:	19e4      	adds	r4, r4, r7
 8001e96:	0223      	lsls	r3, r4, #8
 8001e98:	d400      	bmi.n	8001e9c <__aeabi_dsub+0x130>
 8001e9a:	e368      	b.n	800256e <__aeabi_dsub+0x802>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80020d0 <__aeabi_dsub+0x364>)
 8001e9e:	3501      	adds	r5, #1
 8001ea0:	429d      	cmp	r5, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x13a>
 8001ea4:	e0f4      	b.n	8002090 <__aeabi_dsub+0x324>
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80020d4 <__aeabi_dsub+0x368>)
 8001ea8:	056d      	lsls	r5, r5, #21
 8001eaa:	401c      	ands	r4, r3
 8001eac:	0d6d      	lsrs	r5, r5, #21
 8001eae:	0767      	lsls	r7, r4, #29
 8001eb0:	08c0      	lsrs	r0, r0, #3
 8001eb2:	0264      	lsls	r4, r4, #9
 8001eb4:	4307      	orrs	r7, r0
 8001eb6:	0b24      	lsrs	r4, r4, #12
 8001eb8:	e0ec      	b.n	8002094 <__aeabi_dsub+0x328>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dc00      	bgt.n	8001ec0 <__aeabi_dsub+0x154>
 8001ebe:	e329      	b.n	8002514 <__aeabi_dsub+0x7a8>
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d000      	beq.n	8001ec8 <__aeabi_dsub+0x15c>
 8001ec6:	e0d6      	b.n	8002076 <__aeabi_dsub+0x30a>
 8001ec8:	4659      	mov	r1, fp
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x164>
 8001ece:	e12e      	b.n	800212e <__aeabi_dsub+0x3c2>
 8001ed0:	1e59      	subs	r1, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x16c>
 8001ed6:	e1e6      	b.n	80022a6 <__aeabi_dsub+0x53a>
 8001ed8:	42bb      	cmp	r3, r7
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x172>
 8001edc:	e182      	b.n	80021e4 <__aeabi_dsub+0x478>
 8001ede:	2701      	movs	r7, #1
 8001ee0:	000b      	movs	r3, r1
 8001ee2:	2938      	cmp	r1, #56	@ 0x38
 8001ee4:	dc14      	bgt.n	8001f10 <__aeabi_dsub+0x1a4>
 8001ee6:	2b1f      	cmp	r3, #31
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x180>
 8001eea:	e23c      	b.n	8002366 <__aeabi_dsub+0x5fa>
 8001eec:	2720      	movs	r7, #32
 8001eee:	1af9      	subs	r1, r7, r3
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	4659      	mov	r1, fp
 8001ef4:	4667      	mov	r7, ip
 8001ef6:	40b9      	lsls	r1, r7
 8001ef8:	000f      	movs	r7, r1
 8001efa:	0011      	movs	r1, r2
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	430f      	orrs	r7, r1
 8001f00:	4661      	mov	r1, ip
 8001f02:	408a      	lsls	r2, r1
 8001f04:	1e51      	subs	r1, r2, #1
 8001f06:	418a      	sbcs	r2, r1
 8001f08:	4659      	mov	r1, fp
 8001f0a:	40d9      	lsrs	r1, r3
 8001f0c:	4317      	orrs	r7, r2
 8001f0e:	1864      	adds	r4, r4, r1
 8001f10:	183f      	adds	r7, r7, r0
 8001f12:	4287      	cmp	r7, r0
 8001f14:	4180      	sbcs	r0, r0
 8001f16:	4240      	negs	r0, r0
 8001f18:	1824      	adds	r4, r4, r0
 8001f1a:	0223      	lsls	r3, r4, #8
 8001f1c:	d400      	bmi.n	8001f20 <__aeabi_dsub+0x1b4>
 8001f1e:	e0c6      	b.n	80020ae <__aeabi_dsub+0x342>
 8001f20:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <__aeabi_dsub+0x364>)
 8001f22:	3501      	adds	r5, #1
 8001f24:	429d      	cmp	r5, r3
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x1be>
 8001f28:	e0b2      	b.n	8002090 <__aeabi_dsub+0x324>
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4b69      	ldr	r3, [pc, #420]	@ (80020d4 <__aeabi_dsub+0x368>)
 8001f2e:	087a      	lsrs	r2, r7, #1
 8001f30:	401c      	ands	r4, r3
 8001f32:	4039      	ands	r1, r7
 8001f34:	430a      	orrs	r2, r1
 8001f36:	07e7      	lsls	r7, r4, #31
 8001f38:	4317      	orrs	r7, r2
 8001f3a:	0864      	lsrs	r4, r4, #1
 8001f3c:	e79e      	b.n	8001e7c <__aeabi_dsub+0x110>
 8001f3e:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <__aeabi_dsub+0x36c>)
 8001f40:	4311      	orrs	r1, r2
 8001f42:	468a      	mov	sl, r1
 8001f44:	18eb      	adds	r3, r5, r3
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d028      	beq.n	8001f9c <__aeabi_dsub+0x230>
 8001f4a:	4566      	cmp	r6, ip
 8001f4c:	d02c      	beq.n	8001fa8 <__aeabi_dsub+0x23c>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d05b      	beq.n	800200a <__aeabi_dsub+0x29e>
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x1ec>
 8001f56:	e12c      	b.n	80021b2 <__aeabi_dsub+0x446>
 8001f58:	465b      	mov	r3, fp
 8001f5a:	4666      	mov	r6, ip
 8001f5c:	075f      	lsls	r7, r3, #29
 8001f5e:	08d2      	lsrs	r2, r2, #3
 8001f60:	4317      	orrs	r7, r2
 8001f62:	08dd      	lsrs	r5, r3, #3
 8001f64:	003b      	movs	r3, r7
 8001f66:	432b      	orrs	r3, r5
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x200>
 8001f6a:	e0e2      	b.n	8002132 <__aeabi_dsub+0x3c6>
 8001f6c:	2480      	movs	r4, #128	@ 0x80
 8001f6e:	0324      	lsls	r4, r4, #12
 8001f70:	432c      	orrs	r4, r5
 8001f72:	0324      	lsls	r4, r4, #12
 8001f74:	4d56      	ldr	r5, [pc, #344]	@ (80020d0 <__aeabi_dsub+0x364>)
 8001f76:	0b24      	lsrs	r4, r4, #12
 8001f78:	e08c      	b.n	8002094 <__aeabi_dsub+0x328>
 8001f7a:	4659      	mov	r1, fp
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x216>
 8001f80:	e0d5      	b.n	800212e <__aeabi_dsub+0x3c2>
 8001f82:	1e59      	subs	r1, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x21e>
 8001f88:	e1b9      	b.n	80022fe <__aeabi_dsub+0x592>
 8001f8a:	42bb      	cmp	r3, r7
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x224>
 8001f8e:	e1b1      	b.n	80022f4 <__aeabi_dsub+0x588>
 8001f90:	2701      	movs	r7, #1
 8001f92:	000b      	movs	r3, r1
 8001f94:	2938      	cmp	r1, #56	@ 0x38
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dsub+0x22e>
 8001f98:	e740      	b.n	8001e1c <__aeabi_dsub+0xb0>
 8001f9a:	e72a      	b.n	8001df2 <__aeabi_dsub+0x86>
 8001f9c:	4661      	mov	r1, ip
 8001f9e:	2701      	movs	r7, #1
 8001fa0:	4079      	eors	r1, r7
 8001fa2:	468c      	mov	ip, r1
 8001fa4:	4566      	cmp	r6, ip
 8001fa6:	d1d2      	bne.n	8001f4e <__aeabi_dsub+0x1e2>
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x242>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x3ce>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dsub+0x248>
 8001fb2:	e155      	b.n	8002260 <__aeabi_dsub+0x4f4>
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	0025      	movs	r5, r4
 8001fb8:	4305      	orrs	r5, r0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x252>
 8001fbc:	e212      	b.n	80023e4 <__aeabi_dsub+0x678>
 8001fbe:	1e59      	subs	r1, r3, #1
 8001fc0:	468c      	mov	ip, r1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x25c>
 8001fc6:	e249      	b.n	800245c <__aeabi_dsub+0x6f0>
 8001fc8:	4d41      	ldr	r5, [pc, #260]	@ (80020d0 <__aeabi_dsub+0x364>)
 8001fca:	42ab      	cmp	r3, r5
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x264>
 8001fce:	e28f      	b.n	80024f0 <__aeabi_dsub+0x784>
 8001fd0:	2701      	movs	r7, #1
 8001fd2:	2938      	cmp	r1, #56	@ 0x38
 8001fd4:	dc11      	bgt.n	8001ffa <__aeabi_dsub+0x28e>
 8001fd6:	4663      	mov	r3, ip
 8001fd8:	2b1f      	cmp	r3, #31
 8001fda:	dd00      	ble.n	8001fde <__aeabi_dsub+0x272>
 8001fdc:	e25b      	b.n	8002496 <__aeabi_dsub+0x72a>
 8001fde:	4661      	mov	r1, ip
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	0027      	movs	r7, r4
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	4098      	lsls	r0, r3
 8001fea:	409f      	lsls	r7, r3
 8001fec:	40cd      	lsrs	r5, r1
 8001fee:	1e43      	subs	r3, r0, #1
 8001ff0:	4198      	sbcs	r0, r3
 8001ff2:	40cc      	lsrs	r4, r1
 8001ff4:	432f      	orrs	r7, r5
 8001ff6:	4307      	orrs	r7, r0
 8001ff8:	44a3      	add	fp, r4
 8001ffa:	18bf      	adds	r7, r7, r2
 8001ffc:	4297      	cmp	r7, r2
 8001ffe:	4192      	sbcs	r2, r2
 8002000:	4252      	negs	r2, r2
 8002002:	445a      	add	r2, fp
 8002004:	0014      	movs	r4, r2
 8002006:	464d      	mov	r5, r9
 8002008:	e787      	b.n	8001f1a <__aeabi_dsub+0x1ae>
 800200a:	4f34      	ldr	r7, [pc, #208]	@ (80020dc <__aeabi_dsub+0x370>)
 800200c:	1c6b      	adds	r3, r5, #1
 800200e:	423b      	tst	r3, r7
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x2a8>
 8002012:	e0b6      	b.n	8002182 <__aeabi_dsub+0x416>
 8002014:	4659      	mov	r1, fp
 8002016:	0023      	movs	r3, r4
 8002018:	4311      	orrs	r1, r2
 800201a:	000f      	movs	r7, r1
 800201c:	4303      	orrs	r3, r0
 800201e:	2d00      	cmp	r5, #0
 8002020:	d000      	beq.n	8002024 <__aeabi_dsub+0x2b8>
 8002022:	e126      	b.n	8002272 <__aeabi_dsub+0x506>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x2be>
 8002028:	e1c0      	b.n	80023ac <__aeabi_dsub+0x640>
 800202a:	2900      	cmp	r1, #0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x2c4>
 800202e:	e0a1      	b.n	8002174 <__aeabi_dsub+0x408>
 8002030:	1a83      	subs	r3, r0, r2
 8002032:	4698      	mov	r8, r3
 8002034:	465b      	mov	r3, fp
 8002036:	4540      	cmp	r0, r8
 8002038:	41ad      	sbcs	r5, r5
 800203a:	1ae3      	subs	r3, r4, r3
 800203c:	426d      	negs	r5, r5
 800203e:	1b5b      	subs	r3, r3, r5
 8002040:	2580      	movs	r5, #128	@ 0x80
 8002042:	042d      	lsls	r5, r5, #16
 8002044:	422b      	tst	r3, r5
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x2de>
 8002048:	e14b      	b.n	80022e2 <__aeabi_dsub+0x576>
 800204a:	465b      	mov	r3, fp
 800204c:	1a10      	subs	r0, r2, r0
 800204e:	4282      	cmp	r2, r0
 8002050:	4192      	sbcs	r2, r2
 8002052:	1b1c      	subs	r4, r3, r4
 8002054:	0007      	movs	r7, r0
 8002056:	2601      	movs	r6, #1
 8002058:	4663      	mov	r3, ip
 800205a:	4252      	negs	r2, r2
 800205c:	1aa4      	subs	r4, r4, r2
 800205e:	4327      	orrs	r7, r4
 8002060:	401e      	ands	r6, r3
 8002062:	2f00      	cmp	r7, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x2fc>
 8002066:	e142      	b.n	80022ee <__aeabi_dsub+0x582>
 8002068:	422c      	tst	r4, r5
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x302>
 800206c:	e26d      	b.n	800254a <__aeabi_dsub+0x7de>
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <__aeabi_dsub+0x368>)
 8002070:	2501      	movs	r5, #1
 8002072:	401c      	ands	r4, r3
 8002074:	e71b      	b.n	8001eae <__aeabi_dsub+0x142>
 8002076:	42bd      	cmp	r5, r7
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x310>
 800207a:	e13b      	b.n	80022f4 <__aeabi_dsub+0x588>
 800207c:	2701      	movs	r7, #1
 800207e:	2b38      	cmp	r3, #56	@ 0x38
 8002080:	dd00      	ble.n	8002084 <__aeabi_dsub+0x318>
 8002082:	e745      	b.n	8001f10 <__aeabi_dsub+0x1a4>
 8002084:	2780      	movs	r7, #128	@ 0x80
 8002086:	4659      	mov	r1, fp
 8002088:	043f      	lsls	r7, r7, #16
 800208a:	4339      	orrs	r1, r7
 800208c:	468b      	mov	fp, r1
 800208e:	e72a      	b.n	8001ee6 <__aeabi_dsub+0x17a>
 8002090:	2400      	movs	r4, #0
 8002092:	2700      	movs	r7, #0
 8002094:	052d      	lsls	r5, r5, #20
 8002096:	4325      	orrs	r5, r4
 8002098:	07f6      	lsls	r6, r6, #31
 800209a:	4335      	orrs	r5, r6
 800209c:	0038      	movs	r0, r7
 800209e:	0029      	movs	r1, r5
 80020a0:	b003      	add	sp, #12
 80020a2:	bcf0      	pop	{r4, r5, r6, r7}
 80020a4:	46bb      	mov	fp, r7
 80020a6:	46b2      	mov	sl, r6
 80020a8:	46a9      	mov	r9, r5
 80020aa:	46a0      	mov	r8, r4
 80020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ae:	077b      	lsls	r3, r7, #29
 80020b0:	d004      	beq.n	80020bc <__aeabi_dsub+0x350>
 80020b2:	230f      	movs	r3, #15
 80020b4:	403b      	ands	r3, r7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d000      	beq.n	80020bc <__aeabi_dsub+0x350>
 80020ba:	e6e7      	b.n	8001e8c <__aeabi_dsub+0x120>
 80020bc:	002b      	movs	r3, r5
 80020be:	08f8      	lsrs	r0, r7, #3
 80020c0:	4a03      	ldr	r2, [pc, #12]	@ (80020d0 <__aeabi_dsub+0x364>)
 80020c2:	0767      	lsls	r7, r4, #29
 80020c4:	4307      	orrs	r7, r0
 80020c6:	08e5      	lsrs	r5, r4, #3
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x362>
 80020cc:	e74a      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80020ce:	e0a5      	b.n	800221c <__aeabi_dsub+0x4b0>
 80020d0:	000007ff 	.word	0x000007ff
 80020d4:	ff7fffff 	.word	0xff7fffff
 80020d8:	fffff801 	.word	0xfffff801
 80020dc:	000007fe 	.word	0x000007fe
 80020e0:	0038      	movs	r0, r7
 80020e2:	f000 faf5 	bl	80026d0 <__clzsi2>
 80020e6:	0003      	movs	r3, r0
 80020e8:	3318      	adds	r3, #24
 80020ea:	2b1f      	cmp	r3, #31
 80020ec:	dc00      	bgt.n	80020f0 <__aeabi_dsub+0x384>
 80020ee:	e6a7      	b.n	8001e40 <__aeabi_dsub+0xd4>
 80020f0:	003a      	movs	r2, r7
 80020f2:	3808      	subs	r0, #8
 80020f4:	4082      	lsls	r2, r0
 80020f6:	429d      	cmp	r5, r3
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dsub+0x390>
 80020fa:	e08a      	b.n	8002212 <__aeabi_dsub+0x4a6>
 80020fc:	1b5b      	subs	r3, r3, r5
 80020fe:	1c58      	adds	r0, r3, #1
 8002100:	281f      	cmp	r0, #31
 8002102:	dc00      	bgt.n	8002106 <__aeabi_dsub+0x39a>
 8002104:	e1d8      	b.n	80024b8 <__aeabi_dsub+0x74c>
 8002106:	0017      	movs	r7, r2
 8002108:	3b1f      	subs	r3, #31
 800210a:	40df      	lsrs	r7, r3
 800210c:	2820      	cmp	r0, #32
 800210e:	d005      	beq.n	800211c <__aeabi_dsub+0x3b0>
 8002110:	2340      	movs	r3, #64	@ 0x40
 8002112:	1a1b      	subs	r3, r3, r0
 8002114:	409a      	lsls	r2, r3
 8002116:	1e53      	subs	r3, r2, #1
 8002118:	419a      	sbcs	r2, r3
 800211a:	4317      	orrs	r7, r2
 800211c:	2500      	movs	r5, #0
 800211e:	2f00      	cmp	r7, #0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x3b8>
 8002122:	e0e5      	b.n	80022f0 <__aeabi_dsub+0x584>
 8002124:	077b      	lsls	r3, r7, #29
 8002126:	d000      	beq.n	800212a <__aeabi_dsub+0x3be>
 8002128:	e6ab      	b.n	8001e82 <__aeabi_dsub+0x116>
 800212a:	002c      	movs	r4, r5
 800212c:	e7c6      	b.n	80020bc <__aeabi_dsub+0x350>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	e7c6      	b.n	80020c0 <__aeabi_dsub+0x354>
 8002132:	2700      	movs	r7, #0
 8002134:	2400      	movs	r4, #0
 8002136:	4dd1      	ldr	r5, [pc, #836]	@ (800247c <__aeabi_dsub+0x710>)
 8002138:	e7ac      	b.n	8002094 <__aeabi_dsub+0x328>
 800213a:	4fd1      	ldr	r7, [pc, #836]	@ (8002480 <__aeabi_dsub+0x714>)
 800213c:	1c6b      	adds	r3, r5, #1
 800213e:	423b      	tst	r3, r7
 8002140:	d171      	bne.n	8002226 <__aeabi_dsub+0x4ba>
 8002142:	0023      	movs	r3, r4
 8002144:	4303      	orrs	r3, r0
 8002146:	2d00      	cmp	r5, #0
 8002148:	d000      	beq.n	800214c <__aeabi_dsub+0x3e0>
 800214a:	e14e      	b.n	80023ea <__aeabi_dsub+0x67e>
 800214c:	4657      	mov	r7, sl
 800214e:	2b00      	cmp	r3, #0
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x3e8>
 8002152:	e1b5      	b.n	80024c0 <__aeabi_dsub+0x754>
 8002154:	2f00      	cmp	r7, #0
 8002156:	d00d      	beq.n	8002174 <__aeabi_dsub+0x408>
 8002158:	1883      	adds	r3, r0, r2
 800215a:	4283      	cmp	r3, r0
 800215c:	4180      	sbcs	r0, r0
 800215e:	445c      	add	r4, fp
 8002160:	4240      	negs	r0, r0
 8002162:	1824      	adds	r4, r4, r0
 8002164:	0222      	lsls	r2, r4, #8
 8002166:	d500      	bpl.n	800216a <__aeabi_dsub+0x3fe>
 8002168:	e1c8      	b.n	80024fc <__aeabi_dsub+0x790>
 800216a:	001f      	movs	r7, r3
 800216c:	4698      	mov	r8, r3
 800216e:	4327      	orrs	r7, r4
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x408>
 8002172:	e0bc      	b.n	80022ee <__aeabi_dsub+0x582>
 8002174:	4643      	mov	r3, r8
 8002176:	0767      	lsls	r7, r4, #29
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	431f      	orrs	r7, r3
 800217c:	08e5      	lsrs	r5, r4, #3
 800217e:	2300      	movs	r3, #0
 8002180:	e04c      	b.n	800221c <__aeabi_dsub+0x4b0>
 8002182:	1a83      	subs	r3, r0, r2
 8002184:	4698      	mov	r8, r3
 8002186:	465b      	mov	r3, fp
 8002188:	4540      	cmp	r0, r8
 800218a:	41bf      	sbcs	r7, r7
 800218c:	1ae3      	subs	r3, r4, r3
 800218e:	427f      	negs	r7, r7
 8002190:	1bdb      	subs	r3, r3, r7
 8002192:	021f      	lsls	r7, r3, #8
 8002194:	d47c      	bmi.n	8002290 <__aeabi_dsub+0x524>
 8002196:	4647      	mov	r7, r8
 8002198:	431f      	orrs	r7, r3
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x432>
 800219c:	e0a6      	b.n	80022ec <__aeabi_dsub+0x580>
 800219e:	001c      	movs	r4, r3
 80021a0:	4647      	mov	r7, r8
 80021a2:	e645      	b.n	8001e30 <__aeabi_dsub+0xc4>
 80021a4:	4cb7      	ldr	r4, [pc, #732]	@ (8002484 <__aeabi_dsub+0x718>)
 80021a6:	1aed      	subs	r5, r5, r3
 80021a8:	4014      	ands	r4, r2
 80021aa:	077b      	lsls	r3, r7, #29
 80021ac:	d000      	beq.n	80021b0 <__aeabi_dsub+0x444>
 80021ae:	e780      	b.n	80020b2 <__aeabi_dsub+0x346>
 80021b0:	e784      	b.n	80020bc <__aeabi_dsub+0x350>
 80021b2:	464b      	mov	r3, r9
 80021b4:	0025      	movs	r5, r4
 80021b6:	4305      	orrs	r5, r0
 80021b8:	d066      	beq.n	8002288 <__aeabi_dsub+0x51c>
 80021ba:	1e5f      	subs	r7, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x456>
 80021c0:	e0fc      	b.n	80023bc <__aeabi_dsub+0x650>
 80021c2:	4dae      	ldr	r5, [pc, #696]	@ (800247c <__aeabi_dsub+0x710>)
 80021c4:	42ab      	cmp	r3, r5
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x45e>
 80021c8:	e15e      	b.n	8002488 <__aeabi_dsub+0x71c>
 80021ca:	4666      	mov	r6, ip
 80021cc:	2f38      	cmp	r7, #56	@ 0x38
 80021ce:	dc00      	bgt.n	80021d2 <__aeabi_dsub+0x466>
 80021d0:	e0b4      	b.n	800233c <__aeabi_dsub+0x5d0>
 80021d2:	2001      	movs	r0, #1
 80021d4:	1a17      	subs	r7, r2, r0
 80021d6:	42ba      	cmp	r2, r7
 80021d8:	4192      	sbcs	r2, r2
 80021da:	465b      	mov	r3, fp
 80021dc:	4252      	negs	r2, r2
 80021de:	464d      	mov	r5, r9
 80021e0:	1a9c      	subs	r4, r3, r2
 80021e2:	e620      	b.n	8001e26 <__aeabi_dsub+0xba>
 80021e4:	0767      	lsls	r7, r4, #29
 80021e6:	08c0      	lsrs	r0, r0, #3
 80021e8:	4307      	orrs	r7, r0
 80021ea:	08e5      	lsrs	r5, r4, #3
 80021ec:	e6ba      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80021ee:	001f      	movs	r7, r3
 80021f0:	4659      	mov	r1, fp
 80021f2:	3f20      	subs	r7, #32
 80021f4:	40f9      	lsrs	r1, r7
 80021f6:	000f      	movs	r7, r1
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d005      	beq.n	8002208 <__aeabi_dsub+0x49c>
 80021fc:	2140      	movs	r1, #64	@ 0x40
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	4659      	mov	r1, fp
 8002202:	4099      	lsls	r1, r3
 8002204:	430a      	orrs	r2, r1
 8002206:	4692      	mov	sl, r2
 8002208:	4653      	mov	r3, sl
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	4193      	sbcs	r3, r2
 800220e:	431f      	orrs	r7, r3
 8002210:	e604      	b.n	8001e1c <__aeabi_dsub+0xb0>
 8002212:	1aeb      	subs	r3, r5, r3
 8002214:	4d9b      	ldr	r5, [pc, #620]	@ (8002484 <__aeabi_dsub+0x718>)
 8002216:	4015      	ands	r5, r2
 8002218:	076f      	lsls	r7, r5, #29
 800221a:	08ed      	lsrs	r5, r5, #3
 800221c:	032c      	lsls	r4, r5, #12
 800221e:	055d      	lsls	r5, r3, #21
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	0d6d      	lsrs	r5, r5, #21
 8002224:	e736      	b.n	8002094 <__aeabi_dsub+0x328>
 8002226:	4d95      	ldr	r5, [pc, #596]	@ (800247c <__aeabi_dsub+0x710>)
 8002228:	42ab      	cmp	r3, r5
 800222a:	d100      	bne.n	800222e <__aeabi_dsub+0x4c2>
 800222c:	e0d6      	b.n	80023dc <__aeabi_dsub+0x670>
 800222e:	1882      	adds	r2, r0, r2
 8002230:	0021      	movs	r1, r4
 8002232:	4282      	cmp	r2, r0
 8002234:	4180      	sbcs	r0, r0
 8002236:	4459      	add	r1, fp
 8002238:	4240      	negs	r0, r0
 800223a:	1808      	adds	r0, r1, r0
 800223c:	07c7      	lsls	r7, r0, #31
 800223e:	0852      	lsrs	r2, r2, #1
 8002240:	4317      	orrs	r7, r2
 8002242:	0844      	lsrs	r4, r0, #1
 8002244:	0752      	lsls	r2, r2, #29
 8002246:	d400      	bmi.n	800224a <__aeabi_dsub+0x4de>
 8002248:	e185      	b.n	8002556 <__aeabi_dsub+0x7ea>
 800224a:	220f      	movs	r2, #15
 800224c:	001d      	movs	r5, r3
 800224e:	403a      	ands	r2, r7
 8002250:	2a04      	cmp	r2, #4
 8002252:	d000      	beq.n	8002256 <__aeabi_dsub+0x4ea>
 8002254:	e61a      	b.n	8001e8c <__aeabi_dsub+0x120>
 8002256:	08ff      	lsrs	r7, r7, #3
 8002258:	0764      	lsls	r4, r4, #29
 800225a:	4327      	orrs	r7, r4
 800225c:	0905      	lsrs	r5, r0, #4
 800225e:	e7dd      	b.n	800221c <__aeabi_dsub+0x4b0>
 8002260:	465b      	mov	r3, fp
 8002262:	08d2      	lsrs	r2, r2, #3
 8002264:	075f      	lsls	r7, r3, #29
 8002266:	4317      	orrs	r7, r2
 8002268:	08dd      	lsrs	r5, r3, #3
 800226a:	e67b      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 800226c:	2700      	movs	r7, #0
 800226e:	2400      	movs	r4, #0
 8002270:	e710      	b.n	8002094 <__aeabi_dsub+0x328>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d000      	beq.n	8002278 <__aeabi_dsub+0x50c>
 8002276:	e0d6      	b.n	8002426 <__aeabi_dsub+0x6ba>
 8002278:	2900      	cmp	r1, #0
 800227a:	d000      	beq.n	800227e <__aeabi_dsub+0x512>
 800227c:	e12f      	b.n	80024de <__aeabi_dsub+0x772>
 800227e:	2480      	movs	r4, #128	@ 0x80
 8002280:	2600      	movs	r6, #0
 8002282:	4d7e      	ldr	r5, [pc, #504]	@ (800247c <__aeabi_dsub+0x710>)
 8002284:	0324      	lsls	r4, r4, #12
 8002286:	e705      	b.n	8002094 <__aeabi_dsub+0x328>
 8002288:	4666      	mov	r6, ip
 800228a:	465c      	mov	r4, fp
 800228c:	08d0      	lsrs	r0, r2, #3
 800228e:	e717      	b.n	80020c0 <__aeabi_dsub+0x354>
 8002290:	465b      	mov	r3, fp
 8002292:	1a17      	subs	r7, r2, r0
 8002294:	42ba      	cmp	r2, r7
 8002296:	4192      	sbcs	r2, r2
 8002298:	1b1c      	subs	r4, r3, r4
 800229a:	2601      	movs	r6, #1
 800229c:	4663      	mov	r3, ip
 800229e:	4252      	negs	r2, r2
 80022a0:	1aa4      	subs	r4, r4, r2
 80022a2:	401e      	ands	r6, r3
 80022a4:	e5c4      	b.n	8001e30 <__aeabi_dsub+0xc4>
 80022a6:	1883      	adds	r3, r0, r2
 80022a8:	4283      	cmp	r3, r0
 80022aa:	4180      	sbcs	r0, r0
 80022ac:	445c      	add	r4, fp
 80022ae:	4240      	negs	r0, r0
 80022b0:	1825      	adds	r5, r4, r0
 80022b2:	022a      	lsls	r2, r5, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x54c>
 80022b6:	e0da      	b.n	800246e <__aeabi_dsub+0x702>
 80022b8:	4a72      	ldr	r2, [pc, #456]	@ (8002484 <__aeabi_dsub+0x718>)
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	4015      	ands	r5, r2
 80022be:	07ea      	lsls	r2, r5, #31
 80022c0:	431a      	orrs	r2, r3
 80022c2:	0869      	lsrs	r1, r5, #1
 80022c4:	075b      	lsls	r3, r3, #29
 80022c6:	d400      	bmi.n	80022ca <__aeabi_dsub+0x55e>
 80022c8:	e14a      	b.n	8002560 <__aeabi_dsub+0x7f4>
 80022ca:	230f      	movs	r3, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x568>
 80022d2:	e0fc      	b.n	80024ce <__aeabi_dsub+0x762>
 80022d4:	1d17      	adds	r7, r2, #4
 80022d6:	4297      	cmp	r7, r2
 80022d8:	41a4      	sbcs	r4, r4
 80022da:	4264      	negs	r4, r4
 80022dc:	2502      	movs	r5, #2
 80022de:	1864      	adds	r4, r4, r1
 80022e0:	e6ec      	b.n	80020bc <__aeabi_dsub+0x350>
 80022e2:	4647      	mov	r7, r8
 80022e4:	001c      	movs	r4, r3
 80022e6:	431f      	orrs	r7, r3
 80022e8:	d000      	beq.n	80022ec <__aeabi_dsub+0x580>
 80022ea:	e743      	b.n	8002174 <__aeabi_dsub+0x408>
 80022ec:	2600      	movs	r6, #0
 80022ee:	2500      	movs	r5, #0
 80022f0:	2400      	movs	r4, #0
 80022f2:	e6cf      	b.n	8002094 <__aeabi_dsub+0x328>
 80022f4:	08c0      	lsrs	r0, r0, #3
 80022f6:	0767      	lsls	r7, r4, #29
 80022f8:	4307      	orrs	r7, r0
 80022fa:	08e5      	lsrs	r5, r4, #3
 80022fc:	e632      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80022fe:	1a87      	subs	r7, r0, r2
 8002300:	465b      	mov	r3, fp
 8002302:	42b8      	cmp	r0, r7
 8002304:	4180      	sbcs	r0, r0
 8002306:	1ae4      	subs	r4, r4, r3
 8002308:	4240      	negs	r0, r0
 800230a:	1a24      	subs	r4, r4, r0
 800230c:	0223      	lsls	r3, r4, #8
 800230e:	d428      	bmi.n	8002362 <__aeabi_dsub+0x5f6>
 8002310:	0763      	lsls	r3, r4, #29
 8002312:	08ff      	lsrs	r7, r7, #3
 8002314:	431f      	orrs	r7, r3
 8002316:	08e5      	lsrs	r5, r4, #3
 8002318:	2301      	movs	r3, #1
 800231a:	e77f      	b.n	800221c <__aeabi_dsub+0x4b0>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x5b6>
 8002320:	e673      	b.n	800200a <__aeabi_dsub+0x29e>
 8002322:	464b      	mov	r3, r9
 8002324:	1b5f      	subs	r7, r3, r5
 8002326:	003b      	movs	r3, r7
 8002328:	2d00      	cmp	r5, #0
 800232a:	d100      	bne.n	800232e <__aeabi_dsub+0x5c2>
 800232c:	e742      	b.n	80021b4 <__aeabi_dsub+0x448>
 800232e:	2f38      	cmp	r7, #56	@ 0x38
 8002330:	dd00      	ble.n	8002334 <__aeabi_dsub+0x5c8>
 8002332:	e0ec      	b.n	800250e <__aeabi_dsub+0x7a2>
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	000e      	movs	r6, r1
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431c      	orrs	r4, r3
 800233c:	2f1f      	cmp	r7, #31
 800233e:	dc25      	bgt.n	800238c <__aeabi_dsub+0x620>
 8002340:	2520      	movs	r5, #32
 8002342:	0023      	movs	r3, r4
 8002344:	1bed      	subs	r5, r5, r7
 8002346:	0001      	movs	r1, r0
 8002348:	40a8      	lsls	r0, r5
 800234a:	40ab      	lsls	r3, r5
 800234c:	40f9      	lsrs	r1, r7
 800234e:	1e45      	subs	r5, r0, #1
 8002350:	41a8      	sbcs	r0, r5
 8002352:	430b      	orrs	r3, r1
 8002354:	40fc      	lsrs	r4, r7
 8002356:	4318      	orrs	r0, r3
 8002358:	465b      	mov	r3, fp
 800235a:	1b1b      	subs	r3, r3, r4
 800235c:	469b      	mov	fp, r3
 800235e:	e739      	b.n	80021d4 <__aeabi_dsub+0x468>
 8002360:	4666      	mov	r6, ip
 8002362:	2501      	movs	r5, #1
 8002364:	e562      	b.n	8001e2c <__aeabi_dsub+0xc0>
 8002366:	001f      	movs	r7, r3
 8002368:	4659      	mov	r1, fp
 800236a:	3f20      	subs	r7, #32
 800236c:	40f9      	lsrs	r1, r7
 800236e:	468c      	mov	ip, r1
 8002370:	2b20      	cmp	r3, #32
 8002372:	d005      	beq.n	8002380 <__aeabi_dsub+0x614>
 8002374:	2740      	movs	r7, #64	@ 0x40
 8002376:	4659      	mov	r1, fp
 8002378:	1afb      	subs	r3, r7, r3
 800237a:	4099      	lsls	r1, r3
 800237c:	430a      	orrs	r2, r1
 800237e:	4692      	mov	sl, r2
 8002380:	4657      	mov	r7, sl
 8002382:	1e7b      	subs	r3, r7, #1
 8002384:	419f      	sbcs	r7, r3
 8002386:	4663      	mov	r3, ip
 8002388:	431f      	orrs	r7, r3
 800238a:	e5c1      	b.n	8001f10 <__aeabi_dsub+0x1a4>
 800238c:	003b      	movs	r3, r7
 800238e:	0025      	movs	r5, r4
 8002390:	3b20      	subs	r3, #32
 8002392:	40dd      	lsrs	r5, r3
 8002394:	2f20      	cmp	r7, #32
 8002396:	d004      	beq.n	80023a2 <__aeabi_dsub+0x636>
 8002398:	2340      	movs	r3, #64	@ 0x40
 800239a:	1bdb      	subs	r3, r3, r7
 800239c:	409c      	lsls	r4, r3
 800239e:	4320      	orrs	r0, r4
 80023a0:	4680      	mov	r8, r0
 80023a2:	4640      	mov	r0, r8
 80023a4:	1e43      	subs	r3, r0, #1
 80023a6:	4198      	sbcs	r0, r3
 80023a8:	4328      	orrs	r0, r5
 80023aa:	e713      	b.n	80021d4 <__aeabi_dsub+0x468>
 80023ac:	2900      	cmp	r1, #0
 80023ae:	d09d      	beq.n	80022ec <__aeabi_dsub+0x580>
 80023b0:	2601      	movs	r6, #1
 80023b2:	4663      	mov	r3, ip
 80023b4:	465c      	mov	r4, fp
 80023b6:	4690      	mov	r8, r2
 80023b8:	401e      	ands	r6, r3
 80023ba:	e6db      	b.n	8002174 <__aeabi_dsub+0x408>
 80023bc:	1a17      	subs	r7, r2, r0
 80023be:	465b      	mov	r3, fp
 80023c0:	42ba      	cmp	r2, r7
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	1b1c      	subs	r4, r3, r4
 80023c6:	4252      	negs	r2, r2
 80023c8:	1aa4      	subs	r4, r4, r2
 80023ca:	0223      	lsls	r3, r4, #8
 80023cc:	d4c8      	bmi.n	8002360 <__aeabi_dsub+0x5f4>
 80023ce:	0763      	lsls	r3, r4, #29
 80023d0:	08ff      	lsrs	r7, r7, #3
 80023d2:	431f      	orrs	r7, r3
 80023d4:	4666      	mov	r6, ip
 80023d6:	2301      	movs	r3, #1
 80023d8:	08e5      	lsrs	r5, r4, #3
 80023da:	e71f      	b.n	800221c <__aeabi_dsub+0x4b0>
 80023dc:	001d      	movs	r5, r3
 80023de:	2400      	movs	r4, #0
 80023e0:	2700      	movs	r7, #0
 80023e2:	e657      	b.n	8002094 <__aeabi_dsub+0x328>
 80023e4:	465c      	mov	r4, fp
 80023e6:	08d0      	lsrs	r0, r2, #3
 80023e8:	e66a      	b.n	80020c0 <__aeabi_dsub+0x354>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x684>
 80023ee:	e737      	b.n	8002260 <__aeabi_dsub+0x4f4>
 80023f0:	4653      	mov	r3, sl
 80023f2:	08c0      	lsrs	r0, r0, #3
 80023f4:	0767      	lsls	r7, r4, #29
 80023f6:	4307      	orrs	r7, r0
 80023f8:	08e5      	lsrs	r5, r4, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x694>
 80023fe:	e5b1      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	031b      	lsls	r3, r3, #12
 8002404:	421d      	tst	r5, r3
 8002406:	d008      	beq.n	800241a <__aeabi_dsub+0x6ae>
 8002408:	4659      	mov	r1, fp
 800240a:	08c8      	lsrs	r0, r1, #3
 800240c:	4218      	tst	r0, r3
 800240e:	d104      	bne.n	800241a <__aeabi_dsub+0x6ae>
 8002410:	08d2      	lsrs	r2, r2, #3
 8002412:	0749      	lsls	r1, r1, #29
 8002414:	430a      	orrs	r2, r1
 8002416:	0017      	movs	r7, r2
 8002418:	0005      	movs	r5, r0
 800241a:	0f7b      	lsrs	r3, r7, #29
 800241c:	00ff      	lsls	r7, r7, #3
 800241e:	08ff      	lsrs	r7, r7, #3
 8002420:	075b      	lsls	r3, r3, #29
 8002422:	431f      	orrs	r7, r3
 8002424:	e59e      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 8002426:	08c0      	lsrs	r0, r0, #3
 8002428:	0763      	lsls	r3, r4, #29
 800242a:	4318      	orrs	r0, r3
 800242c:	08e5      	lsrs	r5, r4, #3
 800242e:	2900      	cmp	r1, #0
 8002430:	d053      	beq.n	80024da <__aeabi_dsub+0x76e>
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	031b      	lsls	r3, r3, #12
 8002436:	421d      	tst	r5, r3
 8002438:	d00a      	beq.n	8002450 <__aeabi_dsub+0x6e4>
 800243a:	4659      	mov	r1, fp
 800243c:	08cc      	lsrs	r4, r1, #3
 800243e:	421c      	tst	r4, r3
 8002440:	d106      	bne.n	8002450 <__aeabi_dsub+0x6e4>
 8002442:	2601      	movs	r6, #1
 8002444:	4663      	mov	r3, ip
 8002446:	0025      	movs	r5, r4
 8002448:	08d0      	lsrs	r0, r2, #3
 800244a:	0749      	lsls	r1, r1, #29
 800244c:	4308      	orrs	r0, r1
 800244e:	401e      	ands	r6, r3
 8002450:	0f47      	lsrs	r7, r0, #29
 8002452:	00c0      	lsls	r0, r0, #3
 8002454:	08c0      	lsrs	r0, r0, #3
 8002456:	077f      	lsls	r7, r7, #29
 8002458:	4307      	orrs	r7, r0
 800245a:	e583      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 800245c:	1883      	adds	r3, r0, r2
 800245e:	4293      	cmp	r3, r2
 8002460:	4192      	sbcs	r2, r2
 8002462:	445c      	add	r4, fp
 8002464:	4252      	negs	r2, r2
 8002466:	18a5      	adds	r5, r4, r2
 8002468:	022a      	lsls	r2, r5, #8
 800246a:	d500      	bpl.n	800246e <__aeabi_dsub+0x702>
 800246c:	e724      	b.n	80022b8 <__aeabi_dsub+0x54c>
 800246e:	076f      	lsls	r7, r5, #29
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	431f      	orrs	r7, r3
 8002474:	08ed      	lsrs	r5, r5, #3
 8002476:	2301      	movs	r3, #1
 8002478:	e6d0      	b.n	800221c <__aeabi_dsub+0x4b0>
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	000007ff 	.word	0x000007ff
 8002480:	000007fe 	.word	0x000007fe
 8002484:	ff7fffff 	.word	0xff7fffff
 8002488:	465b      	mov	r3, fp
 800248a:	08d2      	lsrs	r2, r2, #3
 800248c:	075f      	lsls	r7, r3, #29
 800248e:	4666      	mov	r6, ip
 8002490:	4317      	orrs	r7, r2
 8002492:	08dd      	lsrs	r5, r3, #3
 8002494:	e566      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 8002496:	0025      	movs	r5, r4
 8002498:	3b20      	subs	r3, #32
 800249a:	40dd      	lsrs	r5, r3
 800249c:	4663      	mov	r3, ip
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d005      	beq.n	80024ae <__aeabi_dsub+0x742>
 80024a2:	2340      	movs	r3, #64	@ 0x40
 80024a4:	4661      	mov	r1, ip
 80024a6:	1a5b      	subs	r3, r3, r1
 80024a8:	409c      	lsls	r4, r3
 80024aa:	4320      	orrs	r0, r4
 80024ac:	4680      	mov	r8, r0
 80024ae:	4647      	mov	r7, r8
 80024b0:	1e7b      	subs	r3, r7, #1
 80024b2:	419f      	sbcs	r7, r3
 80024b4:	432f      	orrs	r7, r5
 80024b6:	e5a0      	b.n	8001ffa <__aeabi_dsub+0x28e>
 80024b8:	2120      	movs	r1, #32
 80024ba:	2700      	movs	r7, #0
 80024bc:	1a09      	subs	r1, r1, r0
 80024be:	e4d2      	b.n	8001e66 <__aeabi_dsub+0xfa>
 80024c0:	2f00      	cmp	r7, #0
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dsub+0x75a>
 80024c4:	e713      	b.n	80022ee <__aeabi_dsub+0x582>
 80024c6:	465c      	mov	r4, fp
 80024c8:	0017      	movs	r7, r2
 80024ca:	2500      	movs	r5, #0
 80024cc:	e5f6      	b.n	80020bc <__aeabi_dsub+0x350>
 80024ce:	08d7      	lsrs	r7, r2, #3
 80024d0:	0749      	lsls	r1, r1, #29
 80024d2:	2302      	movs	r3, #2
 80024d4:	430f      	orrs	r7, r1
 80024d6:	092d      	lsrs	r5, r5, #4
 80024d8:	e6a0      	b.n	800221c <__aeabi_dsub+0x4b0>
 80024da:	0007      	movs	r7, r0
 80024dc:	e542      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80024de:	465b      	mov	r3, fp
 80024e0:	2601      	movs	r6, #1
 80024e2:	075f      	lsls	r7, r3, #29
 80024e4:	08dd      	lsrs	r5, r3, #3
 80024e6:	4663      	mov	r3, ip
 80024e8:	08d2      	lsrs	r2, r2, #3
 80024ea:	4317      	orrs	r7, r2
 80024ec:	401e      	ands	r6, r3
 80024ee:	e539      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80024f0:	465b      	mov	r3, fp
 80024f2:	08d2      	lsrs	r2, r2, #3
 80024f4:	075f      	lsls	r7, r3, #29
 80024f6:	4317      	orrs	r7, r2
 80024f8:	08dd      	lsrs	r5, r3, #3
 80024fa:	e533      	b.n	8001f64 <__aeabi_dsub+0x1f8>
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <__aeabi_dsub+0x80c>)
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	4022      	ands	r2, r4
 8002502:	0757      	lsls	r7, r2, #29
 8002504:	0252      	lsls	r2, r2, #9
 8002506:	2501      	movs	r5, #1
 8002508:	431f      	orrs	r7, r3
 800250a:	0b14      	lsrs	r4, r2, #12
 800250c:	e5c2      	b.n	8002094 <__aeabi_dsub+0x328>
 800250e:	000e      	movs	r6, r1
 8002510:	2001      	movs	r0, #1
 8002512:	e65f      	b.n	80021d4 <__aeabi_dsub+0x468>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <__aeabi_dsub+0x7c8>
 8002518:	464b      	mov	r3, r9
 800251a:	1b5b      	subs	r3, r3, r5
 800251c:	469c      	mov	ip, r3
 800251e:	2d00      	cmp	r5, #0
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x7b8>
 8002522:	e548      	b.n	8001fb6 <__aeabi_dsub+0x24a>
 8002524:	2701      	movs	r7, #1
 8002526:	2b38      	cmp	r3, #56	@ 0x38
 8002528:	dd00      	ble.n	800252c <__aeabi_dsub+0x7c0>
 800252a:	e566      	b.n	8001ffa <__aeabi_dsub+0x28e>
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	431c      	orrs	r4, r3
 8002532:	e550      	b.n	8001fd6 <__aeabi_dsub+0x26a>
 8002534:	1c6b      	adds	r3, r5, #1
 8002536:	4d11      	ldr	r5, [pc, #68]	@ (800257c <__aeabi_dsub+0x810>)
 8002538:	422b      	tst	r3, r5
 800253a:	d000      	beq.n	800253e <__aeabi_dsub+0x7d2>
 800253c:	e673      	b.n	8002226 <__aeabi_dsub+0x4ba>
 800253e:	4659      	mov	r1, fp
 8002540:	0023      	movs	r3, r4
 8002542:	4311      	orrs	r1, r2
 8002544:	468a      	mov	sl, r1
 8002546:	4303      	orrs	r3, r0
 8002548:	e600      	b.n	800214c <__aeabi_dsub+0x3e0>
 800254a:	0767      	lsls	r7, r4, #29
 800254c:	08c0      	lsrs	r0, r0, #3
 800254e:	2300      	movs	r3, #0
 8002550:	4307      	orrs	r7, r0
 8002552:	08e5      	lsrs	r5, r4, #3
 8002554:	e662      	b.n	800221c <__aeabi_dsub+0x4b0>
 8002556:	0764      	lsls	r4, r4, #29
 8002558:	08ff      	lsrs	r7, r7, #3
 800255a:	4327      	orrs	r7, r4
 800255c:	0905      	lsrs	r5, r0, #4
 800255e:	e65d      	b.n	800221c <__aeabi_dsub+0x4b0>
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	0749      	lsls	r1, r1, #29
 8002564:	4311      	orrs	r1, r2
 8002566:	000f      	movs	r7, r1
 8002568:	2302      	movs	r3, #2
 800256a:	092d      	lsrs	r5, r5, #4
 800256c:	e656      	b.n	800221c <__aeabi_dsub+0x4b0>
 800256e:	0007      	movs	r7, r0
 8002570:	e5a4      	b.n	80020bc <__aeabi_dsub+0x350>
 8002572:	0038      	movs	r0, r7
 8002574:	e48f      	b.n	8001e96 <__aeabi_dsub+0x12a>
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	ff7fffff 	.word	0xff7fffff
 800257c:	000007fe 	.word	0x000007fe

08002580 <__aeabi_d2iz>:
 8002580:	000b      	movs	r3, r1
 8002582:	0002      	movs	r2, r0
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4d16      	ldr	r5, [pc, #88]	@ (80025e0 <__aeabi_d2iz+0x60>)
 8002588:	030c      	lsls	r4, r1, #12
 800258a:	b082      	sub	sp, #8
 800258c:	0049      	lsls	r1, r1, #1
 800258e:	2000      	movs	r0, #0
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	0d49      	lsrs	r1, r1, #21
 8002598:	0fde      	lsrs	r6, r3, #31
 800259a:	42a9      	cmp	r1, r5
 800259c:	dd04      	ble.n	80025a8 <__aeabi_d2iz+0x28>
 800259e:	4811      	ldr	r0, [pc, #68]	@ (80025e4 <__aeabi_d2iz+0x64>)
 80025a0:	4281      	cmp	r1, r0
 80025a2:	dd03      	ble.n	80025ac <__aeabi_d2iz+0x2c>
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <__aeabi_d2iz+0x68>)
 80025a6:	18f0      	adds	r0, r6, r3
 80025a8:	b002      	add	sp, #8
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	2080      	movs	r0, #128	@ 0x80
 80025ae:	0340      	lsls	r0, r0, #13
 80025b0:	4320      	orrs	r0, r4
 80025b2:	4c0e      	ldr	r4, [pc, #56]	@ (80025ec <__aeabi_d2iz+0x6c>)
 80025b4:	1a64      	subs	r4, r4, r1
 80025b6:	2c1f      	cmp	r4, #31
 80025b8:	dd08      	ble.n	80025cc <__aeabi_d2iz+0x4c>
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <__aeabi_d2iz+0x70>)
 80025bc:	1a5b      	subs	r3, r3, r1
 80025be:	40d8      	lsrs	r0, r3
 80025c0:	0003      	movs	r3, r0
 80025c2:	4258      	negs	r0, r3
 80025c4:	2e00      	cmp	r6, #0
 80025c6:	d1ef      	bne.n	80025a8 <__aeabi_d2iz+0x28>
 80025c8:	0018      	movs	r0, r3
 80025ca:	e7ed      	b.n	80025a8 <__aeabi_d2iz+0x28>
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <__aeabi_d2iz+0x74>)
 80025ce:	9a00      	ldr	r2, [sp, #0]
 80025d0:	469c      	mov	ip, r3
 80025d2:	0003      	movs	r3, r0
 80025d4:	4461      	add	r1, ip
 80025d6:	408b      	lsls	r3, r1
 80025d8:	40e2      	lsrs	r2, r4
 80025da:	4313      	orrs	r3, r2
 80025dc:	e7f1      	b.n	80025c2 <__aeabi_d2iz+0x42>
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	000003fe 	.word	0x000003fe
 80025e4:	0000041d 	.word	0x0000041d
 80025e8:	7fffffff 	.word	0x7fffffff
 80025ec:	00000433 	.word	0x00000433
 80025f0:	00000413 	.word	0x00000413
 80025f4:	fffffbed 	.word	0xfffffbed

080025f8 <__aeabi_ui2d>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	1e04      	subs	r4, r0, #0
 80025fc:	d010      	beq.n	8002620 <__aeabi_ui2d+0x28>
 80025fe:	f000 f867 	bl	80026d0 <__clzsi2>
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <__aeabi_ui2d+0x44>)
 8002604:	1a1b      	subs	r3, r3, r0
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	0d5b      	lsrs	r3, r3, #21
 800260a:	280a      	cmp	r0, #10
 800260c:	dc0f      	bgt.n	800262e <__aeabi_ui2d+0x36>
 800260e:	220b      	movs	r2, #11
 8002610:	0021      	movs	r1, r4
 8002612:	1a12      	subs	r2, r2, r0
 8002614:	40d1      	lsrs	r1, r2
 8002616:	3015      	adds	r0, #21
 8002618:	030a      	lsls	r2, r1, #12
 800261a:	4084      	lsls	r4, r0
 800261c:	0b12      	lsrs	r2, r2, #12
 800261e:	e001      	b.n	8002624 <__aeabi_ui2d+0x2c>
 8002620:	2300      	movs	r3, #0
 8002622:	2200      	movs	r2, #0
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	4313      	orrs	r3, r2
 8002628:	0020      	movs	r0, r4
 800262a:	0019      	movs	r1, r3
 800262c:	bd10      	pop	{r4, pc}
 800262e:	0022      	movs	r2, r4
 8002630:	380b      	subs	r0, #11
 8002632:	4082      	lsls	r2, r0
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	2400      	movs	r4, #0
 8002638:	0b12      	lsrs	r2, r2, #12
 800263a:	e7f3      	b.n	8002624 <__aeabi_ui2d+0x2c>
 800263c:	0000041e 	.word	0x0000041e

08002640 <__aeabi_f2d>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	0242      	lsls	r2, r0, #9
 8002644:	0043      	lsls	r3, r0, #1
 8002646:	0fc4      	lsrs	r4, r0, #31
 8002648:	20fe      	movs	r0, #254	@ 0xfe
 800264a:	0e1b      	lsrs	r3, r3, #24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	0a55      	lsrs	r5, r2, #9
 8002650:	4208      	tst	r0, r1
 8002652:	d00c      	beq.n	800266e <__aeabi_f2d+0x2e>
 8002654:	21e0      	movs	r1, #224	@ 0xe0
 8002656:	0089      	lsls	r1, r1, #2
 8002658:	468c      	mov	ip, r1
 800265a:	076d      	lsls	r5, r5, #29
 800265c:	0b12      	lsrs	r2, r2, #12
 800265e:	4463      	add	r3, ip
 8002660:	051b      	lsls	r3, r3, #20
 8002662:	4313      	orrs	r3, r2
 8002664:	07e4      	lsls	r4, r4, #31
 8002666:	4323      	orrs	r3, r4
 8002668:	0028      	movs	r0, r5
 800266a:	0019      	movs	r1, r3
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <__aeabi_f2d+0x5c>
 8002672:	2d00      	cmp	r5, #0
 8002674:	d01b      	beq.n	80026ae <__aeabi_f2d+0x6e>
 8002676:	0028      	movs	r0, r5
 8002678:	f000 f82a 	bl	80026d0 <__clzsi2>
 800267c:	280a      	cmp	r0, #10
 800267e:	dc1c      	bgt.n	80026ba <__aeabi_f2d+0x7a>
 8002680:	230b      	movs	r3, #11
 8002682:	002a      	movs	r2, r5
 8002684:	1a1b      	subs	r3, r3, r0
 8002686:	40da      	lsrs	r2, r3
 8002688:	0003      	movs	r3, r0
 800268a:	3315      	adds	r3, #21
 800268c:	409d      	lsls	r5, r3
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <__aeabi_f2d+0x88>)
 8002690:	0312      	lsls	r2, r2, #12
 8002692:	1a1b      	subs	r3, r3, r0
 8002694:	055b      	lsls	r3, r3, #21
 8002696:	0b12      	lsrs	r2, r2, #12
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	e7e1      	b.n	8002660 <__aeabi_f2d+0x20>
 800269c:	2d00      	cmp	r5, #0
 800269e:	d009      	beq.n	80026b4 <__aeabi_f2d+0x74>
 80026a0:	0b13      	lsrs	r3, r2, #12
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	0312      	lsls	r2, r2, #12
 80026a6:	431a      	orrs	r2, r3
 80026a8:	076d      	lsls	r5, r5, #29
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <__aeabi_f2d+0x8c>)
 80026ac:	e7d8      	b.n	8002660 <__aeabi_f2d+0x20>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2200      	movs	r2, #0
 80026b2:	e7d5      	b.n	8002660 <__aeabi_f2d+0x20>
 80026b4:	2200      	movs	r2, #0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <__aeabi_f2d+0x8c>)
 80026b8:	e7d2      	b.n	8002660 <__aeabi_f2d+0x20>
 80026ba:	0003      	movs	r3, r0
 80026bc:	002a      	movs	r2, r5
 80026be:	3b0b      	subs	r3, #11
 80026c0:	409a      	lsls	r2, r3
 80026c2:	2500      	movs	r5, #0
 80026c4:	e7e3      	b.n	800268e <__aeabi_f2d+0x4e>
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	00000389 	.word	0x00000389
 80026cc:	000007ff 	.word	0x000007ff

080026d0 <__clzsi2>:
 80026d0:	211c      	movs	r1, #28
 80026d2:	2301      	movs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	4298      	cmp	r0, r3
 80026d8:	d301      	bcc.n	80026de <__clzsi2+0xe>
 80026da:	0c00      	lsrs	r0, r0, #16
 80026dc:	3910      	subs	r1, #16
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	4298      	cmp	r0, r3
 80026e2:	d301      	bcc.n	80026e8 <__clzsi2+0x18>
 80026e4:	0a00      	lsrs	r0, r0, #8
 80026e6:	3908      	subs	r1, #8
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	4298      	cmp	r0, r3
 80026ec:	d301      	bcc.n	80026f2 <__clzsi2+0x22>
 80026ee:	0900      	lsrs	r0, r0, #4
 80026f0:	3904      	subs	r1, #4
 80026f2:	a202      	add	r2, pc, #8	@ (adr r2, 80026fc <__clzsi2+0x2c>)
 80026f4:	5c10      	ldrb	r0, [r2, r0]
 80026f6:	1840      	adds	r0, r0, r1
 80026f8:	4770      	bx	lr
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	02020304 	.word	0x02020304
 8002700:	01010101 	.word	0x01010101
	...

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f000 fb8c 	bl	8002e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f85a 	bl	80027cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002718:	f000 f8e0 	bl	80028dc <MX_GPIO_Init>
  MX_SPI1_Init();
 800271c:	f000 f8a0 	bl	8002860 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	2007      	movs	r0, #7
 8002726:	f000 fcb5 	bl	8003094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800272a:	2007      	movs	r0, #7
 800272c:	f000 fcc7 	bl	80030be <HAL_NVIC_EnableIRQ>

  Test_Segments();
 8002730:	f000 f99a 	bl	8002a68 <Test_Segments>

  // Инициализация дисплея (все нули)
  digits[0] = 0;
 8002734:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <main+0xb0>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
  digits[1] = 0;
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <main+0xb0>)
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
  digits[2] = 0;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <main+0xb0>)
 8002742:	2200      	movs	r2, #0
 8002744:	709a      	strb	r2, [r3, #2]
  digits[3] = 0;
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <main+0xb0>)
 8002748:	2200      	movs	r2, #0
 800274a:	70da      	strb	r2, [r3, #3]
  Update_Display();
 800274c:	f000 f92a 	bl	80029a4 <Update_Display>
  HAL_Delay(1000);
 8002750:	23fa      	movs	r3, #250	@ 0xfa
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fbcd 	bl	8002ef4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pulse_count >= period_number) {
 800275a:	2303      	movs	r3, #3
 800275c:	001a      	movs	r2, r3
 800275e:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <main+0xb4>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	429a      	cmp	r2, r3
 8002766:	d804      	bhi.n	8002772 <main+0x66>
		  Frequency_calculation();
 8002768:	f000 f9de 	bl	8002b28 <Frequency_calculation>
		  Update_Display();
 800276c:	f000 f91a 	bl	80029a4 <Update_Display>
 8002770:	e7f3      	b.n	800275a <main+0x4e>
	  }
	  else if (last_pulse_time > 0 && (HAL_GetTick() - last_pulse_time) > timeout_ms) {
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <main+0xb8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ef      	beq.n	800275a <main+0x4e>
 800277a:	f000 fbb1 	bl	8002ee0 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <main+0xb8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	22fa      	movs	r2, #250	@ 0xfa
 8002788:	00d2      	lsls	r2, r2, #3
 800278a:	4293      	cmp	r3, r2
 800278c:	d9e5      	bls.n	800275a <main+0x4e>
	          filtered_rpm = 0.0;
 800278e:	490e      	ldr	r1, [pc, #56]	@ (80027c8 <main+0xbc>)
 8002790:	2200      	movs	r2, #0
 8002792:	2300      	movs	r3, #0
 8002794:	600a      	str	r2, [r1, #0]
 8002796:	604b      	str	r3, [r1, #4]
	          digits[0] = 0;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <main+0xb0>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	          digits[1] = 0;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <main+0xb0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	705a      	strb	r2, [r3, #1]
	          digits[2] = 0;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <main+0xb0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	709a      	strb	r2, [r3, #2]
	          digits[3] = 0;
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <main+0xb0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	70da      	strb	r2, [r3, #3]
	          Update_Display();
 80027b0:	f000 f8f8 	bl	80029a4 <Update_Display>
	          last_pulse_time = 0;  // Сброс флага таймаута
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <main+0xb8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
	  if (pulse_count >= period_number) {
 80027ba:	e7ce      	b.n	800275a <main+0x4e>
 80027bc:	20000094 	.word	0x20000094
 80027c0:	20000090 	.word	0x20000090
 80027c4:	200000a8 	.word	0x200000a8
 80027c8:	200000a0 	.word	0x200000a0

080027cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b091      	sub	sp, #68	@ 0x44
 80027d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d2:	2410      	movs	r4, #16
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	0018      	movs	r0, r3
 80027d8:	2330      	movs	r3, #48	@ 0x30
 80027da:	001a      	movs	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	f001 fde5 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e2:	003b      	movs	r3, r7
 80027e4:	0018      	movs	r0, r3
 80027e6:	2310      	movs	r3, #16
 80027e8:	001a      	movs	r2, r3
 80027ea:	2100      	movs	r1, #0
 80027ec:	f001 fdde 	bl	80043ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027f0:	0021      	movs	r1, r4
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2201      	movs	r2, #1
 80027fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2210      	movs	r2, #16
 8002802:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2202      	movs	r2, #2
 8002808:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002810:	187b      	adds	r3, r7, r1
 8002812:	22a0      	movs	r2, #160	@ 0xa0
 8002814:	0392      	lsls	r2, r2, #14
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2200      	movs	r2, #0
 800281c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281e:	187b      	adds	r3, r7, r1
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fdf7 	bl	8003414 <HAL_RCC_OscConfig>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800282a:	f000 fa41 	bl	8002cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800282e:	003b      	movs	r3, r7
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002834:	003b      	movs	r3, r7
 8002836:	2202      	movs	r2, #2
 8002838:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283a:	003b      	movs	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002840:	003b      	movs	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002846:	003b      	movs	r3, r7
 8002848:	2101      	movs	r1, #1
 800284a:	0018      	movs	r0, r3
 800284c:	f001 f8fc 	bl	8003a48 <HAL_RCC_ClockConfig>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002854:	f000 fa2c 	bl	8002cb0 <Error_Handler>
  }
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b011      	add	sp, #68	@ 0x44
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <MX_SPI1_Init+0x74>)
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <MX_SPI1_Init+0x78>)
 8002868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800286a:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <MX_SPI1_Init+0x74>)
 800286c:	2282      	movs	r2, #130	@ 0x82
 800286e:	0052      	lsls	r2, r2, #1
 8002870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <MX_SPI1_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <MX_SPI1_Init+0x74>)
 800287a:	22e0      	movs	r2, #224	@ 0xe0
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <MX_SPI1_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002886:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <MX_SPI1_Init+0x74>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <MX_SPI1_Init+0x74>)
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_SPI1_Init+0x74>)
 8002896:	2220      	movs	r2, #32
 8002898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_SPI1_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028ae:	2207      	movs	r2, #7
 80028b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028ba:	2208      	movs	r2, #8
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028be:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <MX_SPI1_Init+0x74>)
 80028c0:	0018      	movs	r0, r3
 80028c2:	f001 f9e5 	bl	8003c90 <HAL_SPI_Init>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028ca:	f000 f9f1 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000002c 	.word	0x2000002c
 80028d8:	40013000 	.word	0x40013000

080028dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	240c      	movs	r4, #12
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	0018      	movs	r0, r3
 80028e8:	2314      	movs	r3, #20
 80028ea:	001a      	movs	r2, r3
 80028ec:	2100      	movs	r1, #0
 80028ee:	f001 fd5d 	bl	80043ac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <MX_GPIO_Init+0xc0>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b29      	ldr	r3, [pc, #164]	@ (800299c <MX_GPIO_Init+0xc0>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0289      	lsls	r1, r1, #10
 80028fc:	430a      	orrs	r2, r1
 80028fe:	615a      	str	r2, [r3, #20]
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <MX_GPIO_Init+0xc0>)
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <MX_GPIO_Init+0xc0>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <MX_GPIO_Init+0xc0>)
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	02c9      	lsls	r1, r1, #11
 8002918:	430a      	orrs	r2, r1
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <MX_GPIO_Init+0xc0>)
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	02db      	lsls	r3, r3, #11
 8002924:	4013      	ands	r3, r2
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OE_Pin|Latch_Pin, GPIO_PIN_RESET);
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <MX_GPIO_Init+0xc4>)
 800292c:	2200      	movs	r2, #0
 800292e:	2103      	movs	r1, #3
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fd51 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OE_Pin Latch_Pin */
  GPIO_InitStruct.Pin = OE_Pin|Latch_Pin;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	2203      	movs	r2, #3
 800293a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	193b      	adds	r3, r7, r4
 800293e:	2201      	movs	r2, #1
 8002940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	193b      	adds	r3, r7, r4
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	193b      	adds	r3, r7, r4
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	193b      	adds	r3, r7, r4
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <MX_GPIO_Init+0xc4>)
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f000 fbcf 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800295a:	0021      	movs	r1, r4
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2288      	movs	r2, #136	@ 0x88
 8002966:	0352      	lsls	r2, r2, #13
 8002968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	187b      	adds	r3, r7, r1
 8002972:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <MX_GPIO_Init+0xc4>)
 8002974:	0019      	movs	r1, r3
 8002976:	0010      	movs	r0, r2
 8002978:	f000 fbbe 	bl	80030f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <MX_GPIO_Init+0xc4>)
 800297e:	2201      	movs	r2, #1
 8002980:	2102      	movs	r1, #2
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fd28 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <MX_GPIO_Init+0xc4>)
 800298a:	2200      	movs	r2, #0
 800298c:	2101      	movs	r1, #1
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fd22 	bl	80033d8 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b009      	add	sp, #36	@ 0x24
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000400 	.word	0x48000400

080029a4 <Update_Display>:

/* USER CODE BEGIN 4 */

// Обновление индикаторов
void Update_Display(void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
    uint8_t data[4];
    // Порядок передачи: LED1, LED2, LED3, LED4 (единицы → тысячи)
    data[0] = digit_pattern[digits[3]]; // Единицы (LED4)
 80029aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <Update_Display+0x74>)
 80029ac:	78db      	ldrb	r3, [r3, #3]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	001a      	movs	r2, r3
 80029b2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <Update_Display+0x78>)
 80029b4:	5c9a      	ldrb	r2, [r3, r2]
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	701a      	strb	r2, [r3, #0]
    data[1] = digit_pattern[digits[2]]; // Десятки (LED3)
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <Update_Display+0x74>)
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	001a      	movs	r2, r3
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <Update_Display+0x78>)
 80029c4:	5c9a      	ldrb	r2, [r3, r2]
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	705a      	strb	r2, [r3, #1]
    data[2] = digit_pattern[digits[1]]; // Сотни (LED2)
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <Update_Display+0x74>)
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	001a      	movs	r2, r3
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <Update_Display+0x78>)
 80029d4:	5c9a      	ldrb	r2, [r3, r2]
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	709a      	strb	r2, [r3, #2]
    data[3] = digit_pattern[digits[0]]; // Тысячи (LED1)
 80029da:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <Update_Display+0x74>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	001a      	movs	r2, r3
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <Update_Display+0x78>)
 80029e4:	5c9a      	ldrb	r2, [r3, r2]
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // LATCH = 0
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <Update_Display+0x7c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	2102      	movs	r1, #2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fcf1 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 4, 100);               // Передача данных
 80029f6:	1d39      	adds	r1, r7, #4
 80029f8:	480a      	ldr	r0, [pc, #40]	@ (8002a24 <Update_Display+0x80>)
 80029fa:	2364      	movs	r3, #100	@ 0x64
 80029fc:	2204      	movs	r2, #4
 80029fe:	f001 f9ff 	bl	8003e00 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // LATCH = 1
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <Update_Display+0x7c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	2102      	movs	r1, #2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fce5 	bl	80033d8 <HAL_GPIO_WritePin>
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	20000094 	.word	0x20000094
 8002a1c:	0800445c 	.word	0x0800445c
 8002a20:	48000400 	.word	0x48000400
 8002a24:	2000002c 	.word	0x2000002c

08002a28 <EXTI4_15_IRQHandler>:

// Обработчик прерывания для PB7
void EXTI4_15_IRQHandler(void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) {
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <EXTI4_15_IRQHandler+0x34>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <EXTI4_15_IRQHandler+0x2c>
        pulse_count++;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <EXTI4_15_IRQHandler+0x38>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <EXTI4_15_IRQHandler+0x38>)
 8002a42:	801a      	strh	r2, [r3, #0]
        last_pulse_time = HAL_GetTick();
 8002a44:	f000 fa4c 	bl	8002ee0 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <EXTI4_15_IRQHandler+0x3c>)
 8002a4c:	601a      	str	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8002a4e:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <EXTI4_15_IRQHandler+0x34>)
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	615a      	str	r2, [r3, #20]
    }
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	20000090 	.word	0x20000090
 8002a64:	200000a8 	.word	0x200000a8

08002a68 <Test_Segments>:

// Тест сегментов
void Test_Segments(void) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
    uint8_t test_data[4] = {0};
 8002a6e:	003b      	movs	r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

    // Все сегменты выключены
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <Test_Segments+0xb8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fcac 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 8002a80:	0039      	movs	r1, r7
 8002a82:	4828      	ldr	r0, [pc, #160]	@ (8002b24 <Test_Segments+0xbc>)
 8002a84:	2364      	movs	r3, #100	@ 0x64
 8002a86:	2204      	movs	r2, #4
 8002a88:	f001 f9ba 	bl	8003e00 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <Test_Segments+0xb8>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2102      	movs	r1, #2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 fca0 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8002a98:	23fa      	movs	r3, #250	@ 0xfa
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fa29 	bl	8002ef4 <HAL_Delay>

    // Поочередное включение сегментов
    for(uint8_t seg = 0; seg < 8; seg++) {
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e031      	b.n	8002b0e <Test_Segments+0xa6>
        for(uint8_t i = 0; i < 4; i++) {
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e00d      	b.n	8002ace <Test_Segments+0x66>
            test_data[i] = (1 << seg);
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	1dbb      	adds	r3, r7, #6
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2d1      	uxtb	r1, r2
 8002ac0:	003a      	movs	r2, r7
 8002ac2:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i = 0; i < 4; i++) {
 8002ac4:	1dbb      	adds	r3, r7, #6
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	3201      	adds	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	1dbb      	adds	r3, r7, #6
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d9ed      	bls.n	8002ab2 <Test_Segments+0x4a>
        }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <Test_Segments+0xb8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2102      	movs	r1, #2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 fc7b 	bl	80033d8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, test_data, 4, 100);
 8002ae2:	0039      	movs	r1, r7
 8002ae4:	480f      	ldr	r0, [pc, #60]	@ (8002b24 <Test_Segments+0xbc>)
 8002ae6:	2364      	movs	r3, #100	@ 0x64
 8002ae8:	2204      	movs	r2, #4
 8002aea:	f001 f989 	bl	8003e00 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <Test_Segments+0xb8>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	2102      	movs	r1, #2
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fc6f 	bl	80033d8 <HAL_GPIO_WritePin>

        HAL_Delay(500);
 8002afa:	23fa      	movs	r3, #250	@ 0xfa
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 f9f8 	bl	8002ef4 <HAL_Delay>
    for(uint8_t seg = 0; seg < 8; seg++) {
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	3201      	adds	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b07      	cmp	r3, #7
 8002b14:	d9c9      	bls.n	8002aaa <Test_Segments+0x42>
    }
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	48000400 	.word	0x48000400
 8002b24:	2000002c 	.word	0x2000002c

08002b28 <Frequency_calculation>:

//Функция расчета частоты
void Frequency_calculation(void) {
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
    previous_time = current_time;
 8002b2e:	4b57      	ldr	r3, [pc, #348]	@ (8002c8c <Frequency_calculation+0x164>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <Frequency_calculation+0x168>)
 8002b34:	601a      	str	r2, [r3, #0]
    current_time = HAL_GetTick();
 8002b36:	f000 f9d3 	bl	8002ee0 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <Frequency_calculation+0x164>)
 8002b3e:	601a      	str	r2, [r3, #0]

    // Расчет мгновенного значения RPM
    double frequency_rpm = 60000.0 / ((current_time - previous_time) / pulse_count);
 8002b40:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <Frequency_calculation+0x164>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <Frequency_calculation+0x168>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	1ad2      	subs	r2, r2, r3
 8002b4a:	4b52      	ldr	r3, [pc, #328]	@ (8002c94 <Frequency_calculation+0x16c>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	0019      	movs	r1, r3
 8002b52:	0010      	movs	r0, r2
 8002b54:	f7fd fad8 	bl	8000108 <__udivsi3>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fd4c 	bl	80025f8 <__aeabi_ui2d>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	2000      	movs	r0, #0
 8002b66:	494c      	ldr	r1, [pc, #304]	@ (8002c98 <Frequency_calculation+0x170>)
 8002b68:	f7fe f9e0 	bl	8000f2c <__aeabi_ddiv>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	60fb      	str	r3, [r7, #12]
    pulse_count = 0;
 8002b74:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <Frequency_calculation+0x16c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]

    // Применение EMA-фильтра
    if (filtered_rpm == 0.0) {
 8002b7a:	4b48      	ldr	r3, [pc, #288]	@ (8002c9c <Frequency_calculation+0x174>)
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2300      	movs	r3, #0
 8002b84:	f7fd fb5c 	bl	8000240 <__aeabi_dcmpeq>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d005      	beq.n	8002b98 <Frequency_calculation+0x70>
        filtered_rpm = frequency_rpm;  // Инициализация при первом измерении
 8002b8c:	4943      	ldr	r1, [pc, #268]	@ (8002c9c <Frequency_calculation+0x174>)
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	600a      	str	r2, [r1, #0]
 8002b94:	604b      	str	r3, [r1, #4]
 8002b96:	e025      	b.n	8002be4 <Frequency_calculation+0xbc>
    } else {
        filtered_rpm = alpha * frequency_rpm + (1 - alpha) * filtered_rpm;
 8002b98:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <Frequency_calculation+0x178>)
 8002b9a:	1c18      	adds	r0, r3, #0
 8002b9c:	f7ff fd50 	bl	8002640 <__aeabi_f2d>
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f7fe fdfc 	bl	80017a0 <__aeabi_dmul>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	000b      	movs	r3, r1
 8002bac:	0014      	movs	r4, r2
 8002bae:	001d      	movs	r5, r3
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca0 <Frequency_calculation+0x178>)
 8002bb2:	1c19      	adds	r1, r3, #0
 8002bb4:	20fe      	movs	r0, #254	@ 0xfe
 8002bb6:	0580      	lsls	r0, r0, #22
 8002bb8:	f7fd fb8e 	bl	80002d8 <__aeabi_fsub>
 8002bbc:	1c03      	adds	r3, r0, #0
 8002bbe:	1c18      	adds	r0, r3, #0
 8002bc0:	f7ff fd3e 	bl	8002640 <__aeabi_f2d>
 8002bc4:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <Frequency_calculation+0x174>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f7fe fde9 	bl	80017a0 <__aeabi_dmul>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	0029      	movs	r1, r5
 8002bd6:	f7fd fde3 	bl	80007a0 <__aeabi_dadd>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	000b      	movs	r3, r1
 8002bde:	492f      	ldr	r1, [pc, #188]	@ (8002c9c <Frequency_calculation+0x174>)
 8002be0:	600a      	str	r2, [r1, #0]
 8002be2:	604b      	str	r3, [r1, #4]
    }

    // Ограничение значения (0-9999)
    uint16_t display_rpm = (filtered_rpm > 9999) ? 9999 : (uint16_t)filtered_rpm;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <Frequency_calculation+0x174>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <Frequency_calculation+0x17c>)
 8002bee:	f7fd fb41 	bl	8000274 <__aeabi_dcmpgt>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <Frequency_calculation+0xd2>
 8002bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca8 <Frequency_calculation+0x180>)
 8002bf8:	e008      	b.n	8002c0c <Frequency_calculation+0xe4>
 8002bfa:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <Frequency_calculation+0x174>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0010      	movs	r0, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	f7fd fb4a 	bl	800029c <__aeabi_d2uiz>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]

    // Преобразование в цифры
    digits[0] = display_rpm / 1000;          // Тысячи
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	22fa      	movs	r2, #250	@ 0xfa
 8002c16:	0091      	lsls	r1, r2, #2
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7fd fa75 	bl	8000108 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <Frequency_calculation+0x184>)
 8002c26:	701a      	strb	r2, [r3, #0]
    digits[1] = (display_rpm % 1000) / 100;  // Сотни
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	22fa      	movs	r2, #250	@ 0xfa
 8002c2e:	0091      	lsls	r1, r2, #2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fd faef 	bl	8000214 <__aeabi_uidivmod>
 8002c36:	000b      	movs	r3, r1
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2164      	movs	r1, #100	@ 0x64
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fd fa63 	bl	8000108 <__udivsi3>
 8002c42:	0003      	movs	r3, r0
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <Frequency_calculation+0x184>)
 8002c4a:	705a      	strb	r2, [r3, #1]
    digits[2] = (display_rpm % 100) / 10;    // Десятки
 8002c4c:	1dbb      	adds	r3, r7, #6
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	2164      	movs	r1, #100	@ 0x64
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7fd fade 	bl	8000214 <__aeabi_uidivmod>
 8002c58:	000b      	movs	r3, r1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	210a      	movs	r1, #10
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <Frequency_calculation+0x184>)
 8002c6c:	709a      	strb	r2, [r3, #2]
    digits[3] = display_rpm % 10;            // Единицы
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	210a      	movs	r1, #10
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7fd facd 	bl	8000214 <__aeabi_uidivmod>
 8002c7a:	000b      	movs	r3, r1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <Frequency_calculation+0x184>)
 8002c82:	70da      	strb	r2, [r3, #3]
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8c:	20000098 	.word	0x20000098
 8002c90:	2000009c 	.word	0x2000009c
 8002c94:	20000090 	.word	0x20000090
 8002c98:	40ed4c00 	.word	0x40ed4c00
 8002c9c:	200000a0 	.word	0x200000a0
 8002ca0:	3e4ccccd 	.word	0x3e4ccccd
 8002ca4:	40c38780 	.word	0x40c38780
 8002ca8:	0000270f 	.word	0x0000270f
 8002cac:	20000094 	.word	0x20000094

08002cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb4:	b672      	cpsid	i
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	e7fd      	b.n	8002cb8 <Error_Handler+0x8>

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <HAL_MspInit+0x44>)
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <HAL_MspInit+0x44>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <HAL_MspInit+0x44>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_MspInit+0x44>)
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_MspInit+0x44>)
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	0549      	lsls	r1, r1, #21
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	61da      	str	r2, [r3, #28]
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_MspInit+0x44>)
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	055b      	lsls	r3, r3, #21
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000

08002d04 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b08b      	sub	sp, #44	@ 0x2c
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	2414      	movs	r4, #20
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	0018      	movs	r0, r3
 8002d12:	2314      	movs	r3, #20
 8002d14:	001a      	movs	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f001 fb48 	bl	80043ac <memset>
  if(hspi->Instance==SPI1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_SPI_MspInit+0x90>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d132      	bne.n	8002d8c <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	0149      	lsls	r1, r1, #5
 8002d30:	430a      	orrs	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]
 8002d34:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	0289      	lsls	r1, r1, #10
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_SPI_MspInit+0x94>)
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d5e:	0021      	movs	r1, r4
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	22e0      	movs	r2, #224	@ 0xe0
 8002d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2202      	movs	r2, #2
 8002d6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2203      	movs	r2, #3
 8002d76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	187a      	adds	r2, r7, r1
 8002d80:	2390      	movs	r3, #144	@ 0x90
 8002d82:	05db      	lsls	r3, r3, #23
 8002d84:	0011      	movs	r1, r2
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f9b6 	bl	80030f8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b00b      	add	sp, #44	@ 0x2c
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	40013000 	.word	0x40013000
 8002d98:	40021000 	.word	0x40021000

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da0:	46c0      	nop			@ (mov r8, r8)
 8002da2:	e7fd      	b.n	8002da0 <NMI_Handler+0x4>

08002da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	e7fd      	b.n	8002da8 <HardFault_Handler+0x4>

08002dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc4:	f000 f87a 	bl	8002ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd8:	480d      	ldr	r0, [pc, #52]	@ (8002e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ddc:	f7ff fff7 	bl	8002dce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002de0:	480c      	ldr	r0, [pc, #48]	@ (8002e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002de2:	490d      	ldr	r1, [pc, #52]	@ (8002e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002de4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e1c <LoopForever+0xe>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de8:	e002      	b.n	8002df0 <LoopCopyDataInit>

08002dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dee:	3304      	adds	r3, #4

08002df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df4:	d3f9      	bcc.n	8002dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e24 <LoopForever+0x16>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dfc:	e001      	b.n	8002e02 <LoopFillZerobss>

08002dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e00:	3204      	adds	r2, #4

08002e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e04:	d3fb      	bcc.n	8002dfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e06:	f001 fad9 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e0a:	f7ff fc7f 	bl	800270c <main>

08002e0e <LoopForever>:

LoopForever:
    b LoopForever
 8002e0e:	e7fe      	b.n	8002e0e <LoopForever>
  ldr   r0, =_estack
 8002e10:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e1c:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 8002e20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002e24:	200000b0 	.word	0x200000b0

08002e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC1_IRQHandler>
	...

08002e2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <HAL_Init+0x24>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_Init+0x24>)
 8002e36:	2110      	movs	r1, #16
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f000 f809 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f7ff ff3b 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_InitTick+0x5c>)
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_InitTick+0x60>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	0019      	movs	r1, r3
 8002e66:	23fa      	movs	r3, #250	@ 0xfa
 8002e68:	0098      	lsls	r0, r3, #2
 8002e6a:	f7fd f94d 	bl	8000108 <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	0019      	movs	r1, r3
 8002e72:	0020      	movs	r0, r4
 8002e74:	f7fd f948 	bl	8000108 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f92f 	bl	80030de <HAL_SYSTICK_Config>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d80b      	bhi.n	8002ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	2301      	movs	r3, #1
 8002e92:	425b      	negs	r3, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8fc 	bl	8003094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_InitTick+0x64>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b003      	add	sp, #12
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_IncTick+0x1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_IncTick+0x20>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_IncTick+0x20>)
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	200000ac 	.word	0x200000ac

08002ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	@ (8002ef0 <HAL_GetTick+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	200000ac 	.word	0x200000ac

08002ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_Delay+0x44>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	001a      	movs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	f7ff ffe0 	bl	8002ee0 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d8f7      	bhi.n	8002f1c <HAL_Delay+0x28>
  {
  }
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	20000008 	.word	0x20000008

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	0002      	movs	r2, r0
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f4e:	d809      	bhi.n	8002f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	231f      	movs	r3, #31
 8002f58:	401a      	ands	r2, r3
 8002f5a:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__NVIC_EnableIRQ+0x30>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  }
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f84:	d828      	bhi.n	8002fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f86:	4a2f      	ldr	r2, [pc, #188]	@ (8003044 <__NVIC_SetPriority+0xd4>)
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	33c0      	adds	r3, #192	@ 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	589b      	ldr	r3, [r3, r2]
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	21ff      	movs	r1, #255	@ 0xff
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	22ff      	movs	r2, #255	@ 0xff
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	481f      	ldr	r0, [pc, #124]	@ (8003044 <__NVIC_SetPriority+0xd4>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	33c0      	adds	r3, #192	@ 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fd6:	e031      	b.n	800303c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003048 <__NVIC_SetPriority+0xd8>)
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	3b08      	subs	r3, #8
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3306      	adds	r3, #6
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1dfa      	adds	r2, r7, #7
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	00d2      	lsls	r2, r2, #3
 8002ffe:	21ff      	movs	r1, #255	@ 0xff
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	43d2      	mvns	r2, r2
 8003006:	401a      	ands	r2, r3
 8003008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	22ff      	movs	r2, #255	@ 0xff
 8003010:	401a      	ands	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	2303      	movs	r3, #3
 800301a:	4003      	ands	r3, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003020:	4809      	ldr	r0, [pc, #36]	@ (8003048 <__NVIC_SetPriority+0xd8>)
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001c      	movs	r4, r3
 8003028:	230f      	movs	r3, #15
 800302a:	4023      	ands	r3, r4
 800302c:	3b08      	subs	r3, #8
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	430a      	orrs	r2, r1
 8003032:	3306      	adds	r3, #6
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	18c3      	adds	r3, r0, r3
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b003      	add	sp, #12
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	045b      	lsls	r3, r3, #17
 800305c:	429a      	cmp	r2, r3
 800305e:	d301      	bcc.n	8003064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003060:	2301      	movs	r3, #1
 8003062:	e010      	b.n	8003086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003064:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <SysTick_Config+0x44>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	3a01      	subs	r2, #1
 800306a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306c:	2301      	movs	r3, #1
 800306e:	425b      	negs	r3, r3
 8003070:	2103      	movs	r1, #3
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff7c 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <SysTick_Config+0x44>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <SysTick_Config+0x44>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	210f      	movs	r1, #15
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	1c02      	adds	r2, r0, #0
 80030a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	0002      	movs	r2, r0
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ff33 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ffaf 	bl	800304c <SysTick_Config>
 80030ee:	0003      	movs	r3, r0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003106:	e14f      	b.n	80033a8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4091      	lsls	r1, r2
 8003112:	000a      	movs	r2, r1
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d100      	bne.n	8003120 <HAL_GPIO_Init+0x28>
 800311e:	e140      	b.n	80033a2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	4013      	ands	r3, r2
 8003128:	2b01      	cmp	r3, #1
 800312a:	d005      	beq.n	8003138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003134:	2b02      	cmp	r3, #2
 8003136:	d130      	bne.n	800319a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	43da      	mvns	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	2201      	movs	r2, #1
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d017      	beq.n	80031d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2203      	movs	r2, #3
 80031dc:	4013      	ands	r3, r2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d123      	bne.n	800322a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	58d3      	ldr	r3, [r2, r3]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2207      	movs	r2, #7
 80031f4:	4013      	ands	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	43da      	mvns	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2107      	movs	r1, #7
 800320e:	400b      	ands	r3, r1
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	409a      	lsls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	43da      	mvns	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	401a      	ands	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	23c0      	movs	r3, #192	@ 0xc0
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	4013      	ands	r3, r2
 8003268:	d100      	bne.n	800326c <HAL_GPIO_Init+0x174>
 800326a:	e09a      	b.n	80033a2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326c:	4b54      	ldr	r3, [pc, #336]	@ (80033c0 <HAL_GPIO_Init+0x2c8>)
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4b53      	ldr	r3, [pc, #332]	@ (80033c0 <HAL_GPIO_Init+0x2c8>)
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	4b51      	ldr	r3, [pc, #324]	@ (80033c0 <HAL_GPIO_Init+0x2c8>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003284:	4a4f      	ldr	r2, [pc, #316]	@ (80033c4 <HAL_GPIO_Init+0x2cc>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	589b      	ldr	r3, [r3, r2]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2203      	movs	r2, #3
 8003296:	4013      	ands	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	220f      	movs	r2, #15
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2390      	movs	r3, #144	@ 0x90
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x1e2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a44      	ldr	r2, [pc, #272]	@ (80033c8 <HAL_GPIO_Init+0x2d0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x1de>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <HAL_GPIO_Init+0x2d4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x1da>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a42      	ldr	r2, [pc, #264]	@ (80033d0 <HAL_GPIO_Init+0x2d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x1d6>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032ce:	2305      	movs	r3, #5
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032da:	2300      	movs	r3, #0
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	2103      	movs	r1, #3
 80032e0:	400a      	ands	r2, r1
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	@ (80033c4 <HAL_GPIO_Init+0x2cc>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b36      	ldr	r3, [pc, #216]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43da      	mvns	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	035b      	lsls	r3, r3, #13
 8003312:	4013      	ands	r3, r2
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800331e:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43da      	mvns	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	039b      	lsls	r3, r3, #14
 800333c:	4013      	ands	r3, r2
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003348:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800334e:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43da      	mvns	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	029b      	lsls	r3, r3, #10
 8003366:	4013      	ands	r3, r2
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003372:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003378:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43da      	mvns	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	025b      	lsls	r3, r3, #9
 8003390:	4013      	ands	r3, r2
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800339c:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_GPIO_Init+0x2dc>)
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	40da      	lsrs	r2, r3
 80033b0:	1e13      	subs	r3, r2, #0
 80033b2:	d000      	beq.n	80033b6 <HAL_GPIO_Init+0x2be>
 80033b4:	e6a8      	b.n	8003108 <HAL_GPIO_Init+0x10>
  } 
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b006      	add	sp, #24
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010000 	.word	0x40010000
 80033c8:	48000400 	.word	0x48000400
 80033cc:	48000800 	.word	0x48000800
 80033d0:	48000c00 	.word	0x48000c00
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	0008      	movs	r0, r1
 80033e2:	0011      	movs	r1, r2
 80033e4:	1cbb      	adds	r3, r7, #2
 80033e6:	1c02      	adds	r2, r0, #0
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	1c7b      	adds	r3, r7, #1
 80033ec:	1c0a      	adds	r2, r1, #0
 80033ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033f0:	1c7b      	adds	r3, r7, #1
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f8:	1cbb      	adds	r3, r7, #2
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003402:	1cbb      	adds	r3, r7, #2
 8003404:	881a      	ldrh	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e301      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2201      	movs	r2, #1
 800342c:	4013      	ands	r3, r2
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x1e>
 8003430:	e08d      	b.n	800354e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003432:	4bc3      	ldr	r3, [pc, #780]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	220c      	movs	r2, #12
 8003438:	4013      	ands	r3, r2
 800343a:	2b04      	cmp	r3, #4
 800343c:	d00e      	beq.n	800345c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800343e:	4bc0      	ldr	r3, [pc, #768]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	220c      	movs	r2, #12
 8003444:	4013      	ands	r3, r2
 8003446:	2b08      	cmp	r3, #8
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x64>
 800344a:	4bbd      	ldr	r3, [pc, #756]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	025b      	lsls	r3, r3, #9
 8003452:	401a      	ands	r2, r3
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	025b      	lsls	r3, r3, #9
 8003458:	429a      	cmp	r2, r3
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	4bb8      	ldr	r3, [pc, #736]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	4013      	ands	r3, r2
 8003466:	d100      	bne.n	800346a <HAL_RCC_OscConfig+0x56>
 8003468:	e070      	b.n	800354c <HAL_RCC_OscConfig+0x138>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d000      	beq.n	8003474 <HAL_RCC_OscConfig+0x60>
 8003472:	e06b      	b.n	800354c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e2d8      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x7c>
 8003480:	4baf      	ldr	r3, [pc, #700]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4bae      	ldr	r3, [pc, #696]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	0249      	lsls	r1, r1, #9
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e02f      	b.n	80034f0 <HAL_RCC_OscConfig+0xdc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10c      	bne.n	80034b2 <HAL_RCC_OscConfig+0x9e>
 8003498:	4ba9      	ldr	r3, [pc, #676]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4ba8      	ldr	r3, [pc, #672]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800349e:	49a9      	ldr	r1, [pc, #676]	@ (8003744 <HAL_RCC_OscConfig+0x330>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	4ba6      	ldr	r3, [pc, #664]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4ba5      	ldr	r3, [pc, #660]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	49a7      	ldr	r1, [pc, #668]	@ (8003748 <HAL_RCC_OscConfig+0x334>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e01e      	b.n	80034f0 <HAL_RCC_OscConfig+0xdc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d10e      	bne.n	80034d8 <HAL_RCC_OscConfig+0xc4>
 80034ba:	4ba1      	ldr	r3, [pc, #644]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4ba0      	ldr	r3, [pc, #640]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034c0:	2180      	movs	r1, #128	@ 0x80
 80034c2:	02c9      	lsls	r1, r1, #11
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034ce:	2180      	movs	r1, #128	@ 0x80
 80034d0:	0249      	lsls	r1, r1, #9
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xdc>
 80034d8:	4b99      	ldr	r3, [pc, #612]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b98      	ldr	r3, [pc, #608]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034de:	4999      	ldr	r1, [pc, #612]	@ (8003744 <HAL_RCC_OscConfig+0x330>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	4b96      	ldr	r3, [pc, #600]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b95      	ldr	r3, [pc, #596]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80034ea:	4997      	ldr	r1, [pc, #604]	@ (8003748 <HAL_RCC_OscConfig+0x334>)
 80034ec:	400a      	ands	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d014      	beq.n	8003522 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7ff fcf2 	bl	8002ee0 <HAL_GetTick>
 80034fc:	0003      	movs	r3, r0
 80034fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003502:	f7ff fced 	bl	8002ee0 <HAL_GetTick>
 8003506:	0002      	movs	r2, r0
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	@ 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e28a      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003514:	4b8a      	ldr	r3, [pc, #552]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	4013      	ands	r3, r2
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0xee>
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7ff fcdd 	bl	8002ee0 <HAL_GetTick>
 8003526:	0003      	movs	r3, r0
 8003528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff fcd8 	bl	8002ee0 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	@ 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e275      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	4b80      	ldr	r3, [pc, #512]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	029b      	lsls	r3, r3, #10
 8003546:	4013      	ands	r3, r2
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x118>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d100      	bne.n	800355a <HAL_RCC_OscConfig+0x146>
 8003558:	e069      	b.n	800362e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800355a:	4b79      	ldr	r3, [pc, #484]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	220c      	movs	r2, #12
 8003560:	4013      	ands	r3, r2
 8003562:	d00b      	beq.n	800357c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003564:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	220c      	movs	r2, #12
 800356a:	4013      	ands	r3, r2
 800356c:	2b08      	cmp	r3, #8
 800356e:	d11c      	bne.n	80035aa <HAL_RCC_OscConfig+0x196>
 8003570:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	025b      	lsls	r3, r3, #9
 8003578:	4013      	ands	r3, r2
 800357a:	d116      	bne.n	80035aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357c:	4b70      	ldr	r3, [pc, #448]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x17e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e24b      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b6b      	ldr	r3, [pc, #428]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	22f8      	movs	r2, #248	@ 0xf8
 8003598:	4393      	bics	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00da      	lsls	r2, r3, #3
 80035a2:	4b67      	ldr	r3, [pc, #412]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a8:	e041      	b.n	800362e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d024      	beq.n	80035fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b2:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b62      	ldr	r3, [pc, #392]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7ff fc8f 	bl	8002ee0 <HAL_GetTick>
 80035c2:	0003      	movs	r3, r0
 80035c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c8:	f7ff fc8a 	bl	8002ee0 <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e227      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2202      	movs	r2, #2
 80035e0:	4013      	ands	r3, r2
 80035e2:	d0f1      	beq.n	80035c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	22f8      	movs	r2, #248	@ 0xf8
 80035ea:	4393      	bics	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00da      	lsls	r2, r3, #3
 80035f4:	4b52      	ldr	r3, [pc, #328]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e018      	b.n	800362e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fc:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff fc6a 	bl	8002ee0 <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003612:	f7ff fc65 	bl	8002ee0 <HAL_GetTick>
 8003616:	0002      	movs	r2, r0
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e202      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003624:	4b46      	ldr	r3, [pc, #280]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2202      	movs	r2, #2
 800362a:	4013      	ands	r3, r2
 800362c:	d1f1      	bne.n	8003612 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2208      	movs	r2, #8
 8003634:	4013      	ands	r3, r2
 8003636:	d036      	beq.n	80036a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d019      	beq.n	8003674 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003640:	4b3f      	ldr	r3, [pc, #252]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003644:	4b3e      	ldr	r3, [pc, #248]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003646:	2101      	movs	r1, #1
 8003648:	430a      	orrs	r2, r1
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364c:	f7ff fc48 	bl	8002ee0 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7ff fc43 	bl	8002ee0 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1e0      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003668:	4b35      	ldr	r3, [pc, #212]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	d0f1      	beq.n	8003656 <HAL_RCC_OscConfig+0x242>
 8003672:	e018      	b.n	80036a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b32      	ldr	r3, [pc, #200]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003678:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800367a:	2101      	movs	r1, #1
 800367c:	438a      	bics	r2, r1
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7ff fc2e 	bl	8002ee0 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368a:	f7ff fc29 	bl	8002ee0 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1c6      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d1f1      	bne.n	800368a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2204      	movs	r2, #4
 80036ac:	4013      	ands	r3, r2
 80036ae:	d100      	bne.n	80036b2 <HAL_RCC_OscConfig+0x29e>
 80036b0:	e0b4      	b.n	800381c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	201f      	movs	r0, #31
 80036b4:	183b      	adds	r3, r7, r0
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	055b      	lsls	r3, r3, #21
 80036c2:	4013      	ands	r3, r2
 80036c4:	d110      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	0549      	lsls	r1, r1, #21
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	055b      	lsls	r3, r3, #21
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	4b18      	ldr	r3, [pc, #96]	@ (800374c <HAL_RCC_OscConfig+0x338>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d11a      	bne.n	800372a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f4:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_RCC_OscConfig+0x338>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_RCC_OscConfig+0x338>)
 80036fa:	2180      	movs	r1, #128	@ 0x80
 80036fc:	0049      	lsls	r1, r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7ff fbed 	bl	8002ee0 <HAL_GetTick>
 8003706:	0003      	movs	r3, r0
 8003708:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7ff fbe8 	bl	8002ee0 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e185      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_OscConfig+0x338>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4013      	ands	r3, r2
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10e      	bne.n	8003750 <HAL_RCC_OscConfig+0x33c>
 8003732:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	4b02      	ldr	r3, [pc, #8]	@ (8003740 <HAL_RCC_OscConfig+0x32c>)
 8003738:	2101      	movs	r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	621a      	str	r2, [r3, #32]
 800373e:	e035      	b.n	80037ac <HAL_RCC_OscConfig+0x398>
 8003740:	40021000 	.word	0x40021000
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffbffff 	.word	0xfffbffff
 800374c:	40007000 	.word	0x40007000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10c      	bne.n	8003772 <HAL_RCC_OscConfig+0x35e>
 8003758:	4bb6      	ldr	r3, [pc, #728]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	4bb5      	ldr	r3, [pc, #724]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800375e:	2101      	movs	r1, #1
 8003760:	438a      	bics	r2, r1
 8003762:	621a      	str	r2, [r3, #32]
 8003764:	4bb3      	ldr	r3, [pc, #716]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	4bb2      	ldr	r3, [pc, #712]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800376a:	2104      	movs	r1, #4
 800376c:	438a      	bics	r2, r1
 800376e:	621a      	str	r2, [r3, #32]
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x398>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x380>
 800377a:	4bae      	ldr	r3, [pc, #696]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	4bad      	ldr	r3, [pc, #692]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003780:	2104      	movs	r1, #4
 8003782:	430a      	orrs	r2, r1
 8003784:	621a      	str	r2, [r3, #32]
 8003786:	4bab      	ldr	r3, [pc, #684]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	4baa      	ldr	r3, [pc, #680]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800378c:	2101      	movs	r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	621a      	str	r2, [r3, #32]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0x398>
 8003794:	4ba7      	ldr	r3, [pc, #668]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	4ba6      	ldr	r3, [pc, #664]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800379a:	2101      	movs	r1, #1
 800379c:	438a      	bics	r2, r1
 800379e:	621a      	str	r2, [r3, #32]
 80037a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	4ba3      	ldr	r3, [pc, #652]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80037a6:	2104      	movs	r1, #4
 80037a8:	438a      	bics	r2, r1
 80037aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d014      	beq.n	80037de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b4:	f7ff fb94 	bl	8002ee0 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7ff fb8f 	bl	8002ee0 <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a9b      	ldr	r2, [pc, #620]	@ (8003a38 <HAL_RCC_OscConfig+0x624>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e12b      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b98      	ldr	r3, [pc, #608]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x3aa>
 80037dc:	e013      	b.n	8003806 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7ff fb7f 	bl	8002ee0 <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	e009      	b.n	80037fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7ff fb7a 	bl	8002ee0 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a91      	ldr	r2, [pc, #580]	@ (8003a38 <HAL_RCC_OscConfig+0x624>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e116      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2202      	movs	r2, #2
 8003802:	4013      	ands	r3, r2
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003806:	231f      	movs	r3, #31
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	4b87      	ldr	r3, [pc, #540]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003816:	4989      	ldr	r1, [pc, #548]	@ (8003a3c <HAL_RCC_OscConfig+0x628>)
 8003818:	400a      	ands	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	4013      	ands	r3, r2
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d12a      	bne.n	8003884 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800382e:	4b81      	ldr	r3, [pc, #516]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003832:	4b80      	ldr	r3, [pc, #512]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003834:	2104      	movs	r1, #4
 8003836:	430a      	orrs	r2, r1
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800383a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800383c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800383e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003840:	2101      	movs	r1, #1
 8003842:	430a      	orrs	r2, r1
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7ff fb4b 	bl	8002ee0 <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003850:	f7ff fb46 	bl	8002ee0 <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0e3      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003862:	4b74      	ldr	r3, [pc, #464]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003866:	2202      	movs	r2, #2
 8003868:	4013      	ands	r3, r2
 800386a:	d0f1      	beq.n	8003850 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800386c:	4b71      	ldr	r3, [pc, #452]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800386e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003870:	22f8      	movs	r2, #248	@ 0xf8
 8003872:	4393      	bics	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800387e:	430a      	orrs	r2, r1
 8003880:	635a      	str	r2, [r3, #52]	@ 0x34
 8003882:	e034      	b.n	80038ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	3305      	adds	r3, #5
 800388a:	d111      	bne.n	80038b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800388c:	4b69      	ldr	r3, [pc, #420]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003890:	4b68      	ldr	r3, [pc, #416]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003892:	2104      	movs	r1, #4
 8003894:	438a      	bics	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003898:	4b66      	ldr	r3, [pc, #408]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389c:	22f8      	movs	r2, #248	@ 0xf8
 800389e:	4393      	bics	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	00da      	lsls	r2, r3, #3
 80038a8:	4b62      	ldr	r3, [pc, #392]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038aa:	430a      	orrs	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80038ae:	e01e      	b.n	80038ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038b0:	4b60      	ldr	r3, [pc, #384]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038b6:	2104      	movs	r1, #4
 80038b8:	430a      	orrs	r2, r1
 80038ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80038bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	438a      	bics	r2, r1
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7ff fb0a 	bl	8002ee0 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038d2:	f7ff fb05 	bl	8002ee0 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0a2      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d1f1      	bne.n	80038d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d100      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4e4>
 80038f6:	e097      	b.n	8003a28 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	220c      	movs	r2, #12
 80038fe:	4013      	ands	r3, r2
 8003900:	2b08      	cmp	r3, #8
 8003902:	d100      	bne.n	8003906 <HAL_RCC_OscConfig+0x4f2>
 8003904:	e06b      	b.n	80039de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d14c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b49      	ldr	r3, [pc, #292]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b48      	ldr	r3, [pc, #288]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003914:	494a      	ldr	r1, [pc, #296]	@ (8003a40 <HAL_RCC_OscConfig+0x62c>)
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7ff fae1 	bl	8002ee0 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003924:	f7ff fadc 	bl	8002ee0 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e079      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003936:	4b3f      	ldr	r3, [pc, #252]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	049b      	lsls	r3, r3, #18
 800393e:	4013      	ands	r3, r2
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003942:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	220f      	movs	r2, #15
 8003948:	4393      	bics	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003950:	4b38      	ldr	r3, [pc, #224]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003952:	430a      	orrs	r2, r1
 8003954:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003956:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a44 <HAL_RCC_OscConfig+0x630>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	431a      	orrs	r2, r3
 800396a:	4b32      	ldr	r3, [pc, #200]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b30      	ldr	r3, [pc, #192]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b2f      	ldr	r3, [pc, #188]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 8003976:	2180      	movs	r1, #128	@ 0x80
 8003978:	0449      	lsls	r1, r1, #17
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7ff faaf 	bl	8002ee0 <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7ff faaa 	bl	8002ee0 <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e047      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	4013      	ands	r3, r2
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x574>
 80039a6:	e03f      	b.n	8003a28 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b22      	ldr	r3, [pc, #136]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80039ae:	4924      	ldr	r1, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x62c>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7ff fa94 	bl	8002ee0 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7ff fa8f 	bl	8002ee0 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e02c      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d0:	4b18      	ldr	r3, [pc, #96]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	049b      	lsls	r3, r3, #18
 80039d8:	4013      	ands	r3, r2
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x5aa>
 80039dc:	e024      	b.n	8003a28 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01f      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80039f0:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <HAL_RCC_OscConfig+0x620>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	401a      	ands	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	220f      	movs	r2, #15
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	23f0      	movs	r3, #240	@ 0xf0
 8003a18:	039b      	lsls	r3, r3, #14
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b008      	add	sp, #32
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	00001388 	.word	0x00001388
 8003a3c:	efffffff 	.word	0xefffffff
 8003a40:	feffffff 	.word	0xfeffffff
 8003a44:	ffc2ffff 	.word	0xffc2ffff

08003a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b3      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d911      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4393      	bics	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7c:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e09a      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	4013      	ands	r3, r2
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d006      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003aa8:	21e0      	movs	r1, #224	@ 0xe0
 8003aaa:	00c9      	lsls	r1, r1, #3
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	22f0      	movs	r2, #240	@ 0xf0
 8003ab6:	4393      	bics	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b44      	ldr	r3, [pc, #272]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4013      	ands	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2380      	movs	r3, #128	@ 0x80
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d114      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06e      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b38      	ldr	r3, [pc, #224]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	@ 0x80
 8003af4:	049b      	lsls	r3, r3, #18
 8003af6:	4013      	ands	r3, r2
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e062      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b34      	ldr	r3, [pc, #208]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2202      	movs	r2, #2
 8003b04:	4013      	ands	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e05b      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0c:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	4393      	bics	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7ff f9de 	bl	8002ee0 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b28:	e009      	b.n	8003b3e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2a:	f7ff f9d9 	bl	8002ee0 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_RCC_ClockConfig+0x18c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e042      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	220c      	movs	r2, #12
 8003b44:	401a      	ands	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1ec      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d211      	bcs.n	8003b82 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2201      	movs	r2, #1
 8003b64:	4393      	bics	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_RCC_ClockConfig+0x184>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e020      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2204      	movs	r2, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <HAL_RCC_ClockConfig+0x190>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ba0:	f000 f820 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003ba4:	0001      	movs	r1, r0
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <HAL_RCC_ClockConfig+0x188>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	220f      	movs	r2, #15
 8003bae:	4013      	ands	r3, r2
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bdc <HAL_RCC_ClockConfig+0x194>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	000a      	movs	r2, r1
 8003bb6:	40da      	lsrs	r2, r3
 8003bb8:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x198>)
 8003bba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f7ff f949 	bl	8002e54 <HAL_InitTick>
  
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	00001388 	.word	0x00001388
 8003bd8:	fffff8ff 	.word	0xfffff8ff
 8003bdc:	08004468 	.word	0x08004468
 8003be0:	20000000 	.word	0x20000000

08003be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	220c      	movs	r2, #12
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x30>
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x36>
 8003c12:	e02c      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c14:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c16:	613b      	str	r3, [r7, #16]
      break;
 8003c18:	e02c      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	0c9b      	lsrs	r3, r3, #18
 8003c1e:	220f      	movs	r2, #15
 8003c20:	4013      	ands	r3, r2
 8003c22:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c28:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	4013      	ands	r3, r2
 8003c30:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c32:	5cd3      	ldrb	r3, [r2, r3]
 8003c34:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	025b      	lsls	r3, r3, #9
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	4810      	ldr	r0, [pc, #64]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c44:	f7fc fa60 	bl	8000108 <__udivsi3>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4353      	muls	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e009      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	000a      	movs	r2, r1
 8003c58:	0152      	lsls	r2, r2, #5
 8003c5a:	1a52      	subs	r2, r2, r1
 8003c5c:	0193      	lsls	r3, r2, #6
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	185b      	adds	r3, r3, r1
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	e002      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c70:	613b      	str	r3, [r7, #16]
      break;
 8003c72:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c74:	693b      	ldr	r3, [r7, #16]
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b006      	add	sp, #24
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	40021000 	.word	0x40021000
 8003c84:	007a1200 	.word	0x007a1200
 8003c88:	08004478 	.word	0x08004478
 8003c8c:	08004488 	.word	0x08004488

08003c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0a8      	b.n	8003df4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	2382      	movs	r3, #130	@ 0x82
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d009      	beq.n	8003cca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
 8003cbc:	e005      	b.n	8003cca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	225d      	movs	r2, #93	@ 0x5d
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	225c      	movs	r2, #92	@ 0x5c
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff f80c 	bl	8002d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	225d      	movs	r2, #93	@ 0x5d
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2140      	movs	r1, #64	@ 0x40
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	23e0      	movs	r3, #224	@ 0xe0
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e002      	b.n	8003d1c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	015b      	lsls	r3, r3, #5
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	23f0      	movs	r3, #240	@ 0xf0
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d008      	beq.n	8003d3a <HAL_SPI_Init+0xaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	23e0      	movs	r3, #224	@ 0xe0
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	2382      	movs	r3, #130	@ 0x82
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	2384      	movs	r3, #132	@ 0x84
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2102      	movs	r1, #2
 8003d56:	400b      	ands	r3, r1
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	400b      	ands	r3, r1
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6999      	ldr	r1, [r3, #24]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2138      	movs	r1, #56	@ 0x38
 8003d76:	400b      	ands	r3, r1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	400b      	ands	r3, r1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	0011      	movs	r1, r2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	401a      	ands	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	2204      	movs	r2, #4
 8003da0:	401a      	ands	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	2110      	movs	r1, #16
 8003da8:	400b      	ands	r3, r1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db0:	2108      	movs	r1, #8
 8003db2:	400b      	ands	r3, r1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68d9      	ldr	r1, [r3, #12]
 8003dba:	23f0      	movs	r3, #240	@ 0xf0
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	015b      	lsls	r3, r3, #5
 8003dca:	401a      	ands	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4907      	ldr	r1, [pc, #28]	@ (8003dfc <HAL_SPI_Init+0x16c>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	225d      	movs	r2, #93	@ 0x5d
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	fffff7ff 	.word	0xfffff7ff

08003e00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	1dbb      	adds	r3, r7, #6
 8003e0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e10:	231f      	movs	r3, #31
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	225c      	movs	r2, #92	@ 0x5c
 8003e1c:	5c9b      	ldrb	r3, [r3, r2]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_Transmit+0x26>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e147      	b.n	80040b6 <HAL_SPI_Transmit+0x2b6>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	225c      	movs	r2, #92	@ 0x5c
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7ff f857 	bl	8002ee0 <HAL_GetTick>
 8003e32:	0003      	movs	r3, r0
 8003e34:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e36:	2316      	movs	r3, #22
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	1dba      	adds	r2, r7, #6
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	225d      	movs	r2, #93	@ 0x5d
 8003e44:	5c9b      	ldrb	r3, [r3, r2]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d004      	beq.n	8003e56 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e4c:	231f      	movs	r3, #31
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2202      	movs	r2, #2
 8003e52:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e54:	e128      	b.n	80040a8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_SPI_Transmit+0x64>
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e64:	231f      	movs	r3, #31
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e6c:	e11c      	b.n	80040a8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	225d      	movs	r2, #93	@ 0x5d
 8003e72:	2103      	movs	r1, #3
 8003e74:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1dba      	adds	r2, r7, #6
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1dba      	adds	r2, r7, #6
 8003e8e:	8812      	ldrh	r2, [r2, #0]
 8003e90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2244      	movs	r2, #68	@ 0x44
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2246      	movs	r2, #70	@ 0x46
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d110      	bne.n	8003ee2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2140      	movs	r1, #64	@ 0x40
 8003ecc:	438a      	bics	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2180      	movs	r1, #128	@ 0x80
 8003edc:	01c9      	lsls	r1, r1, #7
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2240      	movs	r2, #64	@ 0x40
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d007      	beq.n	8003f00 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	@ 0x40
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	23e0      	movs	r3, #224	@ 0xe0
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d952      	bls.n	8003fb2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <HAL_SPI_Transmit+0x11e>
 8003f14:	2316      	movs	r3, #22
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d143      	bne.n	8003fa6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f42:	e030      	b.n	8003fa6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d112      	bne.n	8003f78 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f76:	e016      	b.n	8003fa6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f78:	f7fe ffb2 	bl	8002ee0 <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d802      	bhi.n	8003f8e <HAL_SPI_Transmit+0x18e>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Transmit+0x194>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f94:	231f      	movs	r3, #31
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2203      	movs	r2, #3
 8003f9a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	225d      	movs	r2, #93	@ 0x5d
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]
          goto error;
 8003fa4:	e080      	b.n	80040a8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1c9      	bne.n	8003f44 <HAL_SPI_Transmit+0x144>
 8003fb0:	e053      	b.n	800405a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_SPI_Transmit+0x1c4>
 8003fba:	2316      	movs	r3, #22
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d145      	bne.n	8004050 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003fea:	e031      	b.n	8004050 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d113      	bne.n	8004022 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004020:	e016      	b.n	8004050 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004022:	f7fe ff5d 	bl	8002ee0 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d802      	bhi.n	8004038 <HAL_SPI_Transmit+0x238>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	d102      	bne.n	800403e <HAL_SPI_Transmit+0x23e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800403e:	231f      	movs	r3, #31
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2203      	movs	r2, #3
 8004044:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	225d      	movs	r2, #93	@ 0x5d
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
          goto error;
 800404e:	e02b      	b.n	80040a8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1c8      	bne.n	8003fec <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f95d 	bl	8004320 <SPI_EndRxTxTransaction>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d002      	beq.n	8004070 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	2b00      	cmp	r3, #0
 8004094:	d004      	beq.n	80040a0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004096:	231f      	movs	r3, #31
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e003      	b.n	80040a8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225d      	movs	r2, #93	@ 0x5d
 80040a4:	2101      	movs	r1, #1
 80040a6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	225c      	movs	r2, #92	@ 0x5c
 80040ac:	2100      	movs	r1, #0
 80040ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040b0:	231f      	movs	r3, #31
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b008      	add	sp, #32
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d0:	f7fe ff06 	bl	8002ee0 <HAL_GetTick>
 80040d4:	0002      	movs	r2, r0
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e0:	f7fe fefe 	bl	8002ee0 <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	015b      	lsls	r3, r3, #5
 80040ee:	0d1b      	lsrs	r3, r3, #20
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	4353      	muls	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	e058      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	d055      	beq.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040fe:	f7fe feef 	bl	8002ee0 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	429a      	cmp	r2, r3
 800410c:	d902      	bls.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x54>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d142      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	21e0      	movs	r1, #224	@ 0xe0
 8004120:	438a      	bics	r2, r1
 8004122:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	2382      	movs	r3, #130	@ 0x82
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	429a      	cmp	r2, r3
 800412e:	d113      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	429a      	cmp	r2, r3
 800413a:	d005      	beq.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	429a      	cmp	r2, r3
 8004146:	d107      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2140      	movs	r1, #64	@ 0x40
 8004154:	438a      	bics	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	429a      	cmp	r2, r3
 8004162:	d110      	bne.n	8004186 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	491a      	ldr	r1, [pc, #104]	@ (80041d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004170:	400a      	ands	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	0189      	lsls	r1, r1, #6
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	225d      	movs	r2, #93	@ 0x5d
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	225c      	movs	r2, #92	@ 0x5c
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e017      	b.n	80041ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	425a      	negs	r2, r3
 80041ba:	4153      	adcs	r3, r2
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	001a      	movs	r2, r3
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d197      	bne.n	80040f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b008      	add	sp, #32
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	20000000 	.word	0x20000000
 80041d8:	ffffdfff 	.word	0xffffdfff

080041dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041ea:	2317      	movs	r3, #23
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041f2:	f7fe fe75 	bl	8002ee0 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	18d3      	adds	r3, r2, r3
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004202:	f7fe fe6d 	bl	8002ee0 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004212:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	0013      	movs	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	189b      	adds	r3, r3, r2
 800421c:	00da      	lsls	r2, r3, #3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	0d1b      	lsrs	r3, r3, #20
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	4353      	muls	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004228:	e068      	b.n	80042fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	23c0      	movs	r3, #192	@ 0xc0
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	429a      	cmp	r2, r3
 8004232:	d10a      	bne.n	800424a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	2117      	movs	r1, #23
 8004242:	187b      	adds	r3, r7, r1
 8004244:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004246:	187b      	adds	r3, r7, r1
 8004248:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	d055      	beq.n	80042fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004250:	f7fe fe46 	bl	8002ee0 <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	429a      	cmp	r2, r3
 800425e:	d902      	bls.n	8004266 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d142      	bne.n	80042ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	21e0      	movs	r1, #224	@ 0xe0
 8004272:	438a      	bics	r2, r1
 8004274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	2382      	movs	r3, #130	@ 0x82
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	429a      	cmp	r2, r3
 8004280:	d113      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	429a      	cmp	r2, r3
 800428c:	d005      	beq.n	800429a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	429a      	cmp	r2, r3
 8004298:	d107      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2140      	movs	r1, #64	@ 0x40
 80042a6:	438a      	bics	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d110      	bne.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4916      	ldr	r1, [pc, #88]	@ (800431c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2180      	movs	r1, #128	@ 0x80
 80042d2:	0189      	lsls	r1, r1, #6
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	225d      	movs	r2, #93	@ 0x5d
 80042dc:	2101      	movs	r1, #1
 80042de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	225c      	movs	r2, #92	@ 0x5c
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e010      	b.n	800430e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d18e      	bne.n	800422a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b00a      	add	sp, #40	@ 0x28
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	20000000 	.word	0x20000000
 800431c:	ffffdfff 	.word	0xffffdfff

08004320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	23c0      	movs	r3, #192	@ 0xc0
 8004330:	0159      	lsls	r1, r3, #5
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	0013      	movs	r3, r2
 800433a:	2200      	movs	r2, #0
 800433c:	f7ff ff4e 	bl	80041dc <SPI_WaitFifoStateUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d007      	beq.n	8004354 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004348:	2220      	movs	r2, #32
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e027      	b.n	80043a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	0013      	movs	r3, r2
 800435e:	2200      	movs	r2, #0
 8004360:	2180      	movs	r1, #128	@ 0x80
 8004362:	f7ff fead 	bl	80040c0 <SPI_WaitFlagStateUntilTimeout>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d007      	beq.n	800437a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436e:	2220      	movs	r2, #32
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e014      	b.n	80043a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	23c0      	movs	r3, #192	@ 0xc0
 800437e:	00d9      	lsls	r1, r3, #3
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	0013      	movs	r3, r2
 8004388:	2200      	movs	r2, #0
 800438a:	f7ff ff27 	bl	80041dc <SPI_WaitFifoStateUntilTimeout>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d007      	beq.n	80043a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004396:	2220      	movs	r2, #32
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e000      	b.n	80043a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bd80      	pop	{r7, pc}

080043ac <memset>:
 80043ac:	0003      	movs	r3, r0
 80043ae:	1882      	adds	r2, r0, r2
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	7019      	strb	r1, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	2600      	movs	r6, #0
 80043c0:	4c0c      	ldr	r4, [pc, #48]	@ (80043f4 <__libc_init_array+0x38>)
 80043c2:	4d0d      	ldr	r5, [pc, #52]	@ (80043f8 <__libc_init_array+0x3c>)
 80043c4:	1b64      	subs	r4, r4, r5
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	2600      	movs	r6, #0
 80043ce:	f000 f819 	bl	8004404 <_init>
 80043d2:	4c0a      	ldr	r4, [pc, #40]	@ (80043fc <__libc_init_array+0x40>)
 80043d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004400 <__libc_init_array+0x44>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	00b3      	lsls	r3, r6, #2
 80043e2:	58eb      	ldr	r3, [r5, r3]
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	00b3      	lsls	r3, r6, #2
 80043ec:	58eb      	ldr	r3, [r5, r3]
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08004498 	.word	0x08004498
 80043f8:	08004498 	.word	0x08004498
 80043fc:	0800449c 	.word	0x0800449c
 8004400:	08004498 	.word	0x08004498

08004404 <_init>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr

08004410 <_fini>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr
